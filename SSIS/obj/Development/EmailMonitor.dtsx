<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="8/12/2016 2:41:06 PM"
  DTS:CreationName="SSIS.Package.3"
  DTS:CreatorComputerName="PAI-201"
  DTS:CreatorName="pai\apatel"
  DTS:DTSID="{8F4E5DE3-FFBF-4140-B612-315763AD1300}"
  DTS:ExecutableType="SSIS.Package.3"
  DTS:LastModifiedProductVersion="13.0.1400.361"
  DTS:LocaleID="1033"
  DTS:ObjectName="EmailMonitor"
  DTS:PackageType="5"
  DTS:VersionBuild="57"
  DTS:VersionGUID="{E7A5CB90-3B70-4178-AF7B-28BC8E057C1A}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">6</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[Excel Connection Manager 1]"
      DTS:CreationName="EXCEL"
      DTS:DTSID="{FFB8D51F-8464-4462-ACD4-38E60A07AC52}"
      DTS:ObjectName="Excel Connection Manager 1">
      <DTS:PropertyExpression
        DTS:Name="ExcelFilePath">@[User::ProcessingFile]</DTS:PropertyExpression>
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Provider=Microsoft.ACE.OLEDB.12.0;Data Source=C:\ExcelDrop\Processing\BOB-Report04303768-YYYYMMDD.xlsx;Extended Properties=&quot;EXCEL 12.0 XML;HDR=YES&quot;;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[PAI-201.HoneDB]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{E87E4E76-6B9B-4E08-8390-BAD0DCAFF7E1}"
      DTS:ObjectName="PAI-201.HoneDB">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=PAI-201;Initial Catalog=HoneDB;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[WMI Connection Manager]"
      DTS:CreationName="WMI"
      DTS:DTSID="{67CD68FD-04A5-4E3C-81C7-81CFF6EC8AA6}"
      DTS:ObjectName="WMI Connection Manager">
      <DTS:ObjectData>
        <WmiConnectionManager
          ConnectionString="ServerName=\\localhost;Namespace=\root\cimv2;UseNtAuth=True;UserName=;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{3AFDD3D6-07C6-4846-A70D-18771609D1C8}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::ArchivePath] +  @[User::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchiveFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\Archive\BOB-Report04303768-YYYYMMDD.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{41BB10C6-0B2C-48E7-9339-61B9DD9F9764}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::Drive] +  @[User::Path] + &quot;Archive\\&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ArchivePath">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\Archive\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2F51B32B-BE92-4CBF-9798-86BD4AB107AF}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Drive">
      <DTS:VariableValue
        DTS:DataType="8">C:</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2BE4438C-85F3-4EB9-923B-640738CB8C79}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::DropPath] +  @[User::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DropFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\BOB-Report04303768-YYYYMMDD.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{31FEDF9F-8B42-4168-B868-C5A63C33567A}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::Drive] +  @[User::Path]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="DropPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{54608251-CBE2-4EB5-A964-78AADB00BECD}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="EmailPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E7137211-1E16-49A9-AEBB-62AD234C87E5}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileExtension">
      <DTS:VariableValue
        DTS:DataType="8">xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{375F9E99-48D0-4CD5-8EA6-BB8941B7E002}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::FileNamePrefix] + &quot;*.&quot; + @[User::FileExtension]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileMask">
      <DTS:VariableValue
        DTS:DataType="8">BOB-Report04303768-*.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7DBC6AA7-2498-455B-85AB-55B31F7FB106}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileName">
      <DTS:VariableValue
        DTS:DataType="8">BOB-Report04303768-YYYYMMDD.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{9D51A70A-EAAA-40E5-9A0E-71DCD61C231C}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileNamePrefix">
      <DTS:VariableValue
        DTS:DataType="8">BOB-Report04303768-</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2AB76C04-3AF7-4432-85BB-735543B4467C}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="IsFileExists">
      <DTS:VariableValue
        DTS:DataType="11">0</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EDCDF76A-3E5F-466F-9CEE-4E664D5D8A2D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Path">
      <DTS:VariableValue
        DTS:DataType="8">\ExcelDrop\</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{E68020D3-3B21-48BD-A78D-AE1EBCFFC031}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::ProcessingPath] +  @[User::FileName]"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessingFile">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\Processing\BOB-Report04303768-YYYYMMDD.xlsx</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C611C676-F516-4F2A-8179-27DBCDB27A51}"
      DTS:EvaluateAsExpression="True"
      DTS:Expression="@[User::Drive] +  @[User::Path] + &quot;Processing\\&quot;"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ProcessingPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\ExcelDrop\Processing\</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\For Loop Container"
      DTS:CreationName="STOCK:FORLOOP"
      DTS:Description="For Loop for reading the Outlook Files of Data Dev Shared email"
      DTS:DTSID="{0bdadf54-9198-4d72-b203-19f83bcdee1f}"
      DTS:EvalExpression="true"
      DTS:ExecutableType="STOCK:FORLOOP"
      DTS:LocaleID="-1"
      DTS:MaxConcurrent="1"
      DTS:ObjectName="For Loop Container">
      <DTS:Variables />
      <DTS:Executables>
        <DTS:Executable
          DTS:refId="Package\For Loop Container\Iterate Through all the Files"
          DTS:CreationName="STOCK:FOREACHLOOP"
          DTS:Description="Foreach Loop Container"
          DTS:DTSID="{0F3A7403-387C-4F36-BA62-8C0AF456E3BE}"
          DTS:ExecutableType="STOCK:FOREACHLOOP"
          DTS:LocaleID="-1"
          DTS:ObjectName="Iterate Through all the Files">
          <DTS:ForEachEnumerator
            DTS:CreationName="DTS.ForEachFileEnumerator.3"
            DTS:DTSID="{3E6C270D-3669-4A52-B57C-FD71C1AF1F35}"
            DTS:ObjectName="{3E6C270D-3669-4A52-B57C-FD71C1AF1F35}">
            <DTS:ObjectData>
              <ForEachFileEnumeratorProperties>
                <FEFEProperty
                  Folder="C:\ExcelDrop" />
                <FEFEProperty
                  FileSpec="BOB-Report04303768-*.xlsx" />
                <FEFEProperty
                  FileNameRetrievalType="1" />
                <FEFEProperty
                  Recurse="0" />
              </ForEachFileEnumeratorProperties>
            </DTS:ObjectData>
          </DTS:ForEachEnumerator>
          <DTS:Variables />
          <DTS:Executables>
            <DTS:Executable
              DTS:refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task"
              DTS:CreationName="SSIS.Pipeline.3"
              DTS:Description="Data Flow Task"
              DTS:DTSID="{483028e9-04c8-43eb-a40b-9c5f44d607db}"
              DTS:ExecutableType="SSIS.Pipeline.3"
              DTS:LocaleID="-1"
              DTS:ObjectName="Data Flow Task"
              DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
              <DTS:Variables />
              <DTS:EventHandlers>
                <DTS:EventHandler
                  DTS:refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.EventHandlers[OnError]"
                  DTS:CreationName="OnError"
                  DTS:DTSID="{63fb60b1-96a4-47c2-bebb-8550761d3c62}"
                  DTS:EventID="0"
                  DTS:EventName="OnError"
                  DTS:LocaleID="-1">
                  <DTS:Variables>
                    <DTS:Variable
                      DTS:CreationName=""
                      DTS:Description="The propagate property of the event"
                      DTS:DTSID="{c3749efc-a16c-4926-8b62-b77066ffb9ec}"
                      DTS:IncludeInDebugDump="6789"
                      DTS:Namespace="System"
                      DTS:ObjectName="Propagate">
                      <DTS:VariableValue
                        DTS:DataType="11">-1</DTS:VariableValue>
                    </DTS:Variable>
                  </DTS:Variables>
                  <DTS:Executables>
                    <DTS:Executable
                      DTS:refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.EventHandlers[OnError]\Move file from processing to archive on error"
                      DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                      DTS:Description="File System Task"
                      DTS:DTSID="{86695989-35dd-4755-8cf5-62a17b0813bc}"
                      DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
                      DTS:LocaleID="-1"
                      DTS:ObjectName="Move file from processing to archive on error"
                      DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2016 RC3; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
                      <DTS:Variables />
                      <DTS:ObjectData>
                        <FileSystemData
                          TaskOverwriteDestFile="True"
                          TaskSourcePath="User::ProcessingFile"
                          TaskIsSourceVariable="True"
                          TaskDestinationPath="User::ArchivePath"
                          TaskIsDestinationVariable="True" />
                      </DTS:ObjectData>
                    </DTS:Executable>
                  </DTS:Executables>
                </DTS:EventHandler>
              </DTS:EventHandlers>
              <DTS:ObjectData>
                <pipeline
                  version="1">
                  <components>
                    <component
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split"
                      componentClassID="DTSTransform.ConditionalSplit.3"
                      contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
                      name="Conditional Split"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Inputs[Conditional Split Input]"
                          description="Input to the Conditional Split Transformation"
                          name="Conditional Split Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Inputs[Conditional Split Input].Columns[LookupCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="LookupCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Case 1]"
                          description="Output 1 of the Conditional Split Transformation"
                          errorOrTruncationOperation="Computation"
                          errorRowDisposition="IgnoreFailure"
                          exclusionGroup="1"
                          name="Case 1"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Inputs[Conditional Split Input]"
                          truncationRowDisposition="IgnoreFailure">
                          <properties>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                              name="Expression">[ISNULL](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode]})</property>
                            <property
                              containsID="true"
                              dataType="System.String"
                              description="Specifies the friendly version of the expression. This expression version uses column names."
                              expressionType="Notify"
                              name="FriendlyExpression">ISNULL(LookupCode)</property>
                            <property
                              dataType="System.Int32"
                              description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                              name="EvaluationOrder">0</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Default Output]"
                          description="Default Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          name="Conditional Split Default Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Inputs[Conditional Split Input]">
                          <properties>
                            <property
                              dataType="System.Boolean"
                              name="IsDefaultOut">true</property>
                          </properties>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Error Output]"
                          description="Error Output of the Conditional Split Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Conditional Split Error Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Inputs[Conditional Split Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion"
                      componentClassID="DTSTransform.DataConvert.3"
                      contactInfo="Data Conversion;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Data Conversion"
                      name="Data Conversion"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]"
                          name="Data Conversion Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[LookupCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="LookupCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[AccountName]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="AccountName"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountName]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[PolicyAndLineTypes]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PolicyAndLineTypes"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAndLineTypes]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[LineStatusCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="LineStatusCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LineStatusCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[ProducerCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ProducerCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ProducerCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[IssuingCompanyCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="IssuingCompanyCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[IssuingCompanyCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[PremiumPayableCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PremiumPayableCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumPayableCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[TypeCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="TypeCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[TypeCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[Address1]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Address1"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address1]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[Address2]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="Address2"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address2]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[City]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="City"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[City]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[StateCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="StateCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[StateCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[PostalCode]"
                              cachedDataType="r8"
                              cachedName="PostalCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PostalCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[PolicyAgencyDefinedCategory]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PolicyAgencyDefinedCategory"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAgencyDefinedCategory]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[ActiveInactiveStatus]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ActiveInactiveStatus"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ActiveInactiveStatus]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[AccountTypeCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="AccountTypeCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountTypeCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[EffectiveDate]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="EffectiveDate"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[EffectiveDate]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[ExpirationDate]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ExpirationDate"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ExpirationDate]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[PremiumBilled]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PremiumBilled"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumBilled]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[CommissionBilled]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="CommissionBilled"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionBilled]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[PremiumAnnualized]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PremiumAnnualized"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumAnnualized]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[CommissionAnnualized]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="CommissionAnnualized"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionAnnualized]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input].Columns[SICCode]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SICCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SICCode]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output]"
                          exclusionGroup="1"
                          name="Data Conversion Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of LookupCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of LookupCode]"
                              name="Copy of LookupCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of AccountName]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of AccountName]"
                              name="Copy of AccountName"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountName]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAndLineTypes]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAndLineTypes]"
                              name="Copy of PolicyAndLineTypes"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAndLineTypes]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of LineStatusCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of LineStatusCode]"
                              name="Copy of LineStatusCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LineStatusCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ProducerCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="20"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ProducerCode]"
                              name="Copy of ProducerCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ProducerCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of IssuingCompanyCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="20"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of IssuingCompanyCode]"
                              name="Copy of IssuingCompanyCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[IssuingCompanyCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PremiumPayableCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="20"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PremiumPayableCode]"
                              name="Copy of PremiumPayableCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumPayableCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of TypeCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="1"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of TypeCode]"
                              name="Copy of TypeCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[TypeCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address1]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="100"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address1]"
                              name="Copy of Address1"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address1]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address2]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address2]"
                              name="Copy of Address2"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address2]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of City]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of City]"
                              name="Copy of City"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[City]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of StateCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of StateCode]"
                              name="Copy of StateCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[StateCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PostalCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="5"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PostalCode]"
                              name="Copy of PostalCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PostalCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAgencyDefinedCategory]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="50"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAgencyDefinedCategory]"
                              name="Copy of PolicyAgencyDefinedCategory"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAgencyDefinedCategory]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ActiveInactiveStatus]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="100"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ActiveInactiveStatus]"
                              name="Copy of ActiveInactiveStatus"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ActiveInactiveStatus]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of AccountTypeCode]"
                              codePage="1252"
                              dataType="str"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              length="5"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of AccountTypeCode]"
                              name="Copy of AccountTypeCode"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountTypeCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[EffectiveDateData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[EffectiveDateData]"
                              name="EffectiveDateData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[EffectiveDate]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[ExpirationDateData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[ExpirationDateData]"
                              name="ExpirationDateData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ExpirationDate]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumBilledData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumBilledData]"
                              name="PremiumBilledData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumBilled]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionBilledData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionBilledData]"
                              name="CommissionBilledData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionBilled]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumAnnualizedData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumAnnualizedData]"
                              name="PremiumAnnualizedData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumAnnualized]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionAnnualizedData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionAnnualizedData]"
                              name="CommissionAnnualizedData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionAnnualized]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[SICCodeData]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="FailComponent"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[SICCodeData]"
                              name="SICCodeData"
                              truncationRowDisposition="FailComponent">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.Int32"
                                  description="Specifies the input column used as the source of data for the conversion."
                                  name="SourceInputColumnLineageID">#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SICCode]}</property>
                                <property
                                  dataType="System.Boolean"
                                  description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                                  name="FastParse">false</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Data Conversion Error Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column"
                      componentClassID="DTSTransform.DerivedColumn.3"
                      contactInfo="Derived Column;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
                      description="Creates new column values by applying expressions to transformation input columns. Create new columns or overwrite existing ones. For example, concatenate the values from the 'first name' and 'last name' column to make a 'full name' column."
                      name="Derived Column"
                      usesDispositions="true">
                      <inputs>
                        <input
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input]"
                          description="Input to the Derived Column Transformation"
                          name="Derived Column Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[Copy of Address2]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of Address2"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address2]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[Copy of PolicyAgencyDefinedCategory]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of PolicyAgencyDefinedCategory"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAgencyDefinedCategory]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[EffectiveDateData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="EffectiveDateData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[EffectiveDateData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[ExpirationDateData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="ExpirationDateData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[ExpirationDateData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[PremiumBilledData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PremiumBilledData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumBilledData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[CommissionBilledData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="CommissionBilledData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionBilledData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[PremiumAnnualizedData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="PremiumAnnualizedData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumAnnualizedData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[CommissionAnnualizedData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="CommissionAnnualizedData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionAnnualizedData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[SICCodeData]"
                              cachedDataType="wstr"
                              cachedLength="255"
                              cachedName="SICCodeData"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[SICCodeData]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input].Columns[Copy of ProducerCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="20"
                              cachedName="Copy of ProducerCode"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ProducerCode]" />
                          </inputColumns>
                          <externalMetadataColumns />
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output]"
                          description="Default Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          name="Derived Column Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[EffectiveDateDataDervied]"
                              dataType="dbTimeStamp"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[EffectiveDateDataDervied]"
                              name="EffectiveDateDataDervied"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_DBTIMESTAMP)([SUBSTRING](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[EffectiveDateData]},7,4) + "-" + [SUBSTRING](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[EffectiveDateData]},1,2) + "-" + [SUBSTRING](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[EffectiveDateData]},4,2) + " 00:00:00")</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_DBTIMESTAMP)(SUBSTRING(EffectiveDateData,7,4) + "-" + SUBSTRING(EffectiveDateData,1,2) + "-" + SUBSTRING(EffectiveDateData,4,2) + " 00:00:00")</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[ExpirationDateDataDerived]"
                              dataType="dbTimeStamp"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[ExpirationDateDataDerived]"
                              name="ExpirationDateDataDerived"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_DBTIMESTAMP)([SUBSTRING]([TRIM](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[ExpirationDateData]}),7,4) + "-" + [SUBSTRING]([TRIM](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[ExpirationDateData]}),1,2) + "-" + [SUBSTRING]([TRIM](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[ExpirationDateData]}),4,2) + " 00:00:00")</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_DBTIMESTAMP)(SUBSTRING(TRIM(ExpirationDateData),7,4) + "-" + SUBSTRING(TRIM(ExpirationDateData),1,2) + "-" + SUBSTRING(TRIM(ExpirationDateData),4,2) + " 00:00:00")</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[SICCodeDataDerived]"
                              dataType="i4"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[SICCodeDataDerived]"
                              name="SICCodeDataDerived"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_I4)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[SICCodeData]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_I4)SICCodeData</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PremiumBilledDataDerived]"
                              dataType="numeric"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PremiumBilledDataDerived]"
                              name="PremiumBilledDataDerived"
                              precision="18"
                              scale="5"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NUMERIC,18,5)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumBilledData]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NUMERIC,18,5)PremiumBilledData</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[CommissionBilledDataDerived]"
                              dataType="numeric"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[CommissionBilledDataDerived]"
                              name="CommissionBilledDataDerived"
                              precision="18"
                              scale="5"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NUMERIC,18,5)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionBilledData]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NUMERIC,18,5)CommissionBilledData</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PremiumAnnualizedDataDerived]"
                              dataType="numeric"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PremiumAnnualizedDataDerived]"
                              name="PremiumAnnualizedDataDerived"
                              precision="18"
                              scale="5"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NUMERIC,18,5)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[PremiumAnnualizedData]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NUMERIC,18,5)PremiumAnnualizedData</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[CommissioAnnualizedDataDerived]"
                              dataType="numeric"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[CommissioAnnualizedDataDerived]"
                              name="CommissioAnnualizedDataDerived"
                              precision="18"
                              scale="5"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">(DT_NUMERIC,18,5)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[CommissionAnnualizedData]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">(DT_NUMERIC,18,5)CommissionAnnualizedData</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[ProcedureCodeDerived]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              length="20"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[ProcedureCodeDerived]"
                              name="ProcedureCodeDerived"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">[LEN]([TRIM]((DT_STR,20,1252)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ProducerCode]})) == 0 ? (DT_STR,20,1252)NULL(DT_STR,20,1252) : (DT_STR,20,1252)#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ProducerCode]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">LEN(TRIM((DT_STR,20,1252)ProducerCodeData)) == 0 ? (DT_STR,20,1252)NULL(DT_STR,20,1252) : (DT_STR,20,1252)ProducerCodeData</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[AddressTwoDerived]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              length="100"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[AddressTwoDerived]"
                              name="AddressTwoDerived"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">[LEN]([TRIM](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address2]})) == 0 ? (DT_STR,100,1252)NULL(DT_STR,100,1252) : #{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address2]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">LEN(TRIM(Address2Data)) == 0 ? (DT_STR,100,1252)NULL(DT_STR,100,1252) : Address2Data</property>
                              </properties>
                            </outputColumn>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PolicyAgencyDataDerived]"
                              dataType="wstr"
                              errorOrTruncationOperation="Computation"
                              errorRowDisposition="IgnoreFailure"
                              length="100"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PolicyAgencyDataDerived]"
                              name="PolicyAgencyDataDerived"
                              truncationRowDisposition="IgnoreFailure">
                              <properties>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Expression"
                                  name="Expression">[LEN]([TRIM](#{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAgencyDefinedCategory]})) == 0 ? (DT_STR,100,1252)NULL(DT_STR,100,1252) : #{Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAgencyDefinedCategory]}</property>
                                <property
                                  containsID="true"
                                  dataType="System.String"
                                  description="Derived Column Friendly Expression"
                                  expressionType="Notify"
                                  name="FriendlyExpression">LEN(TRIM(PolicyAgencyDefinedCategoryData)) == 0 ? (DT_STR,100,1252)NULL(DT_STR,100,1252) : PolicyAgencyDefinedCategoryData</property>
                              </properties>
                            </outputColumn>
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Error Output]"
                          description="Error Output of the Derived Column Transformation"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="Derived Column Error Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source"
                      componentClassID="DTSAdapter.ExcelSource.3"
                      contactInfo="Excel Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
                      description="Excel Source"
                      name="Excel Source"
                      usesDispositions="true"
                      validateExternalMetadata="False"
                      version="1">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset"></property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91">SELECT        *
FROM   [Complete Detail$A2:X]</property>
                        <property
                          dataType="System.String"
                          description="The variable that contains the SQL command to be executed."
                          name="SqlCommandVariable"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">2</property>
                        <property
                          dataType="System.String"
                          description="The mapping from parameters in the SQL command to variables."
                          name="ParameterMapping"></property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[Excel Connection Manager 1]"
                          connectionManagerRefId="Package.ConnectionManagers[Excel Connection Manager 1]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <outputs>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output]"
                          name="Excel Source Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[LookupCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode]"
                              name="LookupCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountName]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[AccountName]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountName]"
                              name="AccountName"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAndLineTypes]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PolicyAndLineTypes]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAndLineTypes]"
                              name="PolicyAndLineTypes"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[EffectiveDate]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[EffectiveDate]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[EffectiveDate]"
                              name="EffectiveDate"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ExpirationDate]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ExpirationDate]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ExpirationDate]"
                              name="ExpirationDate"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LineStatusCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[LineStatusCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LineStatusCode]"
                              name="LineStatusCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ProducerCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ProducerCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ProducerCode]"
                              name="ProducerCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[IssuingCompanyCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[IssuingCompanyCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[IssuingCompanyCode]"
                              name="IssuingCompanyCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumPayableCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PremiumPayableCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumPayableCode]"
                              name="PremiumPayableCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumBilled]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PremiumBilled]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumBilled]"
                              name="PremiumBilled"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionBilled]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[CommissionBilled]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionBilled]"
                              name="CommissionBilled"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumAnnualized]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PremiumAnnualized]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PremiumAnnualized]"
                              name="PremiumAnnualized"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionAnnualized]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[CommissionAnnualized]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[CommissionAnnualized]"
                              name="CommissionAnnualized"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[TypeCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[TypeCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[TypeCode]"
                              name="TypeCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address1]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Address1]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address1]"
                              name="Address1"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address2]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Address2]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[Address2]"
                              name="Address2"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[City]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[City]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[City]"
                              name="City"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[StateCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[StateCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[StateCode]"
                              name="StateCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PostalCode]"
                              dataType="r8"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PostalCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PostalCode]"
                              name="PostalCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SICCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[SICCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[SICCode]"
                              name="SICCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAgencyDefinedCategory]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PolicyAgencyDefinedCategory]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[PolicyAgencyDefinedCategory]"
                              name="PolicyAgencyDefinedCategory"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ActiveInactiveStatus]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ActiveInactiveStatus]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[ActiveInactiveStatus]"
                              name="ActiveInactiveStatus"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountTypeCode]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[AccountTypeCode]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[AccountTypeCode]"
                              name="AccountTypeCode"
                              truncationRowDisposition="IgnoreFailure" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode1]"
                              dataType="wstr"
                              errorOrTruncationOperation="Conversion"
                              errorRowDisposition="IgnoreFailure"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[LookupCode1]"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].Columns[LookupCode1]"
                              name="LookupCode1"
                              truncationRowDisposition="IgnoreFailure" />
                          </outputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[LookupCode]"
                              dataType="wstr"
                              length="255"
                              name="LookupCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[AccountName]"
                              dataType="wstr"
                              length="255"
                              name="AccountName" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PolicyAndLineTypes]"
                              dataType="wstr"
                              length="255"
                              name="PolicyAndLineTypes" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[EffectiveDate]"
                              dataType="wstr"
                              length="255"
                              name="EffectiveDate" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ExpirationDate]"
                              dataType="wstr"
                              length="255"
                              name="ExpirationDate" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[LineStatusCode]"
                              dataType="wstr"
                              length="255"
                              name="LineStatusCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ProducerCode]"
                              dataType="wstr"
                              length="255"
                              name="ProducerCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[IssuingCompanyCode]"
                              dataType="wstr"
                              length="255"
                              name="IssuingCompanyCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PremiumPayableCode]"
                              dataType="wstr"
                              length="255"
                              name="PremiumPayableCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PremiumBilled]"
                              dataType="wstr"
                              length="255"
                              name="PremiumBilled" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[CommissionBilled]"
                              dataType="wstr"
                              length="255"
                              name="CommissionBilled" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PremiumAnnualized]"
                              dataType="wstr"
                              length="255"
                              name="PremiumAnnualized" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[CommissionAnnualized]"
                              dataType="wstr"
                              length="255"
                              name="CommissionAnnualized" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[TypeCode]"
                              dataType="wstr"
                              length="255"
                              name="TypeCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Address1]"
                              dataType="wstr"
                              length="255"
                              name="Address1" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[Address2]"
                              dataType="wstr"
                              length="255"
                              name="Address2" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[City]"
                              dataType="wstr"
                              length="255"
                              name="City" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[StateCode]"
                              dataType="wstr"
                              length="255"
                              name="StateCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PostalCode]"
                              dataType="r8"
                              name="PostalCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[SICCode]"
                              dataType="wstr"
                              length="255"
                              name="SICCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[PolicyAgencyDefinedCategory]"
                              dataType="wstr"
                              length="255"
                              name="PolicyAgencyDefinedCategory" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[ActiveInactiveStatus]"
                              dataType="wstr"
                              length="255"
                              name="ActiveInactiveStatus" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[AccountTypeCode]"
                              dataType="wstr"
                              length="255"
                              name="AccountTypeCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output].ExternalColumns[LookupCode1]"
                              dataType="wstr"
                              length="255"
                              name="LookupCode1" />
                          </externalMetadataColumns>
                        </output>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output]"
                          isErrorOut="true"
                          name="Excel Source Error Output">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[LookupCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[LookupCode]"
                              name="LookupCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[AccountName]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[AccountName]"
                              name="AccountName" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PolicyAndLineTypes]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PolicyAndLineTypes]"
                              name="PolicyAndLineTypes" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[EffectiveDate]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[EffectiveDate]"
                              name="EffectiveDate" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ExpirationDate]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ExpirationDate]"
                              name="ExpirationDate" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[LineStatusCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[LineStatusCode]"
                              name="LineStatusCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ProducerCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ProducerCode]"
                              name="ProducerCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[IssuingCompanyCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[IssuingCompanyCode]"
                              name="IssuingCompanyCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PremiumPayableCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PremiumPayableCode]"
                              name="PremiumPayableCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PremiumBilled]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PremiumBilled]"
                              name="PremiumBilled" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[CommissionBilled]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[CommissionBilled]"
                              name="CommissionBilled" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PremiumAnnualized]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PremiumAnnualized]"
                              name="PremiumAnnualized" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[CommissionAnnualized]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[CommissionAnnualized]"
                              name="CommissionAnnualized" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[TypeCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[TypeCode]"
                              name="TypeCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Address1]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Address1]"
                              name="Address1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Address2]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[Address2]"
                              name="Address2" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[City]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[City]"
                              name="City" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[StateCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[StateCode]"
                              name="StateCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PostalCode]"
                              dataType="r8"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PostalCode]"
                              name="PostalCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[SICCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[SICCode]"
                              name="SICCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PolicyAgencyDefinedCategory]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[PolicyAgencyDefinedCategory]"
                              name="PolicyAgencyDefinedCategory" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ActiveInactiveStatus]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ActiveInactiveStatus]"
                              name="ActiveInactiveStatus" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[AccountTypeCode]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[AccountTypeCode]"
                              name="AccountTypeCode" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[LookupCode1]"
                              dataType="wstr"
                              length="255"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[LookupCode1]"
                              name="LookupCode1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                    <component
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination"
                      componentClassID="DTSAdapter.OLEDBDestination.3"
                      contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
                      description="OLE DB Destination"
                      name="OLE DB Destination"
                      usesDispositions="true"
                      version="4">
                      <properties>
                        <property
                          dataType="System.Int32"
                          description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                          name="CommandTimeout">0</property>
                        <property
                          dataType="System.String"
                          description="Specifies the name of the database object used to open a rowset."
                          name="OpenRowset">[dbo].[BOBReport]</property>
                        <property
                          dataType="System.String"
                          description="Specifies the variable that contains the name of the database object used to open a rowset."
                          name="OpenRowsetVariable"></property>
                        <property
                          dataType="System.String"
                          description="The SQL command to be executed."
                          name="SqlCommand"
                          UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor, Microsoft.DataTransformationServices.Controls, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"></property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the column code page to use when code page information is unavailable from the data source."
                          name="DefaultCodePage">1252</property>
                        <property
                          dataType="System.Boolean"
                          description="Forces the use of the DefaultCodePage property value when describing character data."
                          name="AlwaysUseDefaultCodePage">false</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies the mode used to access the database."
                          name="AccessMode"
                          typeConverter="AccessMode">3</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepIdentity">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                          name="FastLoadKeepNulls">true</property>
                        <property
                          dataType="System.String"
                          description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                          name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                        <property
                          dataType="System.Int32"
                          description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                          name="FastLoadMaxInsertCommitSize">2147483647</property>
                      </properties>
                      <connections>
                        <connection
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Connections[OleDbConnection]"
                          connectionManagerID="Package.ConnectionManagers[PAI-201.HoneDB]"
                          connectionManagerRefId="Package.ConnectionManagers[PAI-201.HoneDB]"
                          description="The OLE DB runtime connection used to access the database."
                          name="OleDbConnection" />
                      </connections>
                      <inputs>
                        <input
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input]"
                          errorOrTruncationOperation="Insert"
                          errorRowDisposition="FailComponent"
                          hasSideEffects="true"
                          name="OLE DB Destination Input">
                          <inputColumns>
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of LookupCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of LookupCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LookUpCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of LookupCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of AccountName]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of AccountName"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[AccountName]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of AccountName]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of PolicyAndLineTypes]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of PolicyAndLineTypes"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PolicyAndLineTypes]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAndLineTypes]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[EffectiveDateDataDervied]"
                              cachedDataType="dbTimeStamp"
                              cachedName="EffectiveDateDataDervied"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[EffectiveDate]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[EffectiveDateDataDervied]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[ExpirationDateDataDerived]"
                              cachedDataType="dbTimeStamp"
                              cachedName="ExpirationDateDataDerived"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ExpirationDate]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[ExpirationDateDataDerived]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of LineStatusCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of LineStatusCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LineStatusCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of LineStatusCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of IssuingCompanyCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="20"
                              cachedName="Copy of IssuingCompanyCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[IssuingCompanyCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of IssuingCompanyCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of PremiumPayableCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="20"
                              cachedName="Copy of PremiumPayableCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PremiumPayableCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PremiumPayableCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[PremiumBilledDataDerived]"
                              cachedDataType="numeric"
                              cachedName="PremiumBilledDataDerived"
                              cachedPrecision="18"
                              cachedScale="5"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PremiumBilled]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PremiumBilledDataDerived]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[CommissionBilledDataDerived]"
                              cachedDataType="numeric"
                              cachedName="CommissionBilledDataDerived"
                              cachedPrecision="18"
                              cachedScale="5"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CommissionBilled]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[CommissionBilledDataDerived]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[PremiumAnnualizedDataDerived]"
                              cachedDataType="numeric"
                              cachedName="PremiumAnnualizedDataDerived"
                              cachedPrecision="18"
                              cachedScale="5"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PremiumAnnualized]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[PremiumAnnualizedDataDerived]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[CommissioAnnualizedDataDerived]"
                              cachedDataType="numeric"
                              cachedName="CommissioAnnualizedDataDerived"
                              cachedPrecision="18"
                              cachedScale="5"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CommissionAnnualized]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[CommissioAnnualizedDataDerived]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of TypeCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="1"
                              cachedName="Copy of TypeCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[TypeCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of TypeCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of Address1]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="100"
                              cachedName="Copy of Address1"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Address1]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address1]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of City]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of City"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[City]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of City]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of StateCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of StateCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[StateCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of StateCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of PostalCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="5"
                              cachedName="Copy of PostalCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PostalCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PostalCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[SICCodeDataDerived]"
                              cachedDataType="i4"
                              cachedName="SICCodeDataDerived"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[SICCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output].Columns[SICCodeDataDerived]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of ActiveInactiveStatus]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="100"
                              cachedName="Copy of ActiveInactiveStatus"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ActiveInactiveStatus]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ActiveInactiveStatus]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of AccountTypeCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="5"
                              cachedName="Copy of AccountTypeCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[AccountTypeCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of AccountTypeCode]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of Address2]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of Address2"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Address2]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of Address2]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of PolicyAgencyDefinedCategory]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="50"
                              cachedName="Copy of PolicyAgencyDefinedCategory"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PolicyAgencyDefinedCategory]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of PolicyAgencyDefinedCategory]" />
                            <inputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].Columns[Copy of ProducerCode]"
                              cachedCodepage="1252"
                              cachedDataType="str"
                              cachedLength="20"
                              cachedName="Copy of ProducerCode"
                              externalMetadataColumnId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ProcedureCode]"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output].Columns[Copy of ProducerCode]" />
                          </inputColumns>
                          <externalMetadataColumns
                            isUsed="True">
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LookUpCode]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="LookUpCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[AccountName]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="AccountName" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PolicyAndLineTypes]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="PolicyAndLineTypes" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[EffectiveDate]"
                              dataType="dbTimeStamp"
                              name="EffectiveDate" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ExpirationDate]"
                              dataType="dbTimeStamp"
                              name="ExpirationDate" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[LineStatusCode]"
                              codePage="1252"
                              dataType="str"
                              length="4"
                              name="LineStatusCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ProcedureCode]"
                              codePage="1252"
                              dataType="str"
                              length="20"
                              name="ProcedureCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[IssuingCompanyCode]"
                              codePage="1252"
                              dataType="str"
                              length="20"
                              name="IssuingCompanyCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PremiumPayableCode]"
                              codePage="1252"
                              dataType="str"
                              length="20"
                              name="PremiumPayableCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PremiumBilled]"
                              dataType="numeric"
                              name="PremiumBilled"
                              precision="18"
                              scale="5" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CommissionBilled]"
                              dataType="numeric"
                              name="CommissionBilled"
                              precision="18"
                              scale="5" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PremiumAnnualized]"
                              dataType="numeric"
                              name="PremiumAnnualized"
                              precision="18"
                              scale="5" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[CommissionAnnualized]"
                              dataType="numeric"
                              name="CommissionAnnualized"
                              precision="18"
                              scale="5" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[TypeCode]"
                              codePage="1252"
                              dataType="str"
                              length="1"
                              name="TypeCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Address1]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="Address1" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[Address2]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="Address2" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[City]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="City" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[StateCode]"
                              codePage="1252"
                              dataType="str"
                              length="50"
                              name="StateCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PostalCode]"
                              codePage="1252"
                              dataType="str"
                              length="5"
                              name="PostalCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[SICCode]"
                              dataType="i4"
                              name="SICCode" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[PolicyAgencyDefinedCategory]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="PolicyAgencyDefinedCategory" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[ActiveInactiveStatus]"
                              codePage="1252"
                              dataType="str"
                              length="100"
                              name="ActiveInactiveStatus" />
                            <externalMetadataColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input].ExternalColumns[AccountTypeCode]"
                              codePage="1252"
                              dataType="str"
                              length="5"
                              name="AccountTypeCode" />
                          </externalMetadataColumns>
                        </input>
                      </inputs>
                      <outputs>
                        <output
                          refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output]"
                          exclusionGroup="1"
                          isErrorOut="true"
                          name="OLE DB Destination Error Output"
                          synchronousInputId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input]">
                          <outputColumns>
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                              name="ErrorCode"
                              specialFlags="1" />
                            <outputColumn
                              refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              dataType="i4"
                              lineageId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                              name="ErrorColumn"
                              specialFlags="2" />
                          </outputColumns>
                          <externalMetadataColumns />
                        </output>
                      </outputs>
                    </component>
                  </components>
                  <paths>
                    <path
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Conditional Split Default Output]"
                      endId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Inputs[Data Conversion Input]"
                      name="Conditional Split Default Output"
                      startId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Outputs[Conditional Split Default Output]" />
                    <path
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Data Conversion Output]"
                      endId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Inputs[Derived Column Input]"
                      name="Data Conversion Output"
                      startId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion.Outputs[Data Conversion Output]" />
                    <path
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Derived Column Output]"
                      endId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination.Inputs[OLE DB Destination Input]"
                      name="Derived Column Output"
                      startId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column.Outputs[Derived Column Output]" />
                    <path
                      refId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Excel Source Output]"
                      endId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split.Inputs[Conditional Split Input]"
                      name="Excel Source Output"
                      startId="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source.Outputs[Excel Source Output]" />
                  </paths>
                </pipeline>
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\For Loop Container\Iterate Through all the Files\Drop BOBReportTable Create BOBReportTable"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Execute SQL Task"
              DTS:DTSID="{d72dbf80-0608-488b-a568-f361b44b69ab}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ExecuteSQLTask.ExecuteSQLTask, Microsoft.SqlServer.SQLTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Drop BOBReportTable Create BOBReportTable"
              DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2016 RC3; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <SQLTask:SqlTaskData
                  SQLTask:Connection="{E87E4E76-6B9B-4E08-8390-BAD0DCAFF7E1}"
                  SQLTask:SqlStatementSource="DROP TABLE [dbo].[BOBReport]&#xA;CREATE TABLE [dbo].[BOBReport](&#xA; [LookUpCode] [varchar](50) NULL,&#xA; [AccountName] [varchar](50) NULL,&#xA; [PolicyAndLineTypes] [varchar](50) NULL,&#xA; [EffectiveDate] [datetime] NULL,&#xA; [ExpirationDate] [datetime] NULL,&#xA; [LineStatusCode] [varchar](4) NULL,&#xA; [ProcedureCode] [varchar](20) NULL,&#xA; [IssuingCompanyCode] [varchar](20) NULL,&#xA; [PremiumPayableCode] [varchar](20) NULL,&#xA; [PremiumBilled] [decimal](18, 5) NULL,&#xA; [CommissionBilled] [decimal](18, 5) NULL,&#xA; [PremiumAnnualized] [decimal](18, 5) NULL,&#xA; [CommissionAnnualized] [decimal](18, 5) NULL,&#xA; [TypeCode] [varchar](1) NULL,&#xA; [Address1] [varchar](100) NULL,&#xA; [Address2] [varchar](100) NULL,&#xA; [City] [varchar](100) NULL,&#xA; [StateCode] [varchar](50) NULL,&#xA; [PostalCode] [varchar](5) NULL,&#xA; [SICCode] [int] NULL,&#xA; [PolicyAgencyDefinedCategory] [varchar](100) NULL,&#xA; [ActiveInactiveStatus] [varchar](100) NULL,&#xA; [AccountTypeCode] [varchar](5) NULL&#xA;) ON [PRIMARY]" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\For Loop Container\Iterate Through all the Files\Move Data File To Processing Directory"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="File System Task"
              DTS:DTSID="{6086c34b-51a6-45f1-8098-5cdca5ce14a1}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Move Data File To Processing Directory"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2016 RC3; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="MoveFile"
                  TaskOverwriteDestFile="True"
                  TaskSourcePath="User::DropFile"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::ProcessingPath"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\For Loop Container\Iterate Through all the Files\Move Processed File To Archive Directory"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="File System Task"
              DTS:DTSID="{18d83048-1307-4037-b57a-0521f422854e}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.FileSystemTask.FileSystemTask, Microsoft.SqlServer.FileSystemTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Move Processed File To Archive Directory"
              DTS:TaskContact="File System Task;Microsoft Corporation; SQL Server 2016 RC3; © 2015 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <FileSystemData
                  TaskOperationType="MoveFile"
                  TaskOverwriteDestFile="True"
                  TaskSourcePath="User::ProcessingFile"
                  TaskIsSourceVariable="True"
                  TaskDestinationPath="User::ArchivePath"
                  TaskIsDestinationVariable="True" />
              </DTS:ObjectData>
            </DTS:Executable>
            <DTS:Executable
              DTS:refId="Package\For Loop Container\Iterate Through all the Files\Watch for new File"
              DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:Description="Script Task"
              DTS:DTSID="{83a3ed0b-3805-4b35-8312-48d06d59889b}"
              DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
              DTS:LocaleID="-1"
              DTS:ObjectName="Watch for new File"
              DTS:ThreadHint="0">
              <DTS:Variables />
              <DTS:ObjectData>
                <ScriptProject
                  Name="ST_4e0a09d9d1e647e3929a387dea8bacda"
                  VSTAMajorVersion="3"
                  VSTAMinorVersion="0"
                  Language="CSharp"
                  ReadOnlyVariables="User::DropPath,User::FileMask"
                  ReadWriteVariables="User::FileName">
                  <ProjectItem
                    Name="Properties\Settings.settings"
                    Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.resx"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
                  <ProjectItem
                    Name="ST_4e0a09d9d1e647e3929a387dea8bacda.csproj"
                    Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{C01BBDDD-B4F0-414B-8ED4-B904110F4930}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_d45fe9c092e24e5281d75aa65ed50818</RootNamespace>
    <AssemblyName>ST_4e0a09d9d1e647e3929a387dea8bacda</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
                  <ProjectItem
                    Name="ScriptMain.cs"
                    Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
#endregion

namespace ST_d45fe9c092e24e5281d75aa65ed50818
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            int fileCount = 0;
            string[] FilesToProcess;
            while (fileCount == 0)
            {
                try
                {
                    
                    System.Threading.Thread.Sleep(10000);
                    FilesToProcess = System.IO.Directory.GetFiles(Dts.Variables["DropPath"].Value.ToString(), "*.xlsx");
                    fileCount = FilesToProcess.Length;

                    if (fileCount != 0)
                    {
                        string dropPath = Dts.Variables["DropPath"].Value.ToString();
                        string fileMask = Dts.Variables["FileMask"].Value.ToString();
                        foreach (string dataFile in Directory.GetFiles(dropPath, fileMask))
                        {

                            // Attempt to gain access to the file.
                            using (Stream stream = new FileStream(dataFile, FileMode.Open))
                            {
                            }

                            // Store the file name for use later in the package.
                            Dts.Variables["FileName"].Value = Path.GetFileName(dataFile);
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw ex;
                }
            }

            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
                  <ProjectItem
                    Name="Project"
                    Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_4e0a09d9d1e647e3929a387dea8bacda</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_4e0a09d9d1e647e3929a387dea8bacda</msb:DisplayName>
		<msb:ProjectId>{6CD09FFD-0A1A-406C-8C85-8AFA3FC60D7B}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_4e0a09d9d1e647e3929a387dea8bacda.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Settings.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d45fe9c092e24e5281d75aa65ed50818.Properties.Settings.get_Default():ST_d45fe9c092e24e5281d75aa65ed50818.Properties.Sett" +
    "ings")]

namespace ST_d45fe9c092e24e5281d75aa65ed50818.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\AssemblyInfo.cs"
                    Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_d45fe9c092e24e5281d75aa65ed50818")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_d45fe9c092e24e5281d75aa65ed50818")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
                  <ProjectItem
                    Name="Properties\Resources.Designer.cs"
                    Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d45fe9c092e24e5281d75aa65ed50818.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d45fe9c092e24e5281d75aa65ed50818.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_d45fe9c092e24e5281d75aa65ed50818.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_d45fe9c092e24e5281d75aa65ed50818.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_d45fe9c092e24e5281d75aa65ed50818.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
                  <BinaryItem
                    Name="ST_4e0a09d9d1e647e3929a387dea8bacda.dll">TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDABUfz1cAAAAAAAAAAOAAIiALATAAABAAAAAIAAAAAAAAri8A
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAEAAAAAAAAAACAAAAAAgAAAAAAAAMAQIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAFwvAABPAAAAAEAAAHgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAtA8AAAAgAAAAEAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAHgEAAAAQAAAAAYAAAASAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAGAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAACQ
LwAAAAAAAEgAAAACAAUAzCEAANgMAAABAAAAAAAAAKQuAAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswAwDsAAAAAQAAERYKONIAAAAAIBAnAAAoEAAACgIoEQAA
Cm8SAAAKcgEAAHBvEwAACm8UAAAKbxUAAApyEwAAcCgWAAAKjmkKBjmSAAAAAigRAAAKbxIAAApy
AQAAcG8TAAAKbxQAAApvFQAACgIoEQAACm8SAAAKciEAAHBvEwAACm8UAAAKbxUAAAoLBygWAAAK
DBYNK0IICZoTBBEEGXMXAAAKEwXeDBEFLAcRBW8YAAAK3AIoEQAACm8SAAAKcjMAAHBvEwAAChEE
KBkAAApvGgAACgkXWA0JCI5pMrjeAXoGOSj///8CKBEAAAoWbxsAAAoqARwAAAIAnQACnwAMAAAA
AAAACADQ2AABEAAAAR4CKBwAAAoqHgIoHQAACiqufgEAAAQtHnJFAABw0AMAAAIoHgAACm8fAAAK
cyAAAAqAAQAABH4BAAAEKhp+AgAABCoeAoACAAAEKhp+AwAABCoeAighAAAKKi5zCAAABoADAAAE
KgAAQlNKQgEAAQAAAAAADAAAAHY0LjAuMzAzMTkAAAAABQBsAAAAEAQAACN+AAB8BAAACAYAACNT
dHJpbmdzAAAAAIQKAAC4AAAAI1VTADwLAAAQAAAAI0dVSUQAAABMCwAAjAEAACNCbG9iAAAAAAAA
AAIAAAFXHaIBCQMAAAD6ATMAFgAAAQAAACUAAAAFAAAABgAAAAkAAAABAAAAIQAAAAIAAAAQAAAA
AQAAAAIAAAADAAAABAAAAAEAAAAEAAAAAQAAAAEAAAAAAPMDAQAAAAAABgCDAt4EBgASA94EBgDP
AcsEDwBSBQAABgD8AXwEBgBmAnwEBgBHAnwEBgD5AnwEBgCjAnwEBgC8AnwEBgATAnwEBgAuAlsD
CgDXAqIDCgBGAaIDBgAfBC4ABgCOBC8EBgA2BC8EBgCyAcsEBgDOBS8EBgCuBP4EBgCYBGcEDgCC
Ad0DDgDjAd0DDgBiAVIEBgCXAd4EBgCMAEoDCgDLA6IDEgCUBfEAEgCsAPEABgD9BS4ABgAbBC4A
BgCjAC4ABgC1AC8EBgB+Ay4ABgARAS8EBgDBAC8EBgD0BXwEAAAAACUAAAAAAAEAAQABABAARwQB
ADkAAQABAAAAEAAFBWEFTQABAAMAAAEQAKcFYQVhAAMABwADAQAAwAUAAEUABAAKABEAOwSPABEA
NgGTABEAkwCXAAYGVwCbAFaAsAWeAFaAFgGeAFAgAAAAAIYATQQGAAEAZCEAAAAAhhi+BAYAAQBs
IQAAAACDGL4EBgABAHQhAAAAAJMIqgSiAAEAoCEAAAAAkwgeAacAAQCnIQAAAACTCCoBrAABAK8h
AAAAAJYI1QWyAAIAtiEAAAAAhhi+BAYAAgC+IQAAAACRGMQEtwACAAAAAQBEAwkAvgQBABEAvgQG
ABkAvgQKACkAvgQQADEAvgQQADkAvgQQAEEAvgQQAEkAvgQQAFEAvgQQAFkAvgQQAGEAvgQQAGkA
vgQGAJEAvgQGALkAvgQVAMkAvgQGANEApAQmAHEAuAUrANkAkAUwAOEAJgQ1AOkAMAM7AJkAdQM/
APEAngVDAPkAvgRKAAkBegEGABEB5QBSAOkAOgNXANkA4QUBAHEAvgQGAJkAvgQGABkB0wBcABkB
8AVlAKEAvgRrAMEAvgQGAAgAFACFAAgAGACKACkAcwDyAC4ACwDKAC4AEwDTAC4AGwDyAC4AIwD7
AC4AKwAkAS4AMwAkAS4AOwAkAS4AQwD7AC4ASwAqAS4AUwAkAS4AWwBBAUMAYwCKAEkAcwDyAGEA
ewCKAGMAawCKABsAAwABAAQAAwAAAK4EuwAAAD4BwAAAANkFxQACAAQAAwACAAUABQABAAYABQAC
AAcABwAEgAAAAQAAAM0X4mgAAAAAAABfAAAABAAAAAAAAAAAAAAAcwCDAAAAAAALAAAAAAAAAAAA
AAB8AIMDAAAAAAQAAAAAAAAAAAAAAHMALwQAAAAACwAAAAAAAAAAAAAAfAA4AAAAAAAAAAAAAQAA
AA8FAAAFAAIAAAAAU1RfZDQ1ZmU5YzA5MmUyNGU1MjgxZDc1YWE2NWVkNTA4MTgAPE1vZHVsZT4A
U3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2YWx1ZV9fAFNUXzRlMGEw
OWQ5ZDFlNjQ3ZTM5MjlhMzg3ZGVhOGJhY2RhAG1zY29ybGliAFRocmVhZABkZWZhdWx0SW5zdGFu
Y2UARmlsZU1vZGUAVmFyaWFibGUASURpc3Bvc2FibGUAUnVudGltZVR5cGVIYW5kbGUAR2V0VHlw
ZUZyb21IYW5kbGUAR2V0RmlsZU5hbWUATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuUnVudGltZQBU
eXBlAEZhaWx1cmUAZ2V0X0N1bHR1cmUAc2V0X0N1bHR1cmUAcmVzb3VyY2VDdWx0dXJlAFZTVEFS
VFNjcmlwdE9iamVjdE1vZGVsQmFzZQBBcHBsaWNhdGlvblNldHRpbmdzQmFzZQBEaXNwb3NlAEVk
aXRvckJyb3dzYWJsZVN0YXRlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmlidXRlAERlYnVnZ2VyTm9u
VXNlckNvZGVBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBFZGl0b3JCcm93c2FibGVBdHRy
aWJ1dGUAQXNzZW1ibHlUaXRsZUF0dHJpYnV0ZQBBc3NlbWJseVRyYWRlbWFya0F0dHJpYnV0ZQBU
YXJnZXRGcmFtZXdvcmtBdHRyaWJ1dGUAQXNzZW1ibHlDb25maWd1cmF0aW9uQXR0cmlidXRlAEFz
c2VtYmx5RGVzY3JpcHRpb25BdHRyaWJ1dGUAQ29tcGlsYXRpb25SZWxheGF0aW9uc0F0dHJpYnV0
ZQBBc3NlbWJseVByb2R1Y3RBdHRyaWJ1dGUAQXNzZW1ibHlDb3B5cmlnaHRBdHRyaWJ1dGUAU1NJ
U1NjcmlwdFRhc2tFbnRyeVBvaW50QXR0cmlidXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBS
dW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0ZQBnZXRfVmFsdWUAc2V0X1ZhbHVlAHZhbHVlAFN5
c3RlbS5UaHJlYWRpbmcAU3lzdGVtLlJ1bnRpbWUuVmVyc2lvbmluZwBUb1N0cmluZwBQYXRoAE1p
Y3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNr
cy5TY3JpcHRUYXNrAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTVF80
ZTBhMDlkOWQxZTY0N2UzOTI5YTM4N2RlYThiYWNkYS5kbGwARmlsZVN0cmVhbQBnZXRfSXRlbQBT
eXN0ZW0ARW51bQByZXNvdXJjZU1hbgBTY3JpcHRNYWluAFN5c3RlbS5Db25maWd1cmF0aW9uAFN5
c3RlbS5HbG9iYWxpemF0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAEV4Y2VwdGlvbgBDdWx0dXJlSW5m
bwBTbGVlcABnZXRfUmVzb3VyY2VNYW5hZ2VyAC5jdG9yAC5jY3RvcgBTeXN0ZW0uRGlhZ25vc3Rp
Y3MAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBTeXN0ZW0uUmVzb3VyY2VzAFNUX2Q0
NWZlOWMwOTJlMjRlNTI4MWQ3NWFhNjVlZDUwODE4LlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291
cmNlcwBEZWJ1Z2dpbmdNb2RlcwBTVF9kNDVmZTljMDkyZTI0ZTUyODFkNzVhYTY1ZWQ1MDgxOC5Q
cm9wZXJ0aWVzAGdldF9WYXJpYWJsZXMAR2V0RmlsZXMAU2V0dGluZ3MAU3VjY2VzcwBnZXRfRHRz
AFNjcmlwdFJlc3VsdHMAT2JqZWN0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AGdldF9Bc3Nl
bWJseQBEaXJlY3RvcnkAAAARRAByAG8AcABQAGEAdABoAAANKgAuAHgAbABzAHgAABFGAGkAbABl
AE0AYQBzAGsAABFGAGkAbABlAE4AYQBtAGUAAHFTAFQAXwBkADQANQBmAGUAOQBjADAAOQAyAGUA
MgA0AGUANQAyADgAMQBkADcANQBhAGEANgA1AGUAZAA1ADAAOAAxADgALgBQAHIAbwBwAGUAcgB0
AGkAZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAADZuSZ8KplLS48/XCdsKNJkAAQgAQEIAyAAAQUg
AQEREQQgAQEOBSABARFZCgcGCA4dDggOEj0EAAEBCAQgABJtBCAAEnEFIAESdRwDIAAcAyAADgYA
Ah0ODg4HIAIBDhGAgQQAAQ4OBCABARwIAAESgI0RgJEFIAASgJUHIAIBDhKAlQi3elxWGTTgiQiJ
hF3NgIDMkQQAAAAABAEAAAADBhJRAwYSVQMGEhACBggDBhEUBAAAElEEAAASVQUAAQESVQQAABIQ
AwAAAQQIABJRBAgAElUECAASEAgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlvblRocm93
cwEIAQACAAAAAAAoAQAjU1RfZDQ1ZmU5YzA5MmUyNGU1MjgxZDc1YWE2NWVkNTA4MTgAAAUBAAAA
ABYBABFDb3B5cmlnaHQgQCAgMjAxNgAARwEAGi5ORVRGcmFtZXdvcmssVmVyc2lvbj12NC4wAQBU
DhRGcmFtZXdvcmtEaXNwbGF5TmFtZRAuTkVUIEZyYW1ld29yayA0AAAAtAAAAM7K774BAAAAkQAA
AGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lz
dGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAIQv
AAAAAAAAAAAAAJ4vAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAACQLwAAAAAAAAAAAAAAAF9Db3JE
bGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAABABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAA
AABIAAAAWEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBP
AAAAAAC9BO/+AAABAAAAAQDiaM0XAAABAOJozRc/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAA
RAAAAAEAVgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBv
AG4AAAAAAAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAA
MAAwADAANABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABh
AG4AeQBOAGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4A
AAAAAFMAVABfAGQANAA1AGYAZQA5AGMAMAA5ADIAZQAyADQAZQA1ADIAOAAxAGQANwA1AGEAYQA2
ADUAZQBkADUAMAA4ADEAOAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAA
LgA2ADAAOQAzAC4AMgA2ADgANQAwAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAA
AFMAVABfADQAZQAwAGEAMAA5AGQAOQBkADEAZQA2ADQANwBlADMAOQAyADkAYQAzADgANwBkAGUA
YQA4AGIAYQBjAGQAYQAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0
AAAAQwBvAHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMQA2AAAAKgABAAEATABlAGcAYQBsAFQA
cgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBu
AGEAbQBlAAAAUwBUAF8ANABlADAAYQAwADkAZAA5AGQAMQBlADYANAA3AGUAMwA5ADIAOQBhADMA
OAA3AGQAZQBhADgAYgBhAGMAZABhAC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBt
AGUAAAAAAFMAVABfAGQANAA1AGYAZQA5AGMAMAA5ADIAZQAyADQAZQA1ADIAOAAxAGQANwA1AGEA
YQA2ADUAZQBkADUAMAA4ADEAOAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAA
ADEALgAwAC4ANgAwADkAMwAuADIANgA4ADUAMAAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAA
VgBlAHIAcwBpAG8AbgAAADEALgAwAC4ANgAwADkAMwAuADIANgA4ADUAMAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAwAAACwPwAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
                </ScriptProject>
              </DTS:ObjectData>
            </DTS:Executable>
          </DTS:Executables>
          <DTS:PrecedenceConstraints>
            <DTS:PrecedenceConstraint
              DTS:refId="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint]"
              DTS:CreationName=""
              DTS:DTSID="{199d0bee-e264-482f-aed0-1e4e29410947}"
              DTS:From="Package\For Loop Container\Iterate Through all the Files\Drop BOBReportTable Create BOBReportTable"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint"
              DTS:To="Package\For Loop Container\Iterate Through all the Files\Data Flow Task" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint 1]"
              DTS:CreationName=""
              DTS:DTSID="{641630D6-2ACA-437D-872D-7F602ADA4197}"
              DTS:From="Package\For Loop Container\Iterate Through all the Files\Watch for new File"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 1"
              DTS:To="Package\For Loop Container\Iterate Through all the Files\Move Data File To Processing Directory" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint 2]"
              DTS:CreationName=""
              DTS:DTSID="{f442393a-c06f-4263-9ae2-cf6ac4f37b8b}"
              DTS:From="Package\For Loop Container\Iterate Through all the Files\Move Data File To Processing Directory"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 2"
              DTS:To="Package\For Loop Container\Iterate Through all the Files\Drop BOBReportTable Create BOBReportTable" />
            <DTS:PrecedenceConstraint
              DTS:refId="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint 3]"
              DTS:CreationName=""
              DTS:DTSID="{55bf09f2-e136-420a-a5e7-ff95cdd5e26e}"
              DTS:From="Package\For Loop Container\Iterate Through all the Files\Data Flow Task"
              DTS:LogicalAnd="True"
              DTS:ObjectName="Constraint 3"
              DTS:To="Package\For Loop Container\Iterate Through all the Files\Move Processed File To Archive Directory" />
          </DTS:PrecedenceConstraints>
          <DTS:ForEachVariableMappings>
            <DTS:ForEachVariableMapping
              DTS:CreationName=""
              DTS:DTSID="{90C81547-DDBB-4F47-AE1C-BE0F2653AE59}"
              DTS:ObjectName="{90C81547-DDBB-4F47-AE1C-BE0F2653AE59}"
              DTS:ValueIndex="0"
              DTS:VariableName="User::DropFile" />
          </DTS:ForEachVariableMappings>
        </DTS:Executable>
        <DTS:Executable
          DTS:refId="Package\For Loop Container\read Emails"
          DTS:CreationName="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:Description="Script Task"
          DTS:DTSID="{138501f5-9b3e-4799-a2e4-434341cf28b0}"
          DTS:ExecutableType="Microsoft.SqlServer.Dts.Tasks.ScriptTask.ScriptTask, Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91"
          DTS:LocaleID="-1"
          DTS:ObjectName="read Emails"
          DTS:ThreadHint="0">
          <DTS:Variables />
          <DTS:ObjectData>
            <ScriptProject
              Name="ST_7a9272c61d084c2d888d95fe8431aa20"
              VSTAMajorVersion="3"
              VSTAMinorVersion="0"
              Language="CSharp"
              ReadWriteVariables="User::Path">
              <ProjectItem
                Name="Properties\AssemblyInfo.cs"
                Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_4c0aca6d1a0244e08f52e44ac66583bc")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_4c0aca6d1a0244e08f52e44ac66583bc")]
[assembly: AssemblyCopyright("Copyright @  2016")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.resx"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
              <ProjectItem
                Name="OutlookMessageWrapper.cs"
                Encoding="UTF8"><![CDATA[
using System;
using Microsoft.Office.Interop.Outlook;
 
 
namespace ST_4c0aca6d1a0244e08f52e44ac66583bc
{
    /// <summary>
    /// Base class for outlook message item
    /// </summary>
    public abstract class OutlookMessageWrapper : IDisposable
    {
        /// <summary>
        /// Flag variable which tracks whether Dispose has been called.
        /// </summary>
        bool isDisposed = false;

        #region Following MUST be implemented into the drive class
        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the subject for the Outlook
        ///     item. Read/write.
        ///</summary>
        public abstract string Subject { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the unique Entry ID of the object.
        ///     Read-only.
        ///</summary>
        public abstract string EntryID { get; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the message class for
        ///     the Outlook item. Read/write.
        ///</summary>
        public abstract string MessageClass { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) indicating the major and minor version number
        ///     of the Outlook application for an Outlook item. Read-only.
        ///</summary>
        public abstract string OutlookVersion { get; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the clear-text body
        ///     of the Outlook item. Read/write.
        ///</summary>
        public abstract string Body { get; set; }

        /// <summary>
        ///     Returns an Integer (int in C#) value indicating the size (in bytes) of the
        ///     Outlook item. Read-only.
        ///</summary>
        public abstract int Size { get; }

        /// <summary>
        ///     Returns a DateTime indicating the creation time for the Outlook item. Read-only.
        ///</summary>
        public abstract DateTime CreationTime { get; }

        /// <summary>
        ///     Returns a DateTime specifying the date and time that the Outlook item was
        ///     last modified. Read-only.
        ///</summary>
        public abstract DateTime LastModificationTime { get; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Application object that represents
        ///     the parent Outlook application for the object. Read-only.
        ///</summary>
        public abstract Application Application { get; }

        #endregion

        #region Outlook mail item events

        /// <summary>
        ///     Occurs after Microsoft Outlook has saved the item.
        /// </summary>
        public virtual event ItemEvents_10_AfterWriteEventHandler AfterWrite = delegate { };

        /// <summary>
        ///     Occurs when an attachment has been added to an instance of the parent object.
        ///     </summary>
        public virtual event ItemEvents_10_AttachmentAddEventHandler AttachmentAdd = delegate { };

        /// <summary>
        ///     Occurs when an attachment in an instance of the parent object has been opened
        ///     for reading.
        /// </summary>
        public virtual event ItemEvents_10_AttachmentReadEventHandler AttachmentRead = delegate { };

        /// <summary>
        ///     Occurs when an attachment has been removed from an instance of the parent
        ///     object.
        /// </summary>
        public virtual event ItemEvents_10_AttachmentRemoveEventHandler AttachmentRemove = delegate { };

        /// <summary>
        ///     Occurs before an attachment is added to an instance of the parent object.
        ///     </summary>
        public virtual event ItemEvents_10_BeforeAttachmentAddEventHandler BeforeAttachmentAdd = delegate { };

        /// <summary>
        ///     Occurs before an attachment associated with an instance of the parent object
        ///     is previewed.
        ///     </summary>
        public virtual event ItemEvents_10_BeforeAttachmentPreviewEventHandler BeforeAttachmentPreview = delegate { };

        /// <summary>
        ///     Occurs before an attachment associated with an instance of the parent object
        ///     is read from the file system, an attachment stream, or an Microsoft.Office.Interop.Outlook.Attachment
        ///     object.
        ///     </summary>
        public virtual event ItemEvents_10_BeforeAttachmentReadEventHandler BeforeAttachmentRead = delegate { };

        /// <summary>
        ///     Occurs just before an attachment is saved.
        ///     </summary>       
        public virtual event ItemEvents_10_BeforeAttachmentSaveEventHandler BeforeAttachmentSave = delegate { };

        /// <summary>
        ///     Occurs before an attachment associated with an instance of the parent object
        ///     is written to a temporary file.
        ///  </summary>
        public virtual event ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler BeforeAttachmentWriteToTempFile = delegate { };

        /// <summary>
        ///     Occurs before the item is automatically saved by Outlook.
        /// </summary>
        public virtual event ItemEvents_10_BeforeAutoSaveEventHandler BeforeAutoSave = delegate { };

        /// <summary>
        ///     Occurs just before Microsoft Outlook starts resolving names in the recipient
        ///     collection for an item (which is an instance of the parent object).
        ///     </summary>
        public virtual event ItemEvents_10_BeforeCheckNamesEventHandler BeforeCheckNames = delegate { };

        /// <summary>
        ///     Occurs before an item (which is an instance of the parent object) is deleted.
        ///     </summary>
        public virtual event ItemEvents_10_BeforeDeleteEventHandler BeforeDelete = delegate { };

        /// <summary>
        ///     Occurs before Microsoft Outlook begins to read the properties for the item.
        ///     </summary>
        public virtual event ItemEvents_10_BeforeReadEventHandler BeforeRead = delegate { };

        /// <summary>
        ///     Occurs when the inspector associated with an item (which is an instance of
        ///     the parent object) is being closed.
        ///     </summary>
        public virtual event ItemEvents_10_CloseEventHandler CloseItem = delegate { };

        /// <summary>
        ///     Occurs when a custom action of an item (which is an instance of the parent
        ///     object) executes.
        ///     </summary>
        public virtual event ItemEvents_10_CustomActionEventHandler CustomAction = delegate { };

        /// <summary>
        ///     Occurs when a custom property of an item (which is an instance of the parent
        ///     object) is changed.
        ///     </summary>
        public virtual event ItemEvents_10_CustomPropertyChangeEventHandler CustomPropertyChange = delegate { };

        /// <summary>
        ///     Occurs when the user selects the Forward action for an item (which is an
        ///     instance of the parent object).
        ///     </summary>
        public virtual event ItemEvents_10_ForwardEventHandler ForwardItem = delegate { };

        /// <summary>
        ///     Occurs when an instance of the parent object is being opened in an Microsoft.Office.Interop.Outlook.Inspector.
        ///     </summary>
        public virtual event ItemEvents_10_OpenEventHandler Open = delegate { };

        /// <summary>
        ///     Occurs when an explicit built-in property of an instance of the parent object
        ///     is changed.
        ///     </summary>
        public virtual event ItemEvents_10_PropertyChangeEventHandler PropertyChange = delegate { };

        /// <summary>
        ///     Occurs when an instance of the parent object is opened for editing by the
        ///     user.
        ///     </summary>
        public virtual event ItemEvents_10_ReadEventHandler Read = delegate { };

        /// <summary>
        ///     Occurs when the user selects the Reply action for an item (which is an instance
        ///     of the parent object).
        public virtual event ItemEvents_10_ReplyEventHandler ReplyItem = delegate { };

        /// <summary>
        ///     Occurs when the user selects the ReplyAll action for an item (which is an
        ///     instance of the parent object).
        ///     </summary>
        public virtual event ItemEvents_10_ReplyAllEventHandler ReplyAllItem = delegate { };

        /// <summary>
        ///     Occurs when the user selects the Send action for an item (which is an instance
        ///     of the parent object).
        ///     </summary>
        public virtual event ItemEvents_10_SendEventHandler SendItem = delegate { };

        /// <summary>
        ///     Occurs before an Outlook item is unloaded from memory, either programmatically
        ///     or by user action.
        ///     </summary>
        public virtual event ItemEvents_10_UnloadEventHandler Unload = delegate { };

        /// <summary>
        ///     Occurs when an instance of the parent object is saved, either explicitly
        ///     or implicitly (for example, in response to a prompt when closing the item's
        ///     inspector).
        ///     </summary>
        public virtual event ItemEvents_10_WriteEventHandler Write = delegate { };

        #endregion

        #region Following can be overridden in the drive class

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Actions collection that represents
        ///     all the available actions for the item. Read-only.
        ///</summary>
        public virtual Actions Actions { get; private set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that is True if the mail message can be forwarded.
        ///     Read/write.
        ///</summary>
        public virtual bool AlternateRecipientAllowed { get; set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Attachments object that represents
        ///     all the attachments for the specified item. Read-only.
        ///</summary>
        public virtual Attachments Attachments { get; private set; }

        /// <summary>
        ///     A Boolean (bool in C#) value that returns True if the item was automatically
        ///     forwarded. Read/write.
        ///</summary>
        public virtual bool AutoForwarded { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that determines if the item is a winner of
        ///     an automatic conflict resolution. Read-only.
        ///</summary>
        public virtual bool AutoResolvedWinner { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display list of blind carbon
        ///     copy (BCC) names for a Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public virtual string BCC { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the billing information
        ///     associated with the Outlook item. Read/write.
        ///</summary>
        public virtual string BillingInformation { get; set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlBodyFormat constant
        ///     indicating the format of the body text. Read/write.
        ///</summary>
        public virtual OlBodyFormat BodyFormat { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the categories assigned
        ///     to the Outlook item. Read/write.
        ///</summary>
        public virtual string Categories { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display list of carbon copy
        ///     (CC) names for a Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public virtual string CC { get; set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.OlObjectClass constant indicating
        ///     the object's class. Read-only.
        ///</summary>
        public virtual OlObjectClass Class { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the names of the companies
        ///     associated with the Outlook item. Read/write.
        ///</summary>
        public virtual string Companies { get; set; }

        /// <summary>
        ///     Return the Microsoft.Office.Interop.Outlook.Conflicts object that represents
        ///     the items that are in conflict for any Outlook item object. Read-only.
        ///</summary>
        public virtual Conflicts Conflicts { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) that uniquely identifies a Microsoft.Office.Interop.Outlook.Conversation
        ///     object that the Microsoft.Office.Interop.Outlook.MailItem object belongs
        ///     to. Read-only.
        ///</summary>
        public virtual string ConversationID { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the index of the conversation
        ///     thread of the Outlook item. Read-only.
        ///</summary>
        public virtual string ConversationIndex { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the topic of the conversation
        ///     thread of the Outlook item. Read-only.
        ///</summary>
        public virtual string ConversationTopic { get; private set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the date and time the mail message
        ///     is to be delivered. Read/write.
        ///</summary>
        public virtual DateTime DeferredDeliveryTime { get; set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if a copy of the
        ///     mail message is not saved upon being sent, and False if a copy is saved.
        ///     Read/write.
        ///</summary>
        public virtual bool DeleteAfterSubmit { get; set; }

        /// <summary>
        ///     Returns a constant that belongs to the Microsoft.Office.Interop.Outlook.OlDownloadState
        ///     enumeration indicating the download state of the item. Read-only.
        ///</summary>
        public virtual OlDownloadState DownloadState { get; private set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual bool EnableSharedAttachments { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the date and time at which the item
        ///     becomes invalid and can be deleted. Read/write.
        ///</summary>
        public virtual DateTime ExpiryTime { get; set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual DateTime FlagDueBy { get; set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual OlFlagIcon FlagIcon { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) that indicates the requested action
        ///     for a mail item. Read/write.
        ///</summary>
        public virtual string FlagRequest { get; set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual OlFlagStatus FlagStatus { get; set; }

        /// <summary>
        ///     Returns the Microsoft.Office.Interop.Outlook.FormDescription object that
        ///     represents the form description for the specified Outlook item. Read-only.
        ///</summary>
        public virtual FormDescription FormDescription { get; private set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Inspector object that represents
        ///     an inspector initialized to contain the specified item. Read-only.
        ///</summary>
        public virtual Inspector GetInspector { get; private set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual bool HasCoverSheet { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the HTML body of the
        ///     specified item. Read/write.
        ///</summary>
        public virtual string HTMLBody { get; set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlImportance constant
        ///     indicating the relative importance level for the Outlook item. Read/write.
        ///</summary>
        public virtual OlImportance Importance { get; set; }

        /// <summary>
        ///     Returns or sets an Integer (int in C#) value that determines the Internet
        ///     code page used by the item. Read/write.
        ///</summary>
        public virtual int InternetCodepage { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that determines if the item is in conflict.
        ///     Read-only.
        ///</summary>
        public virtual bool IsConflict { get; private set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual bool IsIPFax { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that indicates whether the Microsoft.Office.Interop.Outlook.MailItem
        ///     is marked as a task. Read-only.
        ///</summary>
        public virtual bool IsMarkedAsTask { get; private set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.ItemProperties collection that
        ///     represents all standard and user-defined properties associated with the Outlook
        ///     item. Read-only.
        ///</summary>
        public virtual ItemProperties ItemProperties { get; private set; }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.Links collection that represents
        ///     the contacts to which the item is linked. Read-only.
        ///</summary>
        public virtual Links Links { get; private set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public virtual dynamic MAPIOBJECT { get; private set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlRemoteStatus constant
        ///     that determines the status of an item once it is received by a remote user.
        ///     Read/write.
        ///</summary>
        public virtual OlRemoteStatus MarkForDownload { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the mileage for an item.
        ///     Read/write.
        ///</summary>
        public virtual string Mileage { get; set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True to not age the
        ///     Outlook item. Read/write.
        ///</summary>
        public virtual bool NoAging { get; set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that determines whether the
        ///     originator of the meeting item or mail message will receive a delivery report.
        ///     Read/write.
        ///</summary>
        public virtual bool OriginatorDeliveryReportRequested { get; set; }

        /// <summary>
        ///     Returns an Integer (int in C#) value representing the build number of the
        ///     Outlook application for an Outlook item. Read-only.
        ///</summary>
        public virtual int OutlookInternalVersion { get; private set; }

        /// <summary>
        ///     Returns the parent Object of the specified object. Read-only.
        ///</summary>
        public virtual dynamic Parent { get; private set; }

        /// <summary>
        ///     Sets or returns an Microsoft.Office.Interop.Outlook.OlPermission constant
        ///     that determines the permissions the recipients will have on the e-mail item.
        ///     Read/write.
        ///</summary>
        public virtual OlPermission Permission { get; set; }

        /// <summary>
        ///     Sets or returns an Microsoft.Office.Interop.Outlook.OlPermissionService constant
        ///     that determines the permission service that will be used when sending a message
        ///     protected by Information Rights Management (IRM). Read/write.
        ///</summary>
        public virtual OlPermissionService PermissionService { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) value that represents the GUID of
        ///     the template file to apply to the Microsoft.Office.Interop.Outlook.MailItem
        ///     in order to specify Information Rights Management (IRM) permissions. Read/write.
        ///</summary>
        public virtual string PermissionTemplateGuid { get; set; }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.PropertyAccessor object that supports
        ///     creating, getting, setting, and deleting properties of the parent Microsoft.Office.Interop.Outlook.MailItem
        ///     object. Read-only.
        ///</summary>
        public virtual PropertyAccessor PropertyAccessor { get; private set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that indicates True if a read receipt
        ///     has been requested by the sender.
        ///</summary>
        public virtual bool ReadReceiptRequested { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the Microsoft.Office.Interop.Outlook.Recipient.EntryID
        ///     for the true recipient as set by the transport provider delivering the mail
        ///     message. Read-only.
        ///</summary>
        public virtual string ReceivedByEntryID { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the true
        ///     recipient for the mail message. Read-only.
        ///</summary>
        public virtual string ReceivedByName { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the Microsoft.Office.Interop.Outlook.Recipient.EntryID
        ///     of the user delegated to represent the recipient for the mail message. Read-only.
        ///</summary>
        public virtual string ReceivedOnBehalfOfEntryID { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the user
        ///     delegated to represent the recipient for the mail message. Read-only.
        ///</summary>
        public virtual string ReceivedOnBehalfOfName { get; private set; }

        /// <summary>
        ///     Returns a DateTime indicating the date and time at which the item was received.
        ///     Read-only.
        ///</summary>
        public virtual DateTime ReceivedTime { get; private set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that indicates True if the recipient cannot
        ///     forward the mail message. Read/write.
        ///</summary>
        public virtual bool RecipientReassignmentProhibited { get; set; }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.Recipients collection that represents
        ///     all the recipients for the Outlook item. Read-only.
        ///</summary>
        public virtual Recipients Recipients { get; private set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if the reminder
        ///     overrides the default reminder behavior for the item. Read/write.
        ///</summary>
        public virtual bool ReminderOverrideDefault { get; set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if the reminder
        ///     should play a sound when it occurs for this item. Read/write.
        ///</summary>
        public virtual bool ReminderPlaySound { get; set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if a reminder has
        ///     been set for this item. Read/write.
        ///</summary>
        public virtual bool ReminderSet { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the path and file name
        ///     of the sound file to play when the reminder occurs for the Outlook item.
        ///     Read/write.
        ///</summary>
        public virtual string ReminderSoundFile { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the date and time at which the reminder
        ///     should occur for the specified item. Read/write.
        ///</summary>
        public virtual DateTime ReminderTime { get; set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlRemoteStatus constant
        ///     specifying the remote status of the mail message. Read/write.
        ///</summary>
        public virtual OlRemoteStatus RemoteStatus { get; set; }

        /// <summary>
        ///     Returns a semicolon-delimited String (string in C#) list of reply recipients
        ///     for the mail message. Read-only.
        ///</summary>
        public virtual string ReplyRecipientNames { get; private set; }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.Recipients collection that represents
        ///     all the reply recipient objects for the Outlook item. Read-only.
        ///</summary>
        public virtual Recipients ReplyRecipients { get; private set; }
        /// <summary>
        ///     Returns a System.DateTime value that specifies the date when the Microsoft.Office.Interop.Outlook.MailItem
        ///     object expires, after which the Messaging Records Management (MRM) Assistant
        ///     will delete the item. Read-only.
        ///</summary>
        public virtual DateTime RetentionExpirationDate { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) that specifies the name of the retention
        ///     policy. Read-only.
        ///</summary>
        public virtual string RetentionPolicyName { get; private set; }

        /// <summary>
        ///     Returns or sets a byte array that represents the body of the Microsoft Outlook
        ///     item in Rich Text Format. Read/write.
        ///</summary>
        public virtual dynamic RTFBody { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that is True if the Outlook item has
        ///     not been modified since the last save. Read-only.
        ///</summary>
        public virtual bool Saved { get; private set; }

        /// <summary>
        ///     Returns or sets a Microsoft.Office.Interop.Outlook.Folder object that represents
        ///     the folder in which a copy of the e-mail message will be saved after being
        ///     sent. Read/write.
        ///</summary>
        public virtual MAPIFolder SaveSentMessageFolder { get; set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.AddressEntry object that
        ///     corresponds to the user of the account from which the Microsoft.Office.Interop.Outlook.MailItem
        ///     is sent. Read/write.
        ///</summary>
        public virtual AddressEntry Sender { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) that represents the e-mail address of the
        ///     sender of the Outlook item. Read-only.
        ///</summary>
        public virtual string SenderEmailAddress { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) that represents the type of entry for the
        ///     e-mail address of the sender of the Outlook item, such as 'SMTP' for Internet
        ///     address, 'EX' for a Microsoft Exchange server address, etc. Read-only.
        ///</summary>
        public virtual string SenderEmailType { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) indicating the display name of the sender
        ///     for the Outlook item. Read-only.
        ///</summary>
        public virtual string SenderName { get; private set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.Account object that represents
        ///     the account under which the Microsoft.Office.Interop.Outlook.MailItem is
        ///     to be sent. Read/write.
        ///</summary>
        public virtual Account SendUsingAccount { get; set; }

        /// <summary>
        ///     Returns or sets a constant in the Microsoft.Office.Interop.Outlook.OlSensitivity
        ///     enumeration indicating the sensitivity for the Outlook item. Read/write.
        ///</summary>
        public virtual OlSensitivity Sensitivity { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that indicates if a message has been
        ///     sent. Read-only.
        ///</summary>
        public virtual bool Sent { get; private set; }

        /// <summary>
        ///     Returns a DateTime indicating the date and time on which the Outlook item
        ///     was sent. Read-only.
        ///</summary>
        public virtual DateTime SentOn { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) indicating the display name for the intended
        ///     sender of the mail message. Read/write.
        ///</summary>
        public virtual string SentOnBehalfOfName { get; set; }

        /// <summary>
        ///     Returns the Microsoft.Office.Interop.Outlook.NameSpace object for the current
        ///     session. Read-only.
        ///</summary>
        public virtual NameSpace Session { get; private set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that is True if the item has been submitted.
        ///     Read-only.
        ///</summary>
        public virtual bool Submitted { get; private set; }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the completion date of the
        ///     task for this Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public virtual DateTime TaskCompletedDate { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the due date of the task
        ///     for this Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public virtual DateTime TaskDueDate { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the start date of the task
        ///     for this Microsoft.Office.Interop.Outlook.MailItem object. Read/write.
        ///</summary>
        public virtual DateTime TaskStartDate { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) value that represents the subject
        ///     of the task for the Microsoft.Office.Interop.Outlook.MailItem object. Read/write.
        ///</summary>
        public virtual string TaskSubject { get; set; }

        /// <summary>
        ///     Returns or sets a semicolon-delimited String (string in C#) list of display
        ///     names for the To recipients for the Outlook item. Read/write.
        ///</summary>
        public virtual string To { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the ordinal value of the
        ///     task for the Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public virtual DateTime ToDoTaskOrdinal { get; set; }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if the Outlook
        ///     item has not been opened (read). Read/write.
        ///</summary>
        public virtual bool UnRead { get; set; }

        /// <summary>
        ///     Returns the Microsoft.Office.Interop.Outlook.UserProperties collection that
        ///     represents all the user properties for the Outlook item. Read-only.
        ///</summary>
        public virtual UserProperties UserProperties { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying a delimited string containing
        ///     the voting options for the mail message. Read/write.
        ///</summary>
        public virtual string VotingOptions { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the voting response for
        ///     the mail message. Read/write.
        ///</summary>
        public virtual string VotingResponse { get; set; }

        /// <summary>
        ///     Appends contact information based on the Electronic Business Card (EBC) associated
        ///     with the specified Microsoft.Office.Interop.Outlook.ContactItem object to
        ///     the Microsoft.Office.Interop.Outlook.MailItem object.
        /// Parameters:
        ///   contact:
        ///     The contact item from which to obtain the business card information.
        ///</summary>
        public virtual void AddBusinessCard(ContactItem contact) { }

        /// <summary>
        ///     Clears the index of the conversation thread for the mail message.
        ///</summary>
        public virtual void ClearConversationIndex() { }

        /// <summary>
        ///     Clears the Microsoft.Office.Interop.Outlook.MailItem object as a task.
        ///</summary>
        public virtual void ClearTaskFlag() { }

        /// <summary>
        ///     Closes and optionally saves changes to the Outlook item.
        /// Parameters:
        ///   SaveMode:
        ///     The close behavior. If the item displayed within the inspector has not been
        ///     changed, this argument has no effect.
        ///</summary>
        public virtual void Close(OlInspectorClose SaveMode) { }

        /// <summary>
        ///     Creates another instance of an object.
        /// Returns:
        ///     Returns an System.Object that is a copy of the parent Microsoft.Office.Interop.Outlook.MailItem
        ///     object.
        ///</summary>
        public virtual dynamic Copy() { return null; }

        /// <summary>
        ///     Deletes an object from the collection.
        ///</summary>
        public virtual void Delete() { }

        /// <summary>
        ///     Displays a new Microsoft.Office.Interop.Outlook.Inspector object for the
        ///     item.
        /// Parameters:
        ///   Modal:
        ///     True to make the window modal. The default value is False.
        ///</summary>
        public virtual void Display(object Modal = null) { }

        ///// <summary>
        /////     Executes the Forward action for an item and returns the resulting copy as
        /////     a Microsoft.Office.Interop.Outlook.MailItem object.
        ///// Returns:
        /////     A MailItem object that represents the new mail item.
        /////</summary>
        //public virtual OutlookMessageItemWrapper Forward() { return null; }

        /// <summary>
        ///     Obtains a Microsoft.Office.Interop.Outlook.Conversation object that represents
        ///     the conversation to which this item belongs.
        /// Returns:
        ///     Returns a Conversation object that represents the conversation to which this
        ///     item belongs.
        ///</summary>
        public virtual Conversation GetConversation() { return null; }

        /// <summary>
        ///     Marks a Microsoft.Office.Interop.Outlook.MailItem object as a task and assigns
        ///     a task interval for the object.
        /// Parameters:
        ///   MarkInterval:
        ///     The task interval for the MailItem.
        ///</summary>
        public virtual void MarkAsTask(OlMarkInterval MarkInterval) { }

        /// <summary>
        ///     Moves a Microsoft Outlook item to a new folder.
        /// Parameters:
        ///   DestFldr:
        ///     An expression that returns a Folder object. The destination folder.
        /// Returns:
        ///     An Object value that represents the item which has been moved to the designated
        ///     folder.
        ///</summary>
        public virtual dynamic Move(MAPIFolder DestFldr) { return null; }

        /// <summary>
        ///     Prints the Outlook item using all default settings. The PrintOut method is
        ///     the only Outlook method that can be used for printing.
        ///</summary>
        public virtual void PrintOut() { }

        ///// <summary>
        /////     Creates a reply, pre-addressed to the original sender, from the original
        /////     message.
        ///// Returns:
        /////     A Microsoft.Office.Interop.Outlook.MailItem object that represents the reply.
        /////</summary>
        //public virtual OutlookMessageItemWrapper Reply() { return null; }

        ///// <summary>
        /////     Creates a reply to all original recipients from the original message.
        ///// Returns:
        /////     A Microsoft.Office.Interop.Outlook.MailItem object that represents the reply.
        /////</summary>
        //public virtual OutlookMessageItemWrapper ReplyAll() { return null; }

        /// <summary>
        ///     Saves the Microsoft Outlook item to the current folder or, if this is a new
        ///     item, to the Outlook default folder for the item type.
        ///</summary>
        public virtual void Save() { }

        /// <summary>
        ///     Saves the Microsoft Outlook item to the specified path and in the format
        ///     of the specified file type. If the file type is not specified, the MSG format
        ///     (.msg) is used.
        /// Parameters:
        ///   Path:
        ///     The path in which to save the item.
        ///   Type:
        ///     The file type to save. Can be one of the following OlSaveAsType constants:
        ///     olHTML, olMSG, olRTF, olTemplate, olDoc,olTXT, olVCal, olVCard, olICal, or
        ///     olMSGUnicode.
        ///</summary>
        public virtual void SaveAs(string Path, object Type = null) { }

        /// <summary>
        ///     Sends the e-mail message.
        ///</summary>
        public virtual void Send() { }

        /// <summary>
        ///     Displays the Show Categories dialog box, which allows you to select categories
        ///     that correspond to the subject of the item.
        ///</summary>
        public virtual void ShowCategoriesDialog() { }

        #endregion

        #region Specific to Appointment

        /// <summary>
        ///    Returns True if the appointment is an all-day event (as opposed to a specified
        ///    time). Read/write.
        ///</summary>
        public virtual bool AllDayEvent { get; set; }

        /// <summary>
        ///    Returns or sets an Microsoft.Office.Interop.Outlook.OlBusyStatus constant
        ///    indicating the busy status of the user for the appointment. Read/write.
        /// <\summary>
        public virtual OlBusyStatus BusyStatus { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual bool ConferenceServerAllowExternal { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual string ConferenceServerPassword { get; set; }

        /// <summary>
        ///    Returns or sets an Integer (int in C#) value indicating the duration (in
        ///    minutes) of the Microsoft.Office.Interop.Outlook.AppointmentItem. Read/write.
        /// <\summary>
        public virtual int Duration { get; set; }

        /// <summary>
        ///    Returns or sets a DateTime indicating the end date and time of an Microsoft.Office.Interop.Outlook.AppointmentItem.
        ///    Read/write.
        /// <\summary>
        public virtual DateTime End { get; set; }

        /// <summary>
        ///    Returns or sets a DateTime value that represents the end date and time of
        ///    the appointment expressed in the Microsoft.Office.Interop.Outlook._AppointmentItem.EndTimeZone.
        ///    Read/write.
        /// <\summary>
        public virtual DateTime EndInEndTimeZone { get; set; }

        /// <summary>
        ///    Returns or sets a Microsoft.Office.Interop.Outlook.TimeZone value that corresponds
        ///    to the end time of the appointment. Read/write.
        /// <\summary>
        public virtual Microsoft.Office.Interop.Outlook.TimeZone EndTimeZone { get; set; }

        /// <summary>
        ///    Returns or sets a DateTime value that represents the end date and time of
        ///    the appointment expressed in the Coordinated Universal Time (UTC) standard.
        ///    Read/write.
        /// <\summary>
        public virtual DateTime EndUTC { get; set; }

        /// <summary>
        ///    Returns or sets a Boolean (bool in C#) value that indicates whether updates
        ///    to the Microsoft.Office.Interop.Outlook.AppointmentItem object should be
        ///    sent to all attendees. Read/write.
        /// <\summary>
        public virtual bool ForceUpdateToAllAttendees { get; set; }

        /// <summary>
        ///    Returns a String (string in C#) value that represents a unique global identifier
        ///    for the Microsoft.Office.Interop.Outlook.AppointmentItem object. Read-only.
        /// <\summary>
        public virtual string GlobalAppointmentID { get; private set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual bool IsOnlineMeeting { get; set; }

        /// <summary>
        ///    Returns a Boolean (bool in C#) value that is True if the appointment is a
        ///    recurring appointment. Read-only.
        /// <\summary>
        public virtual bool IsRecurring { get; private set; }

        /// <summary>
        ///    Returns or sets a String (string in C#) representing the specific office
        ///    location (for example, Building 1 Room 1 or Suite 123) for the appointment.
        ///    Read/write.
        /// <\summary>
        public virtual string Location { get; set; }

        /// <summary>
        ///    Returns or sets an Microsoft.Office.Interop.Outlook.OlMeetingStatus constant
        ///    specifying the meeting status of the appointment. Read/write.
        /// <\summary>
        public virtual OlMeetingStatus MeetingStatus { get; set; }

        /// <summary>
        ///    Returns a String (string in C#) value that represents the URL for the Meeting
        ///    Workspace that the appointment item is linked to. Read-only.
        /// <\summary>
        public virtual string MeetingWorkspaceURL { get; private set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual bool NetMeetingAutoStart { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual string NetMeetingDocPathName { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual string NetMeetingOrganizerAlias { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual string NetMeetingServer { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual OlNetMeetingType NetMeetingType { get; set; }

        /// <summary>
        ///    This object, member, or enumeration is deprecated and is not intended to
        ///    be used in your code.
        /// <\summary>
        public virtual string NetShowURL { get; set; }

        /// <summary>
        ///    Returns or sets a String (string in C#) representing the display string of
        ///    optional attendees names for the appointment. Read/write.
        /// <\summary>
        public virtual string OptionalAttendees { get; set; }

        /// <summary>
        ///    Returns a String (string in C#) representing the name of the organizer of
        ///    the appointment. Read-only.
        /// <\summary>
        public virtual string Organizer { get; private set; }

        /// <summary>
        ///    Returns an Microsoft.Office.Interop.Outlook.OlRecurrenceState constant indicating
        ///    the recurrence property of the specified object. Read-only.
        /// <\summary>
        public virtual OlRecurrenceState RecurrenceState { get; private set; }

        /// <summary>
        ///    Returns or sets an Integer (int in C#) value indicating the number of minutes
        ///    the reminder should occur prior to the start of the appointment. Read/write.
        /// <\summary>
        public virtual int ReminderMinutesBeforeStart { get; set; }

        /// <summary>
        ///    Returns or sets a DateTime indicating the reply time for the appointment.
        ///    Read/write.
        /// <\summary>
        public virtual DateTime ReplyTime { get; set; }

        /// <summary>
        ///    Returns a semicolon-delimited String (string in C#) of required attendee
        ///    names for the meeting appointment. Read/write.
        /// <\summary>
        public virtual string RequiredAttendees { get; set; }

        /// <summary>
        ///    Returns a semicolon-delimited String (string in C#) of resource names for
        ///    the meeting. Read/write.
        /// <\summary>
        public virtual string Resources { get; set; }

        /// <summary>
        ///    Returns a Boolean (bool in C#) that indicates True if the sender would like
        ///    a response to the meeting request for the appointment. Read/write.
        /// <\summary>
        public virtual bool ResponseRequested { get; set; }

        /// <summary>
        ///    Returns an Microsoft.Office.Interop.Outlook.OlResponseStatus constant indicating
        ///    the overall status of the meeting for the current user for the appointment.
        ///    Read-only.
        /// <\summary>
        public virtual OlResponseStatus ResponseStatus { get; private set; }

        /// <summary>
        ///    Returns or sets a DateTime indicating the starting date and time for the
        ///    Outlook item. Read/write.
        /// <\summary>
        public virtual DateTime Start { get; set; }

        /// <summary>
        ///    Returns or sets a DateTime value that represents the start date and time
        ///    of the appointment expressed in the Microsoft.Office.Interop.Outlook._AppointmentItem.StartTimeZone.
        ///    Read/write.
        /// <\summary>
        public virtual DateTime StartInStartTimeZone { get; set; }

        /// <summary>
        ///    Returns or sets a Microsoft.Office.Interop.Outlook.TimeZone value that corresponds
        ///    to the time zone for the start time of the appointment. Read/write.
        /// <\summary>
        public virtual Microsoft.Office.Interop.Outlook.TimeZone StartTimeZone { get; set; }

        /// <summary>
        ///    Returns or sets a DateTime value that represents the start date and time
        ///    of the appointment expressed in the Coordinated Univeral Time (UTC) standard.
        ///    Read/write.
        /// <\summary>
        public virtual DateTime StartUTC { get; set; }

        /// <summary>
        ///    Removes the recurrence settings and restores the single-occurrence state
        ///    for an appointment or task.
        /// <\summary>
        public virtual void ClearRecurrencePattern() { }

        /// <summary>
        ///    Closes and optionally saves changes to the Outlook item.
        ///    Copies the Microsoft.Office.Interop.Outlook.AppointmentItem to the folder
        ///    that is specified by the DestinationFolder parameter and returns an object
        ///    that represents the item created in the destination folder by the copy operation.
        ///Parameters:
        ///  DestinationFolder:
        ///    Specifies the folder to which the AppointmentItem object is copied.
        ///  CopyOptions:
        ///    Specifies the user experience of the copy operation.
        ///Returns:
        ///    Returns an AppointmentItem objectthat represents the object created in the
        ///    destination folder as a result of the copy operation.
        /// <\summary>
        public virtual AppointmentItem CopyTo(MAPIFolder DestinationFolder, OlAppointmentCopyOptions CopyOptions) { return null; }

        /// <summary>
        ///    Forwards the Microsoft.Office.Interop.Outlook.AppointmentItem as a vCal;
        ///    virtual calendar item.
        ///Returns:
        ///    A Microsoft.Office.Interop.Outlook.MailItem object that represents the new
        ///    mail item to which the calendar information is attached.
        /// <\summary>
        public virtual MailItem ForwardAsVcal() { return null; }

        /// <summary>
        ///    Obtains the Microsoft.Office.Interop.Outlook.AddressEntry object that contains
        ///    information from the Address Book about the organizer of the Microsoft.Office.Interop.Outlook.AppointmentItem.
        ///Returns:
        ///    Returns an AddressEntry object that represents the organizer of the AppointmentItem.
        /// <\summary>
        public virtual AddressEntry GetOrganizer() { return null; }

        /// <summary>
        ///    Returns a Microsoft.Office.Interop.Outlook.RecurrencePattern object that
        ///    represents the recurrence attributes of an appointment.
        ///Returns:
        ///    A RecurrencePattern object that represents the recurrence attributes of an
        ///    appointment.
        /// <\summary>
        public virtual RecurrencePattern GetRecurrencePattern() { return null; }

        /// <summary>
        ///    Responds to a meeting request.
        ///Parameters:
        ///  Response:
        ///    The response to the request.
        ///  fNoUI:
        ///    True to not display a dialog box; the response is sent automatically. False
        ///    to display the dialog box for responding.
        ///  fAdditionalTextDialog:
        ///    False to not prompt the user for input; the response is displayed in the
        ///    inspector for editing. True to prompt the user to either send or send with
        ///    comments. This argument is valid only if fNoUI is False.
        ///Returns:
        ///    A Microsoft.Office.Interop.Outlook.MeetingItem object that represents the
        ///    response to the meeting request.
        /// <\summary>
        public virtual MeetingItem Respond(OlMeetingResponse Response, object fNoUI = null, object fAdditionalTextDialog = null) { return null; }

        #endregion

        #region Specific to Task

        /// <summary>
        ///     Returns or sets an Integer (int in C#) value indicating the actual effort
        ///     spent on the task. Read/write.
        /// <\summary>
        public virtual int ActualWork { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the text of the card
        ///     data for the task. Read/write.
        /// <\summary>
        public virtual string CardData { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that is True if the task is completed. Read/write.
        /// <\summary>
        public virtual bool Complete { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the contact names associated
        ///     with the Outlook item. Read/write.
        /// <\summary>
        public virtual string ContactNames { get; set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        /// <\summary>
        public virtual string Contacts { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the completion date of the task. Read/write.
        /// <\summary>
        public virtual DateTime DateCompleted { get; set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.OlTaskDelegationState constant
        ///     indicating the delegation state of the task. Read-only.
        /// <\summary>
        public virtual OlTaskDelegationState DelegationState { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the delegator
        ///     for the task. Read-only.
        /// </summary>
        public virtual string Delegator { get; private set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the due date for the task. Read/write.
        /// <\summary>
        public virtual DateTime DueDate { get; set; }

        /// <summary>
        ///     Returns or sets an Integer (int in C#) value specifying the position in the
        ///     view (ordinal) for the task. Read/write.
        /// <\summary>
        public virtual int Ordinal { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the owner for the task.
        /// <\summary>
        public virtual string Owner { get; set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.OlTaskOwnership specifying the
        ///     ownership state of the task. Read-only.
        /// <\summary>
        public virtual OlTaskOwnership Ownership { get; private set; }

        /// <summary>
        ///     Returns or sets an Integer (int in C#) value indicating the percentage of
        ///     the task completed at the current date and time. Read/write.
        /// <\summary>
        public virtual int PercentComplete { get; set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.OlTaskResponse constant indicating
        ///     the overall status of the response to the specified task request. Read-only.
        /// <\summary>
        public virtual OlTaskResponse ResponseState { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) containing the free-form text string
        ///     associating the owner of a task with a role for the task. Read/write.
        /// <\summary>
        public virtual string Role { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the Microsoft Schedule+
        ///     priority for the task. Read/write.
        /// <\summary>
        public virtual string SchedulePlusPriority { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the start date for the task. Read/write.
        /// <\summary>
        public virtual DateTime StartDate { get; set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlTaskStatus constant
        ///     specifying the status for the task. Corresponds to the Status field of a
        ///     Microsoft.Office.Interop.Outlook.TaskItem. Read/write.
        /// <\summary>
        public virtual OlTaskStatus Status { get; set; }

        /// <summary>
        ///     Returns or sets a semicolon-delimited String (string in C#) of display names
        ///     for recipients who will receive status upon completion of the task. Read/write.
        /// <\summary>
        public virtual string StatusOnCompletionRecipients { get; set; }

        /// <summary>
        ///     Returns a semicolon-delimited String (string in C#) of display names for
        ///     recipients who receive status updates for the task. Read/write.
        /// <\summary>
        public virtual string StatusUpdateRecipients { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that indicates True if the task is a team
        ///     task. Read/write.
        /// <\summary>
        public virtual bool TeamTask { get; set; }

        /// <summary>
        ///     Returns or sets an Integer (int in C#) value indicating the total work for
        ///     the task. Read/write.
        /// <\summary>
        public virtual int TotalWork { get; set; }

        /// <summary>
        ///     Assigns a task and returns a Microsoft.Office.Interop.Outlook.TaskItem object
        ///     that represents it.
        /// Returns:
        ///     A TaskItem object that represents the task.
        /// <\summary>
        public virtual TaskItem Assign() { return null; }

        /// <summary>
        ///     Resets an unsent response to a task request back to a simple task.
        /// <\summary>
        public virtual void CancelResponseState() { }

        /// <summary>
        ///     Marks the task as completed.
        /// <\summary>
        public virtual void MarkComplete() { }

        /// <summary>
        ///     Responds to a task request.
        /// Parameters:
        ///   Response:
        ///     The response to the request.
        ///   fNoUI:
        ///     True to not display a dialog box; the response is sent automatically. False
        ///     to display the dialog box for responding.
        ///   fAdditionalTextDialog:
        ///     False to not prompt the user for input; the response is displayed in the
        ///     inspector for editing. True to prompt the user to either send or send with
        ///     comments. This argument is valid only if fNoUI is False.
        /// Returns:
        ///     A Microsoft.Office.Interop.Outlook.TaskItem that represents the response
        ///     to the task request.
        /// <\summary>
        public virtual TaskItem Respond(OlTaskResponse Response, object fNoUI, object fAdditionalTextDialog) { return null; }

        /// <summary>
        ///     Clears the current instance of a recurring task and sets the recurrence to
        ///     the next instance of that task.
        /// Returns:
        ///     False indicates that the task was the last task in the recurrence, so there
        ///     is no task to set the recurrence to. True indicates that the recurrence was
        ///     successfully set to the next instance of that task.
        /// <\summary>
        public virtual bool SkipRecurrence() { return false; }

        /// <summary>
        ///     Sends a status report to all Cc recipients (recipients returned by the Microsoft.Office.Interop.Outlook._TaskItem.StatusUpdateRecipients
        ///     property) with the current status for the task and returns an Object representing
        ///     the status report.
        /// Returns:
        ///     An Object value that represents the status report.
        /// <\summary>
        public virtual dynamic StatusReport() { return null; }

        #endregion

        #region specific to document
        // No methos/property specific to document
        #endregion

        #region specfic to Post
        /// <summary>
        ///     Sends (posts) the Microsoft.Office.Interop.Outlook.PostItem object.
        /// </summary>
        public virtual void Post() { }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        /// </summary>
        public virtual bool SetACLs() { return false; }

        #endregion

        #region specific to Contact

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the account for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string Account { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the anniversary date for the contact.
        ///     Read/write.
        /// </summary>
        public virtual DateTime Anniversary { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the name of the person
        ///     who is the assistant for the contact. Read/write.
        /// </summary>
        public virtual string AssistantName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the telephone number
        ///     of the person who is the assistant for the contact. Read/write.
        /// </summary>
        public virtual string AssistantTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a DateTime indicating the birthday for the contact. Read/write.
        /// </summary>
        public virtual DateTime Birthday { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the second business
        ///     telephone number for the contact. Read/write.
        /// </summary>
        public virtual string Business2TelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the whole, unparsed
        ///     business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the city name portion
        ///     of the business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddressCity { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the country/region code
        ///     portion of the business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddressCountry { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the postal code (zip
        ///     code) portion of the business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddressPostalCode { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the post office box
        ///     number portion of the business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddressPostOfficeBox { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the state code portion
        ///     of the business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddressState { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the street address portion
        ///     of the business address for the contact. Read/write.
        /// </summary>
        public virtual string BusinessAddressStreet { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) that represents the XML markup for
        ///     the layout of the Electronic Business Card. Read/write.
        /// </summary>
        public virtual string BusinessCardLayoutXml { get; set; }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.OlBusinessCardType constant that
        ///     specifies the type of Electronic Business Card used by this contact. Read-only.
        /// </summary>
        public virtual OlBusinessCardType BusinessCardType { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the business fax number
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string BusinessFaxNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the URL of the business
        ///     Web page for the contact. Read/write.
        /// </summary>
        public virtual string BusinessHomePage { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the first business telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string BusinessTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the callback telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string CallbackTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the car telephone number
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string CarTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the names of the children
        ///     of the contact. Read/write.
        /// </summary>
        public virtual string Children { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the concatenated company name
        ///     and full name for the contact. Read-only.
        /// </summary>
        public virtual string CompanyAndFullName { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the company name for the contact
        ///     followed by the concatenated last name, first name, and middle name with
        ///     no space between the last and first names. Read-only.
        /// </summary>
        public virtual string CompanyLastFirstNoSpace { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the company name for the contact
        ///     followed by the concatenated last name, first name, and middle name with
        ///     spaces between the last, first, and middle names. Read-only.
        /// </summary>
        public virtual string CompanyLastFirstSpaceOnly { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the company main telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string CompanyMainTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the company name for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string CompanyName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the name of the computer
        ///     network for the contact. Read/write.
        /// </summary>
        public virtual string ComputerNetworkName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the customer ID for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string CustomerID { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the department name
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string Department { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the e-mail address of
        ///     the first e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email1Address { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the address type (such
        ///     as EX or SMTP) of the first e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email1AddressType { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the first
        ///     e-mail address for the contact. Read/write.
        /// </summary>
        public virtual string Email1DisplayName { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the Entry ID of the first e-mail
        ///     address for the contact. Read-only.
        /// </summary>
        public virtual string Email1EntryID { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the e-mail address of
        ///     the second e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email2Address { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the address type (such
        ///     as EX or SMTP) of the second e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email2AddressType { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the second
        ///     e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email2DisplayName { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the Entry ID of the second e-mail
        ///     entry for the contact. Read-only.
        /// </summary>
        public virtual string Email2EntryID { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the e-mail address of
        ///     the third e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email3Address { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the address type (such
        ///     as EX or SMTP) of the third e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email3AddressType { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the third
        ///     e-mail entry for the contact. Read/write.
        /// </summary>
        public virtual string Email3DisplayName { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the entry ID of the third e-mail
        ///     entry for the contact. Read-only.
        /// </summary>
        public virtual string Email3EntryID { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the default keyword string
        ///     assigned to the contact when it is filed. Read/write.
        /// </summary>
        public virtual string FileAs { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the first name for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string FirstName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the FTP site entry for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string FTPSite { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the whole, unparsed full
        ///     name for the contact. Read/write.
        /// </summary>
        public virtual string FullName { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the full name and company of
        ///     the contact by concatenating the values of the Microsoft.Office.Interop.Outlook._ContactItem.FullName
        ///     and Microsoft.Office.Interop.Outlook._ContactItem.CompanyName properties.
        ///     Read-only.
        /// </summary>
        public virtual string FullNameAndCompany { get; private set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlGender constant indicating
        ///     the gender of the contact. Read/write.
        /// </summary>
        public virtual OlGender Gender { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the government ID number
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string GovernmentIDNumber { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that is True if a Contacts item has
        ///     a picture associated with it. Read-only
        /// </summary>
        public virtual bool HasPicture { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the hobby for the contact.
        ///     Read/write.
        /// </summary>
        public virtual string Hobby { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the second home telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string Home2TelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the full, unparsed text
        ///     of the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the city portion of
        ///     the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddressCity { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the country/region portion
        ///     of the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddressCountry { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the postal code portion
        ///     of the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddressPostalCode { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) the post office box number portion
        ///     of the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddressPostOfficeBox { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the state portion of
        ///     the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddressState { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the street portion of
        ///     the home address for the contact. Read/write.
        /// </summary>
        public virtual string HomeAddressStreet { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the home fax number
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string HomeFaxNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the first home telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string HomeTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) that represents a contact's Microsoft
        ///     Instant Messenger address. Read/write.
        /// </summary>
        public virtual string IMAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the initials for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string Initials { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) corresponding to the Address box
        ///     on the Details tab for a contact. Read/write.
        /// </summary>
        public virtual string InternetFreeBusyAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the ISDN number for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string ISDNNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the job title for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string JobTitle { get; set; }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that indicates True if the transaction of
        ///     the contact will be journalized. Read/write.
        /// </summary>
        public virtual bool Journal { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) that represents the language in which
        ///     the contact writes messages. Read/write.
        /// </summary>
        public virtual string Language { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the last name, first name, middle
        ///     name, and suffix of the contact. Read-only.
        /// </summary>
        public virtual string LastFirstAndSuffix { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the concatenated last name,
        ///     first name, and middle name of the contact with no space between the last
        ///     name and the first name. Read-only.
        /// </summary>
        public virtual string LastFirstNoSpace { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) that contains the last name, first name,
        ///     and suffix of the user without a space. Read-only
        /// </summary>
        public virtual string LastFirstNoSpaceAndSuffix { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the concatenated last name,
        ///     first name, and middle name of the contact with no space between the last
        ///     name and the first name. Read-only.
        /// </summary>
        public virtual string LastFirstNoSpaceCompany { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the concatenated last name,
        ///     first name, and middle name of the contact with spaces between them. Read-only.
        /// </summary>
        public virtual string LastFirstSpaceOnly { get; private set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the concatenated last name,
        ///     first name, and middle name of the contact with spaces between them. Read-only.
        /// </summary>
        public virtual string LastFirstSpaceOnlyCompany { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the last name for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string LastName { get; set; }

        /// <summary>
        ///     Returns a String (string in C#) representing the concatenated last name and
        ///     first name for the contact. Read-only.
        /// </summary>
        public virtual string LastNameAndFirstName { get; private set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the full, unparsed selected
        ///     mailing address for the contact. Read/write.
        /// </summary>
        public virtual string MailingAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the city name portion
        ///     of the selected mailing address of the contact. Read/write.
        /// </summary>
        public virtual string MailingAddressCity { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the country/region code
        ///     portion of the selected mailing address of the contact. Read/write.
        /// </summary>
        public virtual string MailingAddressCountry { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the postal code (zip
        ///     code) portion of the selected mailing address of the contact. Read/write.
        /// </summary>
        public virtual string MailingAddressPostalCode { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the post office box
        ///     number portion of the selected mailing address of the contact. Read/write.
        /// </summary>
        public virtual string MailingAddressPostOfficeBox { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the state code portion
        ///     for the selected mailing address of the contact. Read/write.
        /// </summary>
        public virtual string MailingAddressState { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the street address portion
        ///     of the selected mailing address of the contact. Read/write.
        /// </summary>
        public virtual string MailingAddressStreet { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the manager name for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string ManagerName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the middle name for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string MiddleName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the mobile telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string MobileTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the user's Microsoft NetMeeting
        ///     ID, or alias. Read/write.
        /// </summary>
        public virtual string NetMeetingAlias { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the nickname for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string NickName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the specific office location
        ///     (for example, Building 1 Room 1 or Suite 123) for the contact. Read/write.
        /// </summary>
        public virtual string OfficeLocation { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the organizational ID
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string OrganizationalIDNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the other address for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string OtherAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the city portion of
        ///     the other address for the contact. Read/write.
        /// </summary>
        public virtual string OtherAddressCity { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the country/region portion
        ///     of the other address for the contact. Read/write.
        /// </summary>
        public virtual string OtherAddressCountry { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the postal code portion
        ///     of the other address for the contact. Read/write.
        /// </summary>
        public virtual string OtherAddressPostalCode { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the post office box
        ///     portion of the other address for the contact. Read/write.
        /// </summary>
        public virtual string OtherAddressPostOfficeBox { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the state portion of
        ///     the other address for the contact. Read/write.
        /// </summary>
        public virtual string OtherAddressState { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the street portion of
        ///     the other address for the contact. Read/write.
        /// </summary>
        public virtual string OtherAddressStreet { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the other fax number
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string OtherFaxNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the other telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string OtherTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the pager number for
        ///     the contact. Read/write.
        /// </summary>
        public virtual string PagerNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the URL of the personal
        ///     Web page for the contact. Read/write.
        /// </summary>
        public virtual string PersonalHomePage { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the primary telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string PrimaryTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the profession for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string Profession { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the radio telephone number
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string RadioTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the referral name entry
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string ReferredBy { get; set; }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlMailingAddress constant
        ///     indicating the type of the mailing address for the contact. Read/write.
        /// </summary>
        public virtual OlMailingAddress SelectedMailingAddress { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the spouse name entry
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string Spouse { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the name suffix (such
        ///     as Jr., III, or Ph.D.) for the specified contact. Read/write.
        /// </summary>
        ///
        public virtual string Suffix { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the telex number for the
        ///     contact. Read/write.
        /// </summary>
        public virtual string TelexNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the title for the contact.
        ///     Read/write.
        /// </summary>
        public virtual string Title { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the TTY/TDD telephone
        ///     number for the contact. Read/write.
        /// </summary>
        public virtual string TTYTDDTelephoneNumber { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the first field on the
        ///     Contacts form intended for miscellaneous use for the contact. Read/write.
        /// </summary>
        public virtual string User1 { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the second field on the
        ///     Contacts form intended for miscellaneous use for the contact. Read/write.
        /// </summary>
        public virtual string User2 { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the third field on the
        ///     Contacts form intended for miscellaneous use for the contact. Read/write.
        /// </summary>
        public virtual string User3 { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the fourth field on the
        ///     Contacts form intended for miscellaneous use for the contact. Read/write.
        /// </summary>
        public virtual string User4 { get; set; }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        /// </summary>
        public virtual string UserCertificate { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the URL of the Web page
        ///     for the contact. Read/write.
        /// </summary>
        public virtual string WebPage { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the Japanese phonetic
        ///     rendering (yomigana) of the company name for the contact. Read/write.
        /// </summary>
        public virtual string YomiCompanyName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the Japanese phonetic
        ///     rendering (yomigana) of the first name for the contact. Read/write.
        /// </summary>
        public virtual string YomiFirstName { get; set; }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the Japanese phonetic
        ///     rendering (yomigana) of the last name for the contact. Read/write.
        /// </summary>
        public virtual string YomiLastName { get; set; }

        /// <summary>
        ///     Adds a logo picture to the current Electronic Business Card of the contact
        ///     item.
        /// Parameters:
        ///   Path:
        ///     The full path name that specifies the picture file to load.
        /// </summary>
        public virtual void AddBusinessCardLogoPicture(string Path) { }

        /// <summary>
        ///     Adds a picture to a contact item.
        /// Parameters:
        ///   Path:
        ///     A string containing the complete path and filename of the picture to be added
        ///     to the contact item.
        /// </summary>
        public virtual void AddPicture(string Path) { }

        /// <summary>
        ///     Creates a new Microsoft.Office.Interop.Outlook.MailItem object containing
        ///     contact information and, optionally, an Electronic Business Card (EBC) image
        ///     based on the specified Microsoft.Office.Interop.Outlook.ContactItem object.
        /// Returns:
        ///     A MailItem object that represents the new e-mail item containing the business
        ///     card information.
        /// </summary>
        public virtual MailItem ForwardAsBusinessCard() { return null; }

        /// <summary>
        ///     Creates a Microsoft.Office.Interop.Outlook.MailItem and attaches the contact
        ///     information in vCard format.
        /// Returns:
        ///     A MailItem object that represents the new mail item to which the contact
        ///     information is attached.
        /// </summary>
        public virtual MailItem ForwardAsVcard() { return null; }

        /// <summary>
        ///     Removes a picture from a Contacts item.
        /// </summary>
        public virtual void RemovePicture() { }

        /// <summary>
        ///     Resets the Electronic Business Card on the contact item to the default business
        ///     card, deleting any custom layout and logo on the Electronic Business Card.
        /// </summary>
        public virtual void ResetBusinessCard() { }

        /// <summary>
        ///     Saves an image of the business card generated from the specified Microsoft.Office.Interop.Outlook.ContactItem
        ///     object.
        /// Parameters:
        ///   Path:
        ///     The fully qualified path and file name of the image to be saved.
        /// </summary>
        public virtual void SaveBusinessCardImage(string Path) { }

        /// <summary>
        ///     Displays the electronic business card (EBC) editor dialog box for the Microsoft.Office.Interop.Outlook.ContactItem
        ///     object.
        /// </summary>
        public virtual void ShowBusinessCardEditor() { }

        /// <summary>
        ///     Displays the Check Phone Number dialog box for a specified telephone number
        ///     contained by a Microsoft.Office.Interop.Outlook.ContactItem object.
        /// Parameters:
        ///   PhoneNumber:
        ///     The type of telephone number to be checked.
        /// </summary>
        public virtual void ShowCheckPhoneDialog(OlContactPhoneNumber PhoneNumber) { }
        #endregion

        /// <summary>
        /// Disposes managed & unmanaged resources
        /// </summary>
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Disposes managed & unmanaged resources
        /// This can be overrwitten in derived class
        /// </summary>
        /// <param name="disposing"></param>
        protected virtual void Dispose(bool disposing)
        {
            if (!isDisposed)
            {
                if (disposing)
                {
                    // Dispose managed resources
                }

                // Dispose un-managed resources


                isDisposed = true;
            }
        }

        /// <summary>
        /// Finalizer
        /// </summary>
        ~OutlookMessageWrapper()
        {
            Dispose(false);
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="OutlookMailItem.cs"
                Encoding="UTF8"><![CDATA[
using System;
using Outlook = Microsoft.Office.Interop.Outlook;
using Microsoft.Office.Interop.Outlook;
using System.Runtime.InteropServices;
 
namespace ST_4c0aca6d1a0244e08f52e44ac66583bc
{
    /// <summary>
    /// Wrapper class for Outlook Mail item
    /// </summary>
    class OutlookMailItem : OutlookMessageWrapper
    {
        public Outlook.MailItem Item { get; set; }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="olMail"></param>
        public OutlookMailItem(Outlook.MailItem olMail)
        {
            Item = olMail;

            RegisterEvents();
        }

        #region events

        #region event declaration
        public override event ItemEvents_10_AfterWriteEventHandler AfterWrite;
        public override event ItemEvents_10_AttachmentAddEventHandler AttachmentAdd;
        public override event ItemEvents_10_AttachmentReadEventHandler AttachmentRead;
        public override event ItemEvents_10_AttachmentRemoveEventHandler AttachmentRemove;
        public override event ItemEvents_10_BeforeAttachmentAddEventHandler BeforeAttachmentAdd;
        public override event ItemEvents_10_BeforeAttachmentPreviewEventHandler BeforeAttachmentPreview;
        public override event ItemEvents_10_BeforeAttachmentReadEventHandler BeforeAttachmentRead;
        public override event ItemEvents_10_BeforeAttachmentSaveEventHandler BeforeAttachmentSave;
        public override event ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler BeforeAttachmentWriteToTempFile;
        public override event ItemEvents_10_BeforeAutoSaveEventHandler BeforeAutoSave;
        public override event ItemEvents_10_BeforeCheckNamesEventHandler BeforeCheckNames;
        public override event ItemEvents_10_BeforeDeleteEventHandler BeforeDelete;
        public override event ItemEvents_10_BeforeReadEventHandler BeforeRead;
        public override event ItemEvents_10_CustomActionEventHandler CustomAction;
        public override event ItemEvents_10_CustomPropertyChangeEventHandler CustomPropertyChange;
        public override event ItemEvents_10_OpenEventHandler Open;
        public override event ItemEvents_10_PropertyChangeEventHandler PropertyChange;
        public override event ItemEvents_10_UnloadEventHandler Unload;
        public override event ItemEvents_10_WriteEventHandler Write;
        public override event ItemEvents_10_ReadEventHandler Read;
        #endregion

        void Item_Write(ref bool Cancel)
        {
            if (Write != null)
            {
                Write(ref Cancel);
            }
        }

        void Item_Unload()
        {
            if (Unload != null)
            {
                Unload();
            }
        }

        void Item_Read()
        {
            if (Read != null)
            {
                Read();
            }
        }

        void Item_PropertyChange(string Name)
        {
            if (PropertyChange != null)
            {
                PropertyChange(Name);
            }
        }

        void Item_Open(ref bool Cancel)
        {
            if (Open != null)
            {
                Open(ref Cancel);
            }
        }

        void Item_CustomPropertyChange(string Name)
        {
            if (CustomPropertyChange != null)
            {
                CustomPropertyChange(Name);
            }
        }

        void Item_CustomAction(object Action, object Response, ref bool Cancel)
        {
            if (CustomAction != null)
            {
                CustomAction(Action, Response, ref Cancel);
            }
        }

        void Item_BeforeRead()
        {
            if (BeforeRead != null)
            {
                BeforeRead();
            }
        }

        void Item_BeforeDelete(object Item, ref bool Cancel)
        {
            if (BeforeDelete != null)
            {
                BeforeDelete(Item, ref Cancel);
            }
        }

        void Item_BeforeCheckNames(ref bool Cancel)
        {
            if (BeforeCheckNames != null)
            {
                BeforeCheckNames(ref Cancel);
            }
        }

        void Item_BeforeAutoSave(ref bool Cancel)
        {
            if (BeforeAutoSave != null)
            {
                BeforeAutoSave(ref Cancel);
            }
        }

        void Item_BeforeAttachmentWriteToTempFile(Attachment Attachment, ref bool Cancel)
        {
            if (BeforeAttachmentWriteToTempFile != null)
            {
                BeforeAttachmentWriteToTempFile(Attachment, ref Cancel);
            }
        }

        void Item_BeforeAttachmentSave(Attachment Attachment, ref bool Cancel)
        {
            if (BeforeAttachmentSave != null)
            {
                BeforeAttachmentSave(Attachment, ref Cancel);
            }
        }

        void Item_BeforeAttachmentRead(Attachment Attachment, ref bool Cancel)
        {
            if (BeforeAttachmentRead != null)
            {
                BeforeAttachmentRead(Attachment, ref Cancel);
            }
        }

        void Item_BeforeAttachmentPreview(Attachment Attachment, ref bool Cancel)
        {
            if (BeforeAttachmentPreview != null)
            {
                BeforeAttachmentPreview(Attachment, ref Cancel);
            }
        }

        void Item_BeforeAttachmentAdd(Attachment Attachment, ref bool Cancel)
        {
            if (BeforeAttachmentAdd != null)
            {
                BeforeAttachmentAdd(Attachment, ref Cancel);
            }
        }

        void Item_AttachmentRemove(Attachment Attachment)
        {
            if (AttachmentRemove != null)
            {
                AttachmentRemove(Attachment);
            }
        }

        void Item_AttachmentRead(Attachment Attachment)
        {
            if (AttachmentRead != null)
            {
                AttachmentRead(Attachment);
            }
        }

        void Item_AttachmentAdd(Attachment Attachment)
        {
            if (AttachmentAdd != null)
            {
                AttachmentAdd(Attachment);
            }
        }

        void Item_AfterWrite()
        {
            if (AfterWrite != null)
            {
                AfterWrite();
            }
        }

        #endregion

        #region Mandatory properties
        public override string Subject
        {
            get
            {
                return Item.Subject;
            }
            set
            {
                Item.Subject = value;
            }
        }

        public override string EntryID
        {
            get
            {
                return Item.EntryID;
            }
        }

        public override string MessageClass
        {
            get
            {
                return Item.MessageClass;
            }
            set
            {
                Item.MessageClass = value;
            }
        }

        public override string OutlookVersion
        {
            get
            {
                return Item.OutlookVersion;
            }
        }

        public override string Body
        {
            get
            {
                return Item.Body;
            }
            set
            {
                Item.Body = value;
            }
        }

        public override int Size
        {
            get
            {

                return Item.Size;
            }
        }

        public override DateTime CreationTime
        {
            get { return Item.CreationTime; }
        }

        public override DateTime LastModificationTime
        {
            get { return Item.LastModificationTime; }
        }

        public override Application Application
        {
            get { return Item.Application; }
        }
        #endregion

        #region override function & properties
        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Actions collection that represents
        ///     all the available actions for the item. Read-only.
        ///</summary>
        public override Actions Actions { get { return Item.Actions; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that is True if the mail message can be forwarded.
        ///     Read/write.
        ///</summary>
        public override bool AlternateRecipientAllowed { get { return Item.AlternateRecipientAllowed; } set { Item.AlternateRecipientAllowed = value; } }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Attachments object that represents
        ///     all the attachments for the specified item. Read-only.
        ///</summary>
        public override Attachments Attachments { get { return Item.Attachments; } }

        /// <summary>
        ///     A Boolean (bool in C#) value that returns True if the item was automatically
        ///     forwarded. Read/write.
        ///</summary>
        public override bool AutoForwarded { get { return Item.AutoForwarded; } set { Item.AutoForwarded = value; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that determines if the item is a winner of
        ///     an automatic conflict resolution. Read-only.
        ///</summary>
        public override bool AutoResolvedWinner { get { return Item.AutoResolvedWinner; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the display list of blind carbon
        ///     copy (BCC) names for a Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public override string BCC { get { return Item.BCC; } set { Item.BCC = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the billing information
        ///     associated with the Outlook item. Read/write.
        ///</summary>
        public override string BillingInformation { get { return Item.BillingInformation; } set { Item.BillingInformation = value; } }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlBodyFormat constant
        ///     indicating the format of the body text. Read/write.
        ///</summary>
        public override OlBodyFormat BodyFormat { get { return Item.BodyFormat; } set { Item.BodyFormat = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the categories assigned
        ///     to the Outlook item. Read/write.
        ///</summary>
        public override string Categories { get { return Item.Categories; } set { Item.Categories = value; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the display list of carbon copy
        ///     (CC) names for a Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public override string CC { get { return Item.CC; } set { Item.CC = value; } }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.OlObjectClass constant indicating
        ///     the object's class. Read-only.
        ///</summary>
        public override OlObjectClass Class { get { return Item.Class; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the names of the companies
        ///     associated with the Outlook item. Read/write.
        ///</summary>
        public override string Companies { get { return Item.Companies; } set { Item.Companies = value; } }

        /// <summary>
        ///     Return the Microsoft.Office.Interop.Outlook.Conflicts object that represents
        ///     the items that are in conflict for any Outlook item object. Read-only.
        ///</summary>
        public override Conflicts Conflicts { get { return Item.Conflicts; } }

        /// <summary>
        ///     Returns a String (string in C#) that uniquely identifies a Microsoft.Office.Interop.Outlook.Conversation
        ///     object that the Microsoft.Office.Interop.Outlook.MailItem object belongs
        ///     to. Read-only.
        ///</summary>
        public override string ConversationID { get { return Item.ConversationID; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the index of the conversation
        ///     thread of the Outlook item. Read-only.
        ///</summary>
        public override string ConversationIndex { get { return Item.ConversationIndex; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the topic of the conversation
        ///     thread of the Outlook item. Read-only.
        ///</summary>
        public override string ConversationTopic { get { return Item.ConversationTopic; } }

        /// <summary>
        ///     Returns or sets a DateTime indicating the date and time the mail message
        ///     is to be delivered. Read/write.
        ///</summary>
        public override DateTime DeferredDeliveryTime { get { return Item.DeferredDeliveryTime; } set { Item.DeferredDeliveryTime = value; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if a copy of the
        ///     mail message is not saved upon being sent, and False if a copy is saved.
        ///     Read/write.
        ///</summary>
        public override bool DeleteAfterSubmit { get { return Item.DeleteAfterSubmit; } set { Item.DeleteAfterSubmit = value; } }

        /// <summary>
        ///     Returns a constant that belongs to the Microsoft.Office.Interop.Outlook.OlDownloadState
        ///     enumeration indicating the download state of the item. Read-only.
        ///</summary>
        public override OlDownloadState DownloadState { get { return Item.DownloadState; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override bool EnableSharedAttachments { get { return Item.EnableSharedAttachments; } set { Item.EnableSharedAttachments = value; } }

        /// <summary>
        ///     Returns or sets a DateTime indicating the date and time at which the item
        ///     becomes invalid and can be deleted. Read/write.
        ///</summary>
        public override DateTime ExpiryTime { get { return Item.ExpiryTime; } set { Item.ExpiryTime = value; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override DateTime FlagDueBy { get { return Item.FlagDueBy; } set { Item.FlagDueBy = value; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override OlFlagIcon FlagIcon { get { return Item.FlagIcon; } set { Item.FlagIcon = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) that indicates the requested action
        ///     for a mail item. Read/write.
        ///</summary>
        public override string FlagRequest { get { return Item.FlagRequest; } set { Item.FlagRequest = value; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override OlFlagStatus FlagStatus { get { return Item.FlagStatus; } set { Item.FlagStatus = value; } }

        /// <summary>
        ///     Returns the Microsoft.Office.Interop.Outlook.FormDescription object that
        ///     represents the form description for the specified Outlook item. Read-only.
        ///</summary>
        public override FormDescription FormDescription { get { return Item.FormDescription; } }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.Inspector object that represents
        ///     an inspector initialized to contain the specified item. Read-only.
        ///</summary>
        public override Inspector GetInspector { get { return Item.GetInspector; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override bool HasCoverSheet { get { return Item.HasCoverSheet; } set { Item.HasCoverSheet = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the HTML body of the
        ///     specified item. Read/write.
        ///</summary>
        public override string HTMLBody { get { return Item.HTMLBody; } set { Item.HTMLBody = value; } }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlImportance constant
        ///     indicating the relative importance level for the Outlook item. Read/write.
        ///</summary>
        public override OlImportance Importance { get { return Item.Importance; } set { Item.Importance = value; } }

        /// <summary>
        ///     Returns or sets an Integer (int in C#) value that determines the Internet
        ///     code page used by the item. Read/write.
        ///</summary>
        public override int InternetCodepage { get { return Item.InternetCodepage; } set { Item.InternetCodepage = value; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that determines if the item is in conflict.
        ///     Read-only.
        ///</summary>
        public override bool IsConflict { get { return Item.IsConflict; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override bool IsIPFax { get { return Item.IsIPFax; } set { Item.IsIPFax = value; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that indicates whether the Microsoft.Office.Interop.Outlook.MailItem
        ///     is marked as a task. Read-only.
        ///</summary>
        public override bool IsMarkedAsTask { get { return Item.IsMarkedAsTask; } }

        /// <summary>
        ///     Returns an Microsoft.Office.Interop.Outlook.ItemProperties collection that
        ///     represents all standard and user-defined properties associated with the Outlook
        ///     item. Read-only.
        ///</summary>
        public override ItemProperties ItemProperties { get { return Item.ItemProperties; } }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.Links collection that represents
        ///     the contacts to which the item is linked. Read-only.
        ///</summary>
        public override Links Links { get { return Item.Links; } }

        /// <summary>
        ///     This object, member, or enumeration is deprecated and is not intended to
        ///     be used in your code.
        ///</summary>
        public override dynamic MAPIOBJECT { get { return Item.MAPIOBJECT; } }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlRemoteStatus constant
        ///     that determines the status of an item once it is received by a remote user.
        ///     Read/write.
        ///</summary>
        public override OlRemoteStatus MarkForDownload { get { return Item.MarkForDownload; } set { Item.MarkForDownload = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) representing the mileage for an item.
        ///     Read/write.
        ///</summary>
        public override string Mileage { get { return Item.Mileage; } set { Item.Mileage = value; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True to not age the
        ///     Outlook item. Read/write.
        ///</summary>
        public override bool NoAging { get { return Item.NoAging; } set { Item.NoAging = value; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that determines whether the
        ///     originator of the meeting item or mail message will receive a delivery report.
        ///     Read/write.
        ///</summary>
        public override bool OriginatorDeliveryReportRequested { get { return Item.OriginatorDeliveryReportRequested; } set { Item.OriginatorDeliveryReportRequested = value; } }

        /// <summary>
        ///     Returns an Integer (int in C#) value representing the build number of the
        ///     Outlook application for an Outlook item. Read-only.
        ///</summary>
        public override int OutlookInternalVersion { get { return Item.OutlookInternalVersion; } }

        /// <summary>
        ///     Returns the parent Object of the specified object. Read-only.
        ///</summary>
        public override dynamic Parent { get { return Item.Parent; } }

        /// <summary>
        ///     Sets or returns an Microsoft.Office.Interop.Outlook.OlPermission constant
        ///     that determines the permissions the recipients will have on the e-mail item.
        ///     Read/write.
        ///</summary>
        public override OlPermission Permission { get { return Item.Permission; } set { Item.Permission = value; } }

        /// <summary>
        ///     Sets or returns an Microsoft.Office.Interop.Outlook.OlPermissionService constant
        ///     that determines the permission service that will be used when sending a message
        ///     protected by Information Rights Management (IRM). Read/write.
        ///</summary>
        public override OlPermissionService PermissionService { get { return Item.PermissionService; } set { Item.PermissionService = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) value that represents the GUID of
        ///     the template file to apply to the Microsoft.Office.Interop.Outlook.MailItem
        ///     in order to specify Information Rights Management (IRM) permissions. Read/write.
        ///</summary>
        public override string PermissionTemplateGuid { get { return Item.PermissionTemplateGuid; } set { Item.PermissionTemplateGuid = value; } }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.PropertyAccessor object that supports
        ///     creating, getting, setting, and deleting properties of the parent Microsoft.Office.Interop.Outlook.MailItem
        ///     object. Read-only.
        ///</summary>
        public override PropertyAccessor PropertyAccessor { get { return Item.PropertyAccessor; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that indicates True if a read receipt
        ///     has been requested by the sender.
        ///</summary>
        public override bool ReadReceiptRequested { get { return Item.ReadReceiptRequested; } set { Item.ReadReceiptRequested = value; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the Microsoft.Office.Interop.Outlook.Recipient.EntryID
        ///     for the true recipient as set by the transport provider delivering the mail
        ///     message. Read-only.
        ///</summary>
        public override string ReceivedByEntryID { get { return Item.ReceivedByEntryID; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the true
        ///     recipient for the mail message. Read-only.
        ///</summary>
        public override string ReceivedByName { get { return Item.ReceivedByName; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the Microsoft.Office.Interop.Outlook.Recipient.EntryID
        ///     of the user delegated to represent the recipient for the mail message. Read-only.
        ///</summary>
        public override string ReceivedOnBehalfOfEntryID { get { return Item.ReceivedOnBehalfOfEntryID; } }

        /// <summary>
        ///     Returns a String (string in C#) representing the display name of the user
        ///     delegated to represent the recipient for the mail message. Read-only.
        ///</summary>
        public override string ReceivedOnBehalfOfName { get { return Item.ReceivedOnBehalfOfName; } }

        /// <summary>
        ///     Returns a DateTime indicating the date and time at which the item was received.
        ///     Read-only.
        ///</summary>
        public override DateTime ReceivedTime { get { return Item.ReceivedTime; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) that indicates True if the recipient cannot
        ///     forward the mail message. Read/write.
        ///</summary>
        public override bool RecipientReassignmentProhibited { get { return Item.RecipientReassignmentProhibited; } set { Item.RecipientReassignmentProhibited = value; } }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.Recipients collection that represents
        ///     all the recipients for the Outlook item. Read-only.
        ///</summary>
        public override Recipients Recipients { get { return Item.Recipients; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if the reminder
        ///     overrides the default reminder behavior for the item. Read/write.
        ///</summary>
        public override bool ReminderOverrideDefault { get { return Item.ReminderOverrideDefault; } set { Item.ReminderOverrideDefault = value; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if the reminder
        ///     should play a sound when it occurs for this item. Read/write.
        ///</summary>
        public override bool ReminderPlaySound { get { return Item.ReminderPlaySound; } set { Item.ReminderPlaySound = value; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if a reminder has
        ///     been set for this item. Read/write.
        ///</summary>
        public override bool ReminderSet { get { return Item.ReminderSet; } set { Item.ReminderSet = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) indicating the path and file name
        ///     of the sound file to play when the reminder occurs for the Outlook item.
        ///     Read/write.
        ///</summary>
        public override string ReminderSoundFile { get { return Item.ReminderSoundFile; } set { Item.ReminderSoundFile = value; } }

        /// <summary>
        ///     Returns or sets a DateTime indicating the date and time at which the reminder
        ///     should occur for the specified item. Read/write.
        ///</summary>
        public override DateTime ReminderTime { get { return Item.ReminderTime; } set { Item.ReminderTime = value; } }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlRemoteStatus constant
        ///     specifying the remote status of the mail message. Read/write.
        ///</summary>
        public override OlRemoteStatus RemoteStatus { get { return Item.RemoteStatus; } set { Item.RemoteStatus = value; } }

        /// <summary>
        ///     Returns a semicolon-delimited String (string in C#) list of reply recipients
        ///     for the mail message. Read-only.
        ///</summary>
        public override string ReplyRecipientNames { get { return Item.ReplyRecipientNames; } }

        /// <summary>
        ///     Returns a Microsoft.Office.Interop.Outlook.Recipients collection that represents
        ///     all the reply recipient objects for the Outlook item. Read-only.
        ///</summary>
        public override Recipients ReplyRecipients { get { return Item.ReplyRecipients; } }

        /// <summary>
        ///     Returns a System.DateTime value that specifies the date when the Microsoft.Office.Interop.Outlook.MailItem
        ///     object expires, after which the Messaging Records Management (MRM) Assistant
        ///     will delete the item. Read-only.
        ///</summary>
        public override DateTime RetentionExpirationDate { get { return Item.RetentionExpirationDate; } }

        /// <summary>
        ///     Returns a String (string in C#) that specifies the name of the retention
        ///     policy. Read-only.
        ///</summary>
        public override string RetentionPolicyName { get { return Item.RetentionPolicyName; } }

        /// <summary>
        ///     Returns or sets a byte array that represents the body of the Microsoft Outlook
        ///     item in Rich Text Format. Read/write.
        ///</summary>
        public override dynamic RTFBody { get { return Item.RTFBody; } set { Item.RTFBody = value; } }

        ///<summary>
        ///     Returns a Boolean (bool in C#) value that is True if the Outlook item has
        ///     not been modified since the last save. Read-only.
        ///</summary>
        public override bool Saved { get { return Item.Saved; } }

        /// <summary>
        ///     Returns or sets a Microsoft.Office.Interop.Outlook.Folder object that represents
        ///     the folder in which a copy of the e-mail message will be saved after being
        ///     sent. Read/write.
        ///</summary>
        public override MAPIFolder SaveSentMessageFolder { get { return Item.SaveSentMessageFolder; } set { Item.SaveSentMessageFolder = value; } }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.AddressEntry object that
        ///     corresponds to the user of the account from which the Microsoft.Office.Interop.Outlook.MailItem
        ///     is sent. Read/write.
        ///</summary>
        public override AddressEntry Sender { get { return Item.Sender; } set { Item.Sender = value; } }

        /// <summary>
        ///     Returns a String (string in C#) that represents the e-mail address of the
        ///     sender of the Outlook item. Read-only.
        ///</summary>
        public override string SenderEmailAddress { get { return Item.SenderEmailAddress; } }

        /// <summary>
        ///     Returns a String (string in C#) that represents the type of entry for the
        ///     e-mail address of the sender of the Outlook item, such as 'SMTP' for Internet
        ///     address, 'EX' for a Microsoft Exchange server address, etc. Read-only.
        ///</summary>
        public override string SenderEmailType { get { return Item.SenderEmailType; } }

        /// <summary>
        ///     Returns a String (string in C#) indicating the display name of the sender
        ///     for the Outlook item. Read-only.
        ///</summary>
        public override string SenderName { get { return Item.SenderName; } }

        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.Account object that represents
        ///     the account under which the Microsoft.Office.Interop.Outlook.MailItem is
        ///     to be sent. Read/write.
        ///</summary>
        public override Account SendUsingAccount { get { return Item.SendUsingAccount; } set { Item.SendUsingAccount = value; } }

        /// <summary>
        ///     Returns or sets a constant in the Microsoft.Office.Interop.Outlook.OlSensitivity
        ///     enumeration indicating the sensitivity for the Outlook item. Read/write.
        ///</summary>
        public override OlSensitivity Sensitivity { get { return Item.Sensitivity; } set { Item.Sensitivity = value; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that indicates if a message has been
        ///     sent. Read-only.
        ///</summary>
        public override bool Sent { get { return Item.Sent; } }

        /// <summary>
        ///     Returns a DateTime indicating the date and time on which the Outlook item
        ///     was sent. Read-only.
        ///</summary>
        public override DateTime SentOn { get { return Item.SentOn; } }

        /// <summary>
        ///     Returns a String (string in C#) indicating the display name for the intended
        ///     sender of the mail message. Read/write.
        ///</summary>
        public override string SentOnBehalfOfName { get { return Item.SentOnBehalfOfName; } set { Item.SentOnBehalfOfName = value; } }

        /// <summary>
        ///     Returns the Microsoft.Office.Interop.Outlook.NameSpace object for the current
        ///     session. Read-only.
        ///</summary>
        public override NameSpace Session { get { return Item.Session; } }

        /// <summary>
        ///     Returns a Boolean (bool in C#) value that is True if the item has been submitted.
        ///     Read-only.
        ///</summary>

        public override bool Submitted { get { return Item.Submitted; } }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the completion date of the
        ///     task for this Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public override DateTime TaskCompletedDate { get { return Item.TaskCompletedDate; } set { Item.TaskCompletedDate = value; } }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the due date of the task
        ///     for this Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public override DateTime TaskDueDate { get { return Item.TaskDueDate; } set { Item.TaskDueDate = value; } }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the start date of the task
        ///     for this Microsoft.Office.Interop.Outlook.MailItem object. Read/write.
        ///</summary>
        public override DateTime TaskStartDate { get { return Item.TaskStartDate; } set { Item.TaskStartDate = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) value that represents the subject
        ///     of the task for the Microsoft.Office.Interop.Outlook.MailItem object. Read/write.
        ///</summary>
        public override string TaskSubject { get { return Item.TaskSubject; } set { Item.TaskSubject = value; } }

        /// <summary>
        ///     Returns or sets a semicolon-delimited String (string in C#) list of display
        ///     names for the To recipients for the Outlook item. Read/write.
        ///</summary>
        public override string To { get { return Item.To; } set { Item.To = value; } }

        /// <summary>
        ///     Returns or sets a DateTime value that represents the ordinal value of the
        ///     task for the Microsoft.Office.Interop.Outlook.MailItem. Read/write.
        ///</summary>
        public override DateTime ToDoTaskOrdinal { get { return Item.ToDoTaskOrdinal; } set { Item.ToDoTaskOrdinal = value; } }

        /// <summary>
        ///     Returns or sets a Boolean (bool in C#) value that is True if the Outlook
        ///     item has not been opened (read). Read/write.
        ///</summary>
        public override bool UnRead { get { return Item.UnRead; } set { Item.UnRead = value; } }

        /// <summary>
        ///     Returns the Microsoft.Office.Interop.Outlook.UserProperties collection that
        ///     represents all the user properties for the Outlook item. Read-only.
        ///</summary>
        public override UserProperties UserProperties { get { return Item.UserProperties; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying a delimited string containing
        ///     the voting options for the mail message. Read/write.
        ///</summary>
        public override string VotingOptions { get { return Item.VotingOptions; } set { Item.VotingOptions = value; } }

        /// <summary>
        ///     Returns or sets a String (string in C#) specifying the voting response for
        ///     the mail message. Read/write.
        ///</summary>
        public override string VotingResponse { get { return Item.VotingResponse; } set { Item.VotingResponse = value; } }

        /// <summary>
        ///     Appends contact information based on the Electronic Business Card (EBC) associated
        ///     with the specified Microsoft.Office.Interop.Outlook.ContactItem object to
        ///     the Microsoft.Office.Interop.Outlook.MailItem object.
        /// Parameters:
        ///   contact:
        ///     The contact item from which to obtain the business card information.
        ///</summary>
        public override void AddBusinessCard(ContactItem contact) { Item.AddBusinessCard(contact); }

        /// <summary>
        ///     Clears the index of the conversation thread for the mail message.
        ///</summary>
        public override void ClearConversationIndex() { Item.ClearConversationIndex(); }

        /// <summary>
        ///     Clears the Microsoft.Office.Interop.Outlook.MailItem object as a task.
        ///</summary>
        public override void ClearTaskFlag() { Item.ClearTaskFlag(); }

        /// <summary>
        ///     Closes and optionally saves changes to the Outlook item.
        /// Parameters:
        ///   SaveMode:
        ///     The close behavior. If the item displayed within the inspector has not been
        ///     changed, this argument has no effect.
        ///</summary>
        public override void Close(OlInspectorClose SaveMode) { ((Outlook._MailItem)Item).Close(SaveMode); }

        /// <summary>
        ///     Creates another instance of an object.
        /// Returns:
        ///     Returns an System.Object that is a copy of the parent Microsoft.Office.Interop.Outlook.MailItem
        ///     object.
        ///</summary>
        public override dynamic Copy() { return Item.Copy(); }

        /// <summary>
        ///     Deletes an object from the collection.
        ///</summary>
        public override void Delete() { Item.Delete(); }

        /// <summary>
        ///     Displays a new Microsoft.Office.Interop.Outlook.Inspector object for the
        ///     item.
        /// Parameters:
        ///   Modal:
        ///     True to make the window modal. The default value is False.
        ///</summary>
        public override void Display(object Modal = null) { Item.Display(); }

        ///// <summary>
        /////     Executes the Forward action for an item and returns the resulting copy as
        /////     a Microsoft.Office.Interop.Outlook.MailItem object.
        ///// Returns:
        /////     A MailItem object that represents the new mail item.
        /////</summary>
        //public override OutlookMessageItemWrapper Forward() { return OutlookMessageItemFactory.GetMessageItem(((Outlook._MailItem)Item).Forward()); }

        /// <summary>
        ///     Obtains a Microsoft.Office.Interop.Outlook.Conversation object that represents
        ///     the conversation to which this item belongs.
        /// Returns:
        ///     Returns a Conversation object that represents the conversation to which this
        ///     item belongs.
        ///</summary>
        public override Conversation GetConversation() { return Item.GetConversation(); }

        /// <summary>
        ///     Marks a Microsoft.Office.Interop.Outlook.MailItem object as a task and assigns
        ///     a task interval for the object.
        /// Parameters:
        ///   MarkInterval:
        ///     The task interval for the MailItem.
        ///</summary>
        public override void MarkAsTask(OlMarkInterval MarkInterval) { Item.MarkAsTask(MarkInterval); }

        /// <summary>
        ///     Moves a Microsoft Outlook item to a new folder.
        /// Parameters:
        ///   DestFldr:
        ///     An expression that returns a Folder object. The destination folder.
        /// Returns:
        ///     An Object value that represents the item which has been moved to the designated
        ///     folder.
        ///</summary>
        public override dynamic Move(MAPIFolder DestFldr) { return Item.Move(DestFldr); }

        /// <summary>
        ///     Prints the Outlook item using all default settings. The PrintOut method is
        ///     the only Outlook method that can be used for printing.
        ///</summary>
        public override void PrintOut() { Item.PrintOut(); }

        ///// <summary>
        /////     Creates a reply, pre-addressed to the original sender, from the original
        /////     message.
        ///// Returns:
        /////     A Microsoft.Office.Interop.Outlook.MailItem object that represents the reply.
        /////</summary>
        //public override OutlookMessageItemWrapper Reply() { return OutlookMessageItemFactory.GetMessageItem(Item.Reply()); }

        ///// <summary>
        /////     Creates a reply to all original recipients from the original message.
        ///// Returns:
        /////     A Microsoft.Office.Interop.Outlook.MailItem object that represents the reply.
        /////</summary>
        //public override OutlookMessageItemWrapper ReplyAll() { return OutlookMessageItemFactory.GetMessageItem(((Outlook._MailItem)Item).ReplyAll()); }

        /// <summary>
        ///     Saves the Microsoft Outlook item to the current folder or, if this is a new
        ///     item, to the Outlook default folder for the item type.
        ///</summary>
        public override void Save() { Item.Save(); }

        /// <summary>
        ///     Saves the Microsoft Outlook item to the specified path and in the format
        ///     of the specified file type. If the file type is not specified, the MSG format
        ///     (.msg) is used.
        /// Parameters:
        ///   Path:
        ///     The path in which to save the item.
        ///   Type:
        ///     The file type to save. Can be one of the following OlSaveAsType constants:
        ///     olHTML, olMSG, olRTF, olTemplate, olDoc,olTXT, olVCal, olVCard, olICal, or
        ///     olMSGUnicode.
        ///</summary>
        public override void SaveAs(string Path, object Type = null) { Item.SaveAs(Path, Type); }

        /// <summary>
        ///     Sends the e-mail message.
        ///</summary>
        public override void Send() { ((Outlook._MailItem)Item).Send(); }

        /// <summary>
        ///     Displays the Show Categories dialog box, which allows you to select categories
        ///     that correspond to the subject of the item.
        ///</summary>
        public override void ShowCategoriesDialog() { Item.ShowCategoriesDialog(); }

        #endregion

        /// <summary>
        /// Registers all outlook item events
        /// </summary>
        private void RegisterEvents()
        {
            Item.AfterWrite += new ItemEvents_10_AfterWriteEventHandler(Item_AfterWrite);
            Item.AttachmentAdd += new ItemEvents_10_AttachmentAddEventHandler(Item_AttachmentAdd);
            Item.AttachmentRead += new ItemEvents_10_AttachmentReadEventHandler(Item_AttachmentRead);
            Item.AttachmentRemove += new ItemEvents_10_AttachmentRemoveEventHandler(Item_AttachmentRemove);
            Item.BeforeAttachmentAdd += new ItemEvents_10_BeforeAttachmentAddEventHandler(Item_BeforeAttachmentAdd);
            Item.BeforeAttachmentPreview += new ItemEvents_10_BeforeAttachmentPreviewEventHandler(Item_BeforeAttachmentPreview);
            Item.BeforeAttachmentRead += new ItemEvents_10_BeforeAttachmentReadEventHandler(Item_BeforeAttachmentRead);
            Item.BeforeAttachmentSave += new ItemEvents_10_BeforeAttachmentSaveEventHandler(Item_BeforeAttachmentSave);
            Item.BeforeAttachmentWriteToTempFile += new ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler(Item_BeforeAttachmentWriteToTempFile);
            Item.BeforeAutoSave += new ItemEvents_10_BeforeAutoSaveEventHandler(Item_BeforeAutoSave);
            Item.BeforeCheckNames += new ItemEvents_10_BeforeCheckNamesEventHandler(Item_BeforeCheckNames);
            Item.BeforeDelete += new ItemEvents_10_BeforeDeleteEventHandler(Item_BeforeDelete);
            Item.BeforeRead += new ItemEvents_10_BeforeReadEventHandler(Item_BeforeRead);
            Item.CustomAction += new ItemEvents_10_CustomActionEventHandler(Item_CustomAction);
            Item.CustomPropertyChange += new ItemEvents_10_CustomPropertyChangeEventHandler(Item_CustomPropertyChange);
            Item.Open += new ItemEvents_10_OpenEventHandler(Item_Open);
            Item.PropertyChange += new ItemEvents_10_PropertyChangeEventHandler(Item_PropertyChange);
            Item.Read += new ItemEvents_10_ReadEventHandler(Item_Read);
            Item.Unload += new ItemEvents_10_UnloadEventHandler(Item_Unload);
            Item.Write += new ItemEvents_10_WriteEventHandler(Item_Write);
        }

        /// <summary>
        /// Un-registers all outlook item events
        /// </summary>
        private void UnRegisterEvents()
        {
            Item.AfterWrite -= new ItemEvents_10_AfterWriteEventHandler(Item_AfterWrite);
            Item.AttachmentAdd -= new ItemEvents_10_AttachmentAddEventHandler(Item_AttachmentAdd);
            Item.AttachmentRead -= new ItemEvents_10_AttachmentReadEventHandler(Item_AttachmentRead);
            Item.AttachmentRemove -= new ItemEvents_10_AttachmentRemoveEventHandler(Item_AttachmentRemove);
            Item.BeforeAttachmentAdd -= new ItemEvents_10_BeforeAttachmentAddEventHandler(Item_BeforeAttachmentAdd);
            Item.BeforeAttachmentPreview -= new ItemEvents_10_BeforeAttachmentPreviewEventHandler(Item_BeforeAttachmentPreview);
            Item.BeforeAttachmentRead -= new ItemEvents_10_BeforeAttachmentReadEventHandler(Item_BeforeAttachmentRead);
            Item.BeforeAttachmentSave -= new ItemEvents_10_BeforeAttachmentSaveEventHandler(Item_BeforeAttachmentSave);
            Item.BeforeAttachmentWriteToTempFile -= new ItemEvents_10_BeforeAttachmentWriteToTempFileEventHandler(Item_BeforeAttachmentWriteToTempFile);
            Item.BeforeAutoSave -= new ItemEvents_10_BeforeAutoSaveEventHandler(Item_BeforeAutoSave);
            Item.BeforeCheckNames -= new ItemEvents_10_BeforeCheckNamesEventHandler(Item_BeforeCheckNames);
            Item.BeforeDelete -= new ItemEvents_10_BeforeDeleteEventHandler(Item_BeforeDelete);
            Item.BeforeRead -= new ItemEvents_10_BeforeReadEventHandler(Item_BeforeRead);
            Item.CustomAction -= new ItemEvents_10_CustomActionEventHandler(Item_CustomAction);
            Item.CustomPropertyChange -= new ItemEvents_10_CustomPropertyChangeEventHandler(Item_CustomPropertyChange);
            Item.Open -= new ItemEvents_10_OpenEventHandler(Item_Open);
            Item.PropertyChange -= new ItemEvents_10_PropertyChangeEventHandler(Item_PropertyChange);
            Item.Read -= new ItemEvents_10_ReadEventHandler(Item_Read);
            Item.Unload -= new ItemEvents_10_UnloadEventHandler(Item_Unload);
            Item.Write -= new ItemEvents_10_WriteEventHandler(Item_Write);
        }

        /// <summary>
        /// Disposes the Outlook Mail item object
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // Dispose managed resources
            }

            UnRegisterEvents();

            // Dispose unmanaged resources
            base.Dispose(disposing);

            Marshal.ReleaseComObject(Item);
            Item = null;
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="ScriptMain.cs"
                Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Threading;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Linq;
using Outlook = Microsoft.Office.Interop.Outlook;
#endregion

namespace ST_4c0aca6d1a0244e08f52e44ac66583bc
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion

        // Path where attachments will be saved
        static string basePath = "";
        static int totalfilesize = 0;
        static int fileCount = 0;


        /// <summary>
        ///     Returns or sets an Microsoft.Office.Interop.Outlook.OlRemoteStatus constant
        ///     that determines the status of an item once it is received by a remote user.
        ///     Read/write.
        ///</summary>
      

        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
           
            try
            {

                // Path where attachments will be saved
                basePath = Dts.Variables["Path"].Value.ToString();
                System.Threading.Thread.Sleep(10000);
                EnumerateFoldersInDefaultStore();

                    
            }
            catch (Exception ex)
            {
                Dts.TaskResult = (int)ScriptResults.Failure;
                throw ex;
            }
            // TODO: Add your code here
            Dts.TaskResult = (int)ScriptResults.Success;

            
        }

        static void EnumerateFoldersInDefaultStore()
        {
            Outlook.Application Application = new Outlook.Application();
            Outlook.Folders folders = Application.Session.Folders;
            foreach (Outlook.Folder item in folders)
            {
                //Outlook.Folder root = Application.Session.DefaultStore.GetRootFolder() as Outlook.Folder;
                EnumerateFolders(item);
            }
        }

        // Uses recursion to enumerate Outlook subfolders.
        static void EnumerateFolders(Outlook.Folder folder)
        {
            Outlook.Folders childFolders = folder.Folders;
            if (childFolders.Count > 0)
            {
                foreach (Outlook.Folder childFolder in childFolders)
                {
                    // We only want Inbox folders - ignore Contacts and others
                    if (childFolder.FolderPath.Contains("Data Dev" + "\\" + "Inbox"))
                    {
                        // Write the folder path.
                        Console.WriteLine(childFolder.FolderPath);
                        // Call EnumerateFolders using childFolder, to see if there are any sub-folders within this one
                        //EnumerateFolders(childFolder);
                        Outlook.Folders cFolders = childFolder.Folders;
                        if (cFolders.Count <= 0)
                        {
                            Console.WriteLine("Checking in " + childFolder.FolderPath);
                            IterateMessages(childFolder);
                        }

                    }
                }
            }

        }

        static void IterateMessages(Outlook.Folder folder)
        {
           

            // attachment extensions to save
            string[] extensionsArray = { ".pdf", ".doc", ".xls", ".ppt", ".vsd", ".zip", ".rar", ".txt", ".csv", ".proj" };

            // Iterate through all items ("messages") in a folder
            var fi = folder.Items;
            if (fi != null)
            {

                try
                {
                    foreach (Object item in fi)
                    {
                        Outlook.MailItem newItem = (Outlook.MailItem)item;

                        
                        Outlook.MailItem mi = (Outlook.MailItem)item;
                        var attachments = mi.Attachments;
                        if (attachments.Count != 0)
                        {

                            // Create a directory to store the attachment 
                            if (!Directory.Exists(basePath))
                            {
                                Directory.CreateDirectory(basePath);
                            }

                            //Console.WriteLine(mi.Sender.Address);
                            //Console.WriteLine(mi.Subject + " [" + attachments.Count + "]");
                            //Console.WriteLine(generateFolder(folder.FolderPath, mi.Sender.Address));
                            for (int i = 1; i <= mi.Attachments.Count; i++)
                            {
                                fileCount = fileCount + 1;
                                var fn = mi.Attachments[i].FileName.ToLower();
                                //check wither any of the strings in the extensionsArray are contained within the filename
                                if (extensionsArray.Any(fn.Contains))
                                {

                                    // Create a further sub-folder for the sender
                                    if (!Directory.Exists(basePath))
                                    {
                                        Directory.CreateDirectory(basePath);
                                    }
                                    totalfilesize = totalfilesize + mi.Attachments[i].Size;
                                    if (!File.Exists(basePath + @"\" + mi.Attachments[i].FileName))
                                    {
                                      
                                        //newItem.FlagIcon = Outlook.OlFlagIcon.olYellowFlagIcon;
                                        //newItem.Save();

                                        Console.WriteLine("Saving " + mi.Attachments[i].FileName);
                                        mi.Attachments[i].SaveAsFile(basePath + @"\" + mi.Attachments[i].FileName);
                                        mi.Attachments[i].Delete();
                                        mi.Save();

                                                                               
                                    }
                                    else
                                    {
                                        Console.WriteLine("Already saved " + mi.Attachments[i].FileName);
                                    }
                                }
                            }
                        }
                   
                    }
                }
                catch (Exception e)
                {
                    //Console.WriteLine("An error occurred: '{0}'", e);
                }
            }
        }

        // Retrieves the email address for a given account object
        static string EnumerateAccountEmailAddress(Outlook.Account account)
        {
            try
            {
                if (string.IsNullOrEmpty(account.SmtpAddress) || string.IsNullOrEmpty(account.UserName))
                {
                    Outlook.AddressEntry oAE = account.CurrentUser.AddressEntry as Outlook.AddressEntry;
                    if (oAE.Type == "EX")
                    {
                        Outlook.ExchangeUser oEU = oAE.GetExchangeUser() as Outlook.ExchangeUser;
                        return oEU.PrimarySmtpAddress;
                    }
                    else
                    {
                        return oAE.Address;
                    }
                }
                else
                {
                    return account.SmtpAddress;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return "";
            }
        }

        static void EnumerateAccounts()
        {
            Console.Clear();
            Console.WriteLine("Outlook Attachment Extractor v0.1");
            Console.WriteLine("---------------------------------");
            int id;
            Outlook.Application Application = new Outlook.Application();
            Outlook.Accounts accounts = Application.Session.Accounts;

            string response = "";
            while (true == true)
            {

                id = 1;
                foreach (Outlook.Account account in accounts)
                {
                    Console.WriteLine(id + ":" + EnumerateAccountEmailAddress(account));
                    id++;
                }
                Console.WriteLine("Q: Quit Application");

                response = Console.ReadLine().ToUpper();
                if (response == "Q")
                {
                    Console.WriteLine("Quitting");
                    return;
                }
                if (response != "")
                {
                    if (Int32.Parse(response.Trim()) >= 1 && Int32.Parse(response.Trim()) < id)
                    {
                        Console.WriteLine("Processing: " + accounts[Int32.Parse(response.Trim())].DisplayName);
                        Console.WriteLine("Processing: " + EnumerateAccountEmailAddress(accounts[Int32.Parse(response.Trim())]));

                        Outlook.Folder selectedFolder = Application.Session.DefaultStore.GetRootFolder() as Outlook.Folder;
                        selectedFolder = GetFolder(@"\\" + accounts[Int32.Parse(response.Trim())].DisplayName);
                        EnumerateFolders(selectedFolder);
                        Console.WriteLine("Finished Processing " + accounts[Int32.Parse(response.Trim())].DisplayName);
                        Console.WriteLine("");
                    }
                    else
                    {
                        Console.WriteLine("Invalid Account Selected");
                    }
                }
            }

        }

        // Returns Folder object based on folder path
        static Outlook.Folder GetFolder(string folderPath)
        {
            Console.WriteLine("Looking for: " + folderPath);
            Outlook.Folder folder;
            string backslash = @"\";
            try
            {
                if (folderPath.StartsWith(@"\\"))
                {
                    folderPath = folderPath.Remove(0, 2);
                }
                String[] folders = folderPath.Split(backslash.ToCharArray());
                Outlook.Application Application = new Outlook.Application();
                folder = Application.Session.Folders[folders[0]] as Outlook.Folder;
                if (folder != null)
                {
                    for (int i = 1; i <= folders.GetUpperBound(0); i++)
                    {
                        Outlook.Folders subFolders = folder.Folders;
                        folder = subFolders[folders[i]] as Outlook.Folder;
                        if (folder == null)
                        {
                            return null;
                        }
                    }
                }
                return folder;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return null;
            }
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
              <ProjectItem
                Name="ST_7a9272c61d084c2d888d95fe8431aa20.csproj"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{D5D0709E-1093-4BE2-BCAF-47CED7AC5720}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_4c0aca6d1a0244e08f52e44ac66583bc</RootNamespace>
    <AssemblyName>ST_7a9272c61d084c2d888d95fe8431aa20</AssemblyName>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="Microsoft.Office.Interop.Outlook, Version=15.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c, processorArchitecture=MSIL">
      <EmbedInteropTypes>True</EmbedInteropTypes>
      <HintPath>C:\Users\apatel\AppData\Local\Temp\Vsta\SSIS_ST130\Vstabqv8uSpjtkGYSLK_uO8AIg\packages\Microsoft.Office.Interop.Outlook.15.0.4797.1003\lib\net20\Microsoft.Office.Interop.Outlook.dll</HintPath>
      <Private>True</Private>
    </Reference>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=11.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="OutlookMailItem.cs" />
    <Compile Include="OutlookMessageWrapper.cs" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="packages.config" />
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST110</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
              <ProjectItem
                Name="Project"
                Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:CodeName>ST_7a9272c61d084c2d888d95fe8431aa20</msb:CodeName>
		<msb:Language>msBuild</msb:Language>
		<msb:DisplayName>ST_7a9272c61d084c2d888d95fe8431aa20</msb:DisplayName>
		<msb:ProjectId>{80490FC4-BB2B-4BB1-86B6-540D65176830}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="ST_7a9272c61d084c2d888d95fe8431aa20.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="OutlookMailItem.cs"/>
		<msb:File Include="OutlookMessageWrapper.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="packages.config"/>
		<msb:File Include="ScriptMain.cs"/>
	</msb:ItemGroup>
</c:Project>]]></ProjectItem>
              <ProjectItem
                Name="packages.config"
                Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<packages>
  <package id="Microsoft.Office.Interop.Outlook" version="15.0.4797.1003" targetFramework="net45" />
</packages>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties.Settings.get_Default():ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties.Sett" +
    "ings")]

namespace ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
              <ProjectItem
                Name="Properties\Settings.settings"
                Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
              <ProjectItem
                Name="Properties\Resources.Designer.cs"
                Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_4c0aca6d1a0244e08f52e44ac66583bc.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
              <BinaryItem
                Name="ST_7a9272c61d084c2d888d95fe8431aa20.dll">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
AgwCfBQAAAQIBygTAAArCgYHM98qAAAAEzADACkAAAAUAAARAnsVAAAECgYLBwMoGgAACnQ0AAAC
DAJ8FQAABAgHKBQAACsKBgcz3yoAAAATMAMAKQAAABQAABECexUAAAQKBgsHAygcAAAKdDQAAAIM
AnwVAAAECAcoFAAAKwoGBzPfKlYCexQAAAQsDAJ7FAAABANv9wMABipSAnsTAAAELAsCexMAAARv
9QMABipSAnsVAAAELAsCexUAAARv7QMABipWAnsSAAAELAwCexIAAAQDb+sDAAYqVgJ7EQAABCwM
AnsRAAAEA2/pAwAGKlYCexAAAAQsDAJ7EAAABANvuwMABipeAnsPAAAELA4Cew8AAAQDBAVvuQMA
BipSAnsOAAAELAsCew4AAARvtQMABipaAnsNAAAELA0Cew0AAAQDBG+zAwAGKlYCewwAAAQsDAJ7
DAAABANvsQMABipWAnsLAAAELAwCewsAAAQDb68DAAYqWgJ7CgAABCwNAnsKAAAEAwRvrQMABipa
AnsJAAAELA0CewkAAAQDBG+rAwAGKloCewgAAAQsDQJ7CAAABAMEb6kDAAYqWgJ7BwAABCwNAnsH
AAAEAwRvpwMABipaAnsGAAAELA0CewYAAAQDBG+lAwAGKlYCewUAAAQsDAJ7BQAABANvowMABipW
AnsEAAAELAwCewQAAAQDb6EDAAYqVgJ7AwAABCwMAnsDAAAEA2+fAwAGKlICewIAAAQsCwJ7AgAA
BG+dAwAGKjICKAEAAAZvMwQABio2AigBAAAGA280BAAGKjICKAEAAAZvIAQABioyAigBAAAGbycE
AAYqNgIoAQAABgNvKAQABioyAigBAAAGby4EAAYqMgIoAQAABm8XBAAGKjYCKAEAAAYDbxgEAAYq
MgIoAQAABm8yBAAGKjICKAEAAAZvHwQABioyAigBAAAGbyUEAAYqMgIoAQAABm8PBAAGKjICKAEA
AAZvEwQABioyAigBAAAGb0AEAAYqNgIoAQAABgNvQQQABioyAigBAAAGbxQEAAYqMgIoAQAABm9C
BAAGKjYCKAEAAAYDb0MEAAYqMgIoAQAABm+SBAAGKjICKAEAAAZvRAQABio2AigBAAAGA29FBAAG
KjICKAEAAAZvFQQABio2AigBAAAGA28WBAAGKjICKAEAAAZvgwQABio2AigBAAAGA2+EBAAGKjIC
KAEAAAZvGQQABio2AigBAAAGA28aBAAGKjICKAEAAAZvRgQABio2AigBAAAGA29HBAAGKjICKAEA
AAZvEAQABioyAigBAAAGbxsEAAYqNgIoAQAABgNvHAQABioyAigBAAAGb5MEAAYqMgIoAQAABm+u
BAAGKjICKAEAAAZvHQQABioyAigBAAAGbx4EAAYqMgIoAQAABm9IBAAGKjYCKAEAAAYDb0kEAAYq
MgIoAQAABm9KBAAGKjYCKAEAAAYDb0sEAAYqMgIoAQAABm+FBAAGKjICKAEAAAZvlgQABio2AigB
AAAGA2+XBAAGKjICKAEAAAZvTAQABio2AigBAAAGA29NBAAGKjICKAEAAAZvTgQABio2AigBAAAG
A29PBAAGKjICKAEAAAZvjgQABio2AigBAAAGA2+PBAAGKjICKAEAAAZvUAQABio2AigBAAAGA29R
BAAGKjICKAEAAAZvUgQABio2AigBAAAGA29TBAAGKjICKAEAAAZvIQQABioyAigBAAAGbyIEAAYq
MgIoAQAABm+QBAAGKjYCKAEAAAYDb5EEAAYqMgIoAQAABm9UBAAGKjYCKAEAAAYDb1UEAAYqMgIo
AQAABm8jBAAGKjYCKAEAAAYDbyQEAAYqMgIoAQAABm+HBAAGKjYCKAEAAAYDb4gEAAYqMgIoAQAA
Bm+LBAAGKjICKAEAAAZvjAQABio2AigBAAAGA2+NBAAGKjICKAEAAAZvrAQABioyAigBAAAGb4IE
AAYqMgIoAQAABm+BBAAGKjICKAEAAAZvJgQABioyAigBAAAGb4kEAAYqNgIoAQAABgNvigQABioy
AigBAAAGbykEAAYqNgIoAQAABgNvKgQABioyAigBAAAGbysEAAYqNgIoAQAABgNvLAQABioyAigB
AAAGb1YEAAYqNgIoAQAABgNvVwQABioyAigBAAAGby0EAAYqMgIoAQAABm8SBAAGKjICKAEAAAZv
mAQABio2AigBAAAGA2+ZBAAGKjICKAEAAAZvmgQABio2AigBAAAGA2+bBAAGKjICKAEAAAZvsQQA
Bio2AigBAAAGA2+yBAAGKjICKAEAAAZvnAQABioyAigBAAAGb1gEAAYqNgIoAQAABgNvWQQABioy
AigBAAAGb1oEAAYqMgIoAQAABm9bBAAGKjICKAEAAAZvXAQABioyAigBAAAGb10EAAYqMgIoAQAA
Bm9eBAAGKjICKAEAAAZvXwQABio2AigBAAAGA29gBAAGKjICKAEAAAZvYQQABioyAigBAAAGb2IE
AAYqNgIoAQAABgNvYwQABioyAigBAAAGb2QEAAYqNgIoAQAABgNvZQQABioyAigBAAAGb2YEAAYq
NgIoAQAABgNvZwQABioyAigBAAAGb2gEAAYqNgIoAQAABgNvaQQABioyAigBAAAGb2oEAAYqNgIo
AQAABgNvawQABioyAigBAAAGb2wEAAYqNgIoAQAABgNvbQQABioyAigBAAAGb24EAAYqMgIoAQAA
Bm9vBAAGKjICKAEAAAZvtgQABioyAigBAAAGb7UEAAYqMgIoAQAABm+zBAAGKjYCKAEAAAYDb7QE
AAYqMgIoAQAABm8vBAAGKjICKAEAAAZvcAQABio2AigBAAAGA29xBAAGKjICKAEAAAZvrwQABio2
AigBAAAGA2+wBAAGKjICKAEAAAZvlAQABioyAigBAAAGb5UEAAYqMgIoAQAABm9yBAAGKjICKAEA
AAZvngQABio2AigBAAAGA2+fBAAGKjICKAEAAAZvMAQABio2AigBAAAGA28xBAAGKjICKAEAAAZv
cwQABioyAigBAAAGb3QEAAYqMgIoAQAABm91BAAGKjYCKAEAAAYDb3YEAAYqMgIoAQAABm8RBAAG
KjICKAEAAAZvdwQABioyAigBAAAGb6YEAAYqNgIoAQAABgNvpwQABioyAigBAAAGb6IEAAYqNgIo
AQAABgNvowQABioyAigBAAAGb6QEAAYqNgIoAQAABgNvpQQABioyAigBAAAGb6AEAAYqNgIoAQAA
BgNvoQQABioyAigBAAAGb3gEAAYqNgIoAQAABgNveQQABioyAigBAAAGb6gEAAYqNgIoAQAABgNv
qQQABioyAigBAAAGbzUEAAYqNgIoAQAABgNvNgQABioyAigBAAAGbzcEAAYqMgIoAQAABm96BAAG
KjYCKAEAAAYDb3sEAAYqMgIoAQAABm98BAAGKjYCKAEAAAYDb30EAAYqNgIoAQAABgNvnQQABioy
AigBAAAGb34EAAYqMgIoAQAABm+rBAAGKjYCKAEAAAYDbzgEAAYqMgIoAQAABm85BAAGKjICKAEA
AAZvOgQABipGAigBAAAGfh0AAApvOwQABioyAigBAAAGb60EAAYqNgIoAQAABgNvqgQABio2AigB
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
Cig8AAAKOoIAAAByVQMAcAlvFAQABhEEjDgAAAFvhQMABm99AwAGKDUAAAooNAAACglvFAQABhEE
jDgAAAFvhQMABn45AQAEclEDAHAJbxQEAAYRBIw4AAABb4UDAAZvfQMABig7AAAKb4ADAAYJbxQE
AAYRBIw4AAABb4UDAAZvfwMABglvPgQABismcmUDAHAJbxQEAAYRBIw4AAABb4UDAAZvfQMABig1
AAAKKDQAAAoRBBdYEwQRBAlvFAQABm+EAwAGPpX+//8IbzEAAAo6SP7//94UCHURAAABEwYRBiwH
EQZvMgAACtzeAybeACoAAEE0AAACAAAAbQAAAL8BAAAsAgAAFAAAAAAAAAAAAAAAZgAAANwBAABC
AgAAAwAAABQAAAEbMAIAbAAAAB0AABECbwMEAAYoPQAACi0NAm8CBAAGKD0AAAosNQJvBQQABm/+
AwAGCgZveAMABnKDAwBwKD4AAAosDgZvewMABm8LBAAGC94kBm91AwAGC94bAm8DBAAGC94Sbz8A
AAooNAAACnKJAwBwC94AByoBEAAAAAAAAFhYABIUAAABGzADANoBAAAeAAARKEAAAApyiwMAcCg0
AAAKcs8DAHAoNAAACnJpAgBwcywAAAooLQAACiguAAAKdA0AAAILB28JBAAGb7oEAAYMcokDAHAN
FwoIby8AAAoTBCsuEQRvMAAACnQHAAACEwUGjDgAAAFyEwQAcBEFKGgDAAYoQQAACig0AAAKBhdY
ChEEbzEAAAotyd4VEQR1EQAAARMGEQYsBxEGbzIAAArcchcEAHAoNAAACihCAAAKb0MAAAoNCXI/
BABwKD4AAAosC3JDBABwKDQAAAoqCXKJAwBwKEQAAAo5af///wlvRQAACihGAAAKFz/eAAAACW9F
AAAKKEYAAAoGPM0AAAByVQQAcAgJb0UAAAooRgAACow4AAABbwcEAAZvAQQABig1AAAKKDQAAApy
VQQAcAgJb0UAAAooRgAACow4AAABbwcEAAYoaAMABig1AAAKKDQAAAoHbwkEAAZvvAQABm++BAAG
JnJvBABwCAlvRQAACihGAAAKjDgAAAFvBwQABm8BBAAGKDUAAAooagMABihmAwAGcnUEAHAICW9F
AAAKKEYAAAqMOAAAAW8HBAAGbwEEAAYoNQAACig0AAAKcokDAHAoNAAACjh6/v//cp8EAHAoNAAA
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
AQAbCXEGAQCORnYGAQAECnsGAQDncIAGAQAVCYUGAQDARYoGAQCaNI8GAQBnRZQGAQD9YZkGAQDM
QZ4GAQB9CKMGAQCcUKgGAQCVM60GAQAKTbIGAQCbM7cGAQBPCbwGAQDSQsEGAQAlCcYGAQAVC8sG
AQDNQmcGAQAKCmwGAQAbCXEGAQCORnYGAQAECnsGAQDncIAGAQAVCYUGAQDARYoGAQCaNI8GAQBn
RZQGAQD9YZkGAQDMQZ4GAQB9CKMGAQAVTM4GAQCcUKgGAQCVM60GAQDmS9MGAQAKTbIGAQCbM7cG
AQAlCcYGAQCzTNgGAQBoTN0GAQDGS+IGAQBPCbwGAQDSQsEGAQCmJOcGAQAiEcsGAQAmJ+sGAQAF
EMsGAQD5IcsGAQDfDe8GAQANHu8GAQAZKPIGAQDWI+8GAQDLDe8GAQDeJPcGAQC7I+8GAQB4JvwG
AQAmDu8GAQDKKu8GAQCpD+8GAQBgFwAHAQA+KcsGAQAjGgQHAQBDJ8sGAQCGFwAHAQAgLAAHAQBA
HQkHAQCUKu8GAQDCJw4HAQBLHhMHAQCuIhcHAQCLKMsGAQCFLO8GAQBFEhsHAQB7EyAHAQBSKMsG
AQCxKssGAQAvHMsGAQDyIyMHAQB1JCgHAQBzD7UBAQDkDy0HAQBiE+8GAQCHG8sGAQC9EMsGAQBa
HSAHAQC8KbUBAQC3HTIHAQAiEjcHAQBNEe8GAQBxIjwHAQCXEMsGAQAPD+8GAQAdFu8GAQDkDu8G
AQA9FO8GAQAJFwAHAQBDEMsGAQCTJkEHAQBhKcsGAQCKEcsGAQBuKMsGAQC3E+8GAQAnFwAHAQCk
Jy0HAQBQJO8GAQAFJ0EHAQCfGQAHAQCmFu8GAQBsLLUBAQALEcsGAQCiIUYHAQDhIUsHAQDSJe8G
AQBoGO8GAQAtFe8GAQAKKk8HAQDNLlMHAQCKKcsGAQAOHQAHAQBlFO8GAQCCHVgHAQDwEMsGAQBG
GQAHAQCCGQAHAQDjGQAHAQA1KO8GAQBsHu8GAQBoHAAHAQDMD8sGAQASJF0HAQC/JO8GAQAOGe8G
AQDUKcsGAQD9J2IHAQCJHMsGAQCtEe8GAQAxHiAHAQB1EQAHAQC/FwAHAQCiF2cHAQD0DQAHAQCQ
I8sGAQBiDu8GAQC9G8sGAQCgG8sGAQDTHe8GAQDeJ2wHAQAyD+8GAQBvKssGAQCJFO8GAQAFI+8G
AQA0Iu8GAQBIGHEHAQBXD+8GAQBtI+8GAQBWIu8GAQBCGnYHAQBDKiAHAQBFFwAHAQBKI+8GAQAv
I+8GAQB0EMsGAQCEJ3sHAQAsKgAHAQAAGAAHAQDhF2cHAQAMDgAHAQD5GyAHAQCPD+8GAQAzG8sG
AQAyJO8GAQBeJu8GAQAkEAAHAQCCGoAHAQCTIu8GAQBpGQAHAQBPHCAHAQAdIu8GAQCAHoUHAQBN
GyAHAQBjGooHAQDaE+8GAQCnLu8GAQDIGQAHAQBsJ48HAQDXJu8GAQCvJu8GAQAVHMsGAQDeGyAH
AQDxKe8GAQBmLQAHAQBmFe8GAQC0IO8GAQA7LAAHAQApH+8GAQAUJu8GAQCCLu8GAQDzLe8GAQDa
Eu8GAQDWK+8GAQANG+8GAQAXKe8GAQDRHO8GAQAmGJQHAQBiIe8GAQBAE+8GAQCLIO8GAQDGH+8G
AQBBIO8GAQAmHe8GAQAJFe8GAQD5Ee8GAQDDLO8GAQDvH+8GAQDLFu8GAQDKFO8GAQBGDu8GAQCg
Ke8GAQD1JO8GAQCJGO8GAQA9Fu8GAQCHDu8GAQAUJe8GAQCsGO8GAQBgFu8GAQCmDu8GAQAzJe8G
AQDPGO8GAQCDFu8GAQDFDu8GAQDMIu8GAQC9Fe8GAQBuG+8GAQDvFO8GAQDuLO8GAQDJIZkHAQDD
Hu8GAQDyGMsGAQBVLO8GAQADH+8GAQBtJe8GAQAbLu8GAQCDLe8GAQBhEu8GAQBUK+8GAQCjGu8G
AQCqKO8GAQAjIe8GAQChH+8GAQBSJe8GAQCMJO8GAQA1Ju8GAQDnHu8GAQAHFO8GAQC4HMsGAQCd
E+8GAQAwK+8GAQDXEe8GAQAFK+8GAQASLe8GAQCfLO8GAQA7Le8GAQCFFe8GAQDYFe8GAQCKJe8G
AQA8Lu8GAQCnLe8GAQCIEu8GAQB+K+8GAQDFGu8GAQDNKO8GAQBJFe8GAQAhFO8GAQB6H+8GAQDk
Iu8GAQCwFO8GAQDtHe8GAQCbHu8GAQD2Je8GAQBgLu8GAQDOLe8GAQCyEu8GAQCrK+8GAQDqGu8G
AQDzKO8GAQBCIe8GAQBlIO8GAQAGIe8GAQAeE+8GAQDeIO8GAQCbHe8GAQAbIO8GAQAELO8GAQCq
JZ4HAQAuGe8GAQDtKu8GAQCFIe8GAQDwE+8GAQBTH+8GAQBvDe8GAQCGDe8GAQCdDe8GAQC0De8G
AQACGu8GAQAFE+8GAQDoFu8GAQD+Fe8GAQCfFe8GEQBqSO8GEQC5RiAHEQAybiAHEQDkTKMHEQDb
PacHEQAAMasHBgaeByAHVoAEXa8HVoDdbK8HVoCdbq8HBgaeByAHVoBhCvIGVoBBTfIGVoDpBvIG
VoAMcPIGBgaeByAHVoD1SJQHVoDJapQHBgaeByAHVoAZMmIHVoAxRmIHVoDCdmIHVoB4MGIHVoAL
PWIHBgaeByAHVoCabLQHVoBkZLQHVoAiArQHVoBzcbQHVoCYSLQHVoA6U7QHVoAWdbQHVoB3OrQH
VoD6AbQHVoBGcbQHVoBEB7QHVoDFNLQHVoBlWLQHVoBccbQHVoA9WLQHVoB4dbQHVoDEUrQHVoDQ
cbQHVoDOBrQHBgaeByAHVoCfdAQHVoB1TAQHBgaeByAHVoDMTQkHVoCRTQkHVoCATQkHVoC8TQkH
VoDZTQkHVoCiTQkHVoByTQkHBgaeByAHVoDVRg4HVoAFQg4HVoCBCg4HBgaeByAHVoBTCpkHVoDI
M5kHVoDBM5kHBgaeByAHVoD/cBsHVoAyShsHVoBZSBsHBgaeByAHVoAyRbkHVoChL7kHVoB2RbkH
BgaeByAHVoAFO54HVoCKOp4HVoB7ZJ4HVoB5WJ4HBgaeByAHVoCwc74HVoAfcb4HVoCvSL4HVoC+
SL4HVoA3P74HVoAUQr4HBgaeByAHVoAeRsMHVoDBC8MHVoDbCsMHBgaeByAHVoDUR2wHVoDKR2wH
VoDXDGwHVoC2CmwHVoCZCmwHBgaeByAHVoDhR3EHVoAVcXEHVoDeRnEHBgaeByAHVoDOTvcGVoBh
MPcGVoCwV/cGVoDEbPcGVoDQbPcGVoDQb/cGVoDrdfcGVoDVY/cGVoDZYvcGVoB8Z/cGVoBLaPcG
VoDNaPcGVoDJYPcGVoDxbPcGVoCDb/cGVoAcT/cGVoDVRfcGVoA9RvcGVoDvRfcGVoAhUvcGVoCF
Y/cGVoDLUfcGVoBpUPcGVoAaY/cGVoC8XPcGVoAOXvcGVoBaYPcGVoAPUvcGVoB+YfcGVoAmePcG
VoBhavcGVoAdbfcGVoD1SvcGVoA9S/cGVoDYQvcGVoDeb/cGVoBCb/cGVoDfQvcGVoBZSfcGVoCU
b/cGVoCsP/cGVoCsbvcGVoDhOvcGVoD/Y/cGVoALZPcGVoBgYvcGVoCnOvcGVoDkMvcGVoClY/cG
VoAcU/cGVoDjaPcGVoDub/cGVoC9b/cGVoByQvcGVoBiYPcGVoBzavcGVoDaZvcGVoCpUPcGVoDN
SPcGVoCfYvcGVoBQSPcGVoAQZ/cGVoAOavcGVoB8cPcGVoBHYfcGVoAXePcGVoDzY/cGVoAyWPcG
VoDoavcGVoAEZ/cGVoA4R/cGVoB+bvcGVoDCaPcGVoAxPfcGVoB5YvcGVoAmSPcGVoDVXPcGVoCi
b/cGVoCjXfcGVoDyS/cGVoCdYfcGVoA4NfcGVoAMY/cGVoAPUPcGVoA1UPcGVoDRT/cGVoDRM/cG
VoAPcfcGVoBMUPcGVoDiT/cGVoD4T/cGVoAcUPcGVoA3Y/cGVoAqUfcGVoD4UPcGVoDqTfcGVoCz
UfcGVoASUfcGVoA6UfcGVoB8UfcGVoCfUfcGVoBlUfcGVoBFcPcGVoCDcPcGVoAdcPcGVoCTcPcG
VoBocPcGVoD7XvcGVoD3LvcGVoDqLvcGVoDtXvcGVoAdbvcGVoA/NfcGVoClYfcGVoAnavcGVoDq
YvcGVoBCR/cGVoCudfcGVoC8YPcGVoBPTfcGVoCROvcGVoC3YfcGVoBtNfcGVoBgNfcGVoCANfcG
VoC/NfcGVoCfNfcGVoBQNfcGVoCRNfcGVoCSY/cGVoAKU/cGVoDfY/cGVoC5V/cGVoAtcPcGVoC1
UPcGVoBOUfcGVoABePcGVoAJYfcGVoDdUPcGVoBzO/cGVoBoYvcGVoDaNPcGVoCtNfcGVoCdT/cG
VoDLYvcGVoBtMPcGVoChTvcGVoBcV/cGVoBWcPcGBgaeByAHVoAzCzIHVoCrLzIHVoDSPzIHBgae
ByAHVoBhUjcHVoAWajcHVoBYbzcHBgaeByAHVoB0R3YHVoARXXYHVoAQMXYHVoDXUXYHBgaeByAH
VoAMOy0HVoCOCi0HVoBWCS0HVoBodS0HVoDZQS0HBgaeByAHVoD2OnsHVoAlDXsHVoAKRnsHVoCu
C3sHVoDICnsHVoAYCnsHBgaeByAHVoBFSlMHVoCOSlMHVoCYQVMHVoAjSlMHBgaeByAHVoAgC4AH
VoBrUoAHVoDTC4AHVoDtCoAHBgaeByAHVoD9SYUHVoBJSYUHVoB6SYUHBgaeByAHVoD9NIoHVoAp
TYoHVoCQbooHVoDTOooHBgaeByAHVoDsC48HVoCnZo8HVoAjQo8HVoDuR48HVoAGC48HNgCgBMgH
FgCeAGcGFgAzAWwGFgDWAXEGFgCdAnYGFgAkA3sGFgCAA4AGFgDgA4UGFgAcBIoGFgBkBI8GFgCw
BJQGFgAOAJkGFgC7AJ4GFgByAaMGFgA6As4GFgDOAqgGFgBVA60GFgCdA9MGFgD9A7IGFgA5BLcG
FgCBBMYGFgBbANgGFgD8AN0GFgClAeIGFgBZArwGFgDtAsEGBgaeByAHVoBcZM0HVoBpPc0HUCAA
AAAAhgigS9IHAQBYIAAAAACGCKlL2AcBAGEgAAAAAIYY9l3YBwIAeCAAAAAAxginQt8HAwCwIAAA
AADGCLZC3wcEAOggAAAAAMYIkgnmBwUAICEAAAAAxgikCeYHBgBYIQAAAADGCJ4I7QcHAJAhAAAA
AMYIsQjtBwgAyCEAAAAAxghcRvQHCQAAIgAAAADGCHFG9AcKADgiAAAAAMYIzAn7BwsAcCIAAAAA
xgjkCfsHDACoIgAAAADGCKdwAggNAOAiAAAAAMYIw3ACCA4AGCMAAAAAxgjbCAkIDwBQIwAAAADG
CPQICQgQAIgjAAAAAMYIhkUQCBEAwCMAAAAAxgifRRAIEgD4IwAAAADGCEo0FwgTADAkAAAAAMYI
bjQXCBQAaCQAAAAAxgg5RR4IFQCgJAAAAADGCExFHggWANgkAAAAAMYIy2ElCBcAECUAAAAAxgjg
YSUIGABIJQAAAADGCKJBLAgZAIAlAAAAAMYIs0EsCBoAuCUAAAAAxghXCDMIGwDwJQAAAADGCGYI
MwgcACgmAAAAAMYIclA6CB0AYCYAAAAAxgiDUDoIHgCYJgAAAADGCFszQQgfANAmAAAAAMYIdDNB
CCAACCcAAAAAxgjwTEgIIQBAJwAAAADGCPlMSAgiAHgnAAAAAMYIHjNPCCMAsCcAAAAAxggxM08I
JADoJwAAAADGCDEJVgglACAoAAAAAMYIPAlWCCYAWCgAAAAAxgiFQl0IJwCQKAAAAADGCI9CXQgo
AMgoAAAAAMYIOAhkCCkAACkAAAAAxghBCGQIKgA1KQAAAACBAJxCawgrAEspAAAAAIEASgkGACwA
YCkAAAAAgQBNCAYALAB1KQAAAACBAEczEAAsAIspAAAAAIEABU1rCC0AoSkAAAAAgQCQMxAALgC3
KQAAAACBAJdQcQgvAM8pAAAAAIEAeAgGADIA5CkAAAAAgQDHQXkIMgD7KQAAAACBAPhhawg0ABEq
AAAAAIEAYkVrCDUAJyoAAAAAgQCVNIAINgA+KgAAAACBALtFgAg4AFUqAAAAAIEAEAmACDoAbCoA
AAAAgQDicIAIPACDKgAAAACBAP8JgAg+AJoqAAAAAIEAiUaICEAAsCoAAAAAgQDHCIgIQQDGKgAA
AACBALkJiAhCANwqAAAAAIEAyEIGAEMA8SoAAAAAxgiRakoCQwD+KgAAAADGCJ1qEABDAAwrAAAA
AMYIWgZKAkQAGSsAAAAAxggsZEoCRAAmKwAAAADGCD1kEABEADQrAAAAAMYI901KAkUAQSsAAAAA
xggWdEoCRQBOKwAAAADGCB90EABFAFwrAAAAAMYIn0aOCEYAaSsAAAAAxgi4OZIIRgB2KwAAAADG
CJ85kghGAIMrAAAAAMYIvk6XCEYAkCsAAAAAxgj0YpwIRgCdKwAAAADGCOkMbQJGAKorAAAAAMYI
Bw2hCEYAuCsAAAAAxgjzZ6YIRwDFKwAAAADGCC8KbQJHANIrAAAAAMYIQQqhCEcA4CsAAAAAxghc
XG0CSADtKwAAAADGCBgFSgJIAPorAAAAAMYIIAUQAEgACCwAAAAAxggyT0oCSQAVLAAAAADGCElP
EABJACMsAAAAAMYINmqrCEoAMCwAAAAAxghFarEISgA+LAAAAADGCJ5gSgJLAEssAAAAAMYIrWAQ
AEsAWSwAAAAAxggoBUoCTABmLAAAAADGCC8FEABMAHQsAAAAAMYIGGS4CE0AgSwAAAAAxgiCYEoC
TQCOLAAAAADGCJBgEABNAJwsAAAAAMYI6Ga+CE4AqSwAAAAAxgh6BUoCTgC2LAAAAADGCI1xSgJO
AMMsAAAAAMYI8QdKAk4A0CwAAAAAxggHOpIITgDdLAAAAADGCCA6wwhOAOssAAAAAMYIG2xtAk8A
+CwAAAAAxggxbKEITwAGLQAAAADGCOc/yQhQABMtAAAAAMYIE2htAlAAIC0AAAAAxggvaKEIUAAu
LQAAAADGCDk6kghRADstAAAAAMYISDrDCFEASS0AAAAAxgh6c5IIUgBWLQAAAADGCIhzwwhSAGQt
AAAAAMYIWE3PCFMAcS0AAAAAxghlTdUIUwB/LQAAAADGCGNvSgJUAIwtAAAAAMYIc28QAFQAmi0A
AAAAxgh3adwIVQCnLQAAAADGCIZp4ghVALUtAAAAAMYI51HpCFYAwi0AAAAAxggaXu4IVgDPLQAA
AADGCDFrbQJWANwtAAAAAMYIQ2uhCFYA6i0AAAAAxgj8c0oCVwD3LQAAAADGCAl0EABXAAUuAAAA
AMYIxjDzCFgAEi4AAAAAxgjVMPkIWAAgLgAAAADGCLoyjghZAC0uAAAAAMYIzzIBAFkAOy4AAAAA
xgjzam0CWgBILgAAAADGCC5xbQJaAFUuAAAAAMYIOnGhCFoAYy4AAAAAxgiESW0CWwBwLgAAAADG
CCFhAAlbAH0uAAAAAMYIi2IGCVsAii4AAAAAxgiAB0YCWwCXLgAAAADGCGoJDAlcAKQuAAAAAMYI
fgkSCVwAsi4AAAAAxgiMMkoCXQC/LgAAAADGCJgyEABdAM0uAAAAAMYIBkdtAl4A2i4AAAAAxggS
R6EIXgDoLgAAAADGCFsMbQJfAPUuAAAAAMYIgQyhCF8AAy8AAAAAxggKTo4IYAAQLwAAAADGCCht
RgJgAB0vAAAAAMYIdk4ZCWEAKi8AAAAAxgiFTh8JYQA4LwAAAADGCIYwJgliAEUvAAAAAMYInDAs
CWIAUy8AAAAAxgg5DUoCYwBgLwAAAADGCFQNEABjAG4vAAAAAMYIeV0zCWQAey8AAAAAxggpDG0C
ZACILwAAAADGCEIMoQhkAJYvAAAAAMYIogZKAmUAoy8AAAAAxghCOEoCZQCwLwAAAADGCGYGSgJl
AL0vAAAAAMYI+zVKAmUAyi8AAAAAxgh0OZIIZQDXLwAAAADGCGYLbQJlAOQvAAAAAMYIiguhCGUA
8i8AAAAAxggoZzkJZgD/LwAAAADGCFNsbQJmAAwwAAAAAMYIb2yhCGYAGjAAAAAAxgguL20CZwAn
MAAAAADGCEQvoQhnADUwAAAAAMYIEWttAmgAQjAAAAAAxggha6EIaABQMAAAAADGCB40SgJpAF0w
AAAAAMYINDQQAGkAazAAAAAAxgjJOZIIagB4MAAAAADGCNo5wwhqAIYwAAAAAMYIRmkMCWsAkzAA
AAAAxghXaRIJawChMAAAAADGCDBiSgJsAK4wAAAAAMYIy2c5CWwAuzAAAAAAxgj/PpIIbADIMAAA
AADGCPw4SgJsANUwAAAAAMYI5HNGAmwA4jAAAAAAxgjwcz8JbQDwMAAAAADGCMMMbQJuAP0wAAAA
AMYIfFdECW4ACjEAAAAAxgiWV0oJbgAYMQAAAADGCBxYUQlvACUxAAAAAMYIJ1hWCW8AMzEAAAAA
xgizZUoCcABAMQAAAADGCF88SgJwAE0xAAAAAMYIJTdKAnAAWjEAAAAAxghUblwJcABnMQAAAADG
CGluYQlwAHUxAAAAAMYIxXdnCXEAgjEAAAAAxgjVd20JcQCQMQAAAADGCLJsbQJyAJ0xAAAAAMYI
zkySCHIAqjEAAAAAxggxNkoCcgC3MQAAAADGCEg2EAByAMUxAAAAAMYIQE50CXMA0jEAAAAAxgin
DG0CcwDfMQAAAADGCJs+kghzAOwxAAAAAMYIsT7DCHMA+jEAAAAAxgjfPpIIdAAHMgAAAADGCO8+
wwh0ABUyAAAAAMYIYD+SCHUAIjIAAAAAxghyP8MIdQAwMgAAAADGCKlqSgJ2AD0yAAAAAMYIuWoQ
AHYASzIAAAAAxgiDUkoCdwBYMgAAAADGCIpSEAB3AGYyAAAAAMYIZkqSCHgAczIAAAAAxgh6SsMI
eACBMgAAAADGCIgIbQJ5AI4yAAAAAMYIkwihCHkAnDIAAAAAxghYYXoJegCpMgAAAADGCEhjSgJ6
ALYyAAAAAMYIWmMQAHoAxDIAAAAAxggxPkoCewDRMgAAAADGCEQ+EAB7AN8yAAAAAMYAWi+ACXwA
7TIAAAAAxgC5cQYAfQD6MgAAAADGAMdGBgB9AAczAAAAAMYAcT6GCX0AFTMAAAAAxgBzdUYCfgAi
MwAAAADGAORBBgB/AC8zAAAAAMYAvHM/CX8AQTMAAAAAxgCsT40JgABOMwAAAADGAKpJkgmAAFwz
AAAAAMYAV0aZCYEAajMAAAAAxgDlbwYAgwB3MwAAAADGANBFBgCDAIQzAAAAAMYAaV6gCYMAkzMA
AAAAxgATLwYAhQCgMwAAAADGABFIBgCFALAzAAAAAIEAa2gGAIUAHDcAAAAAgQBpaAYAhQCFOgAA
AADEAHc+oQiFAAAAAAAAAMYNkWpKAoYAAAAAAAAAxg2dahAAhgAAAAAAAADGDVoGSgKHAAAAAAAA
AMYNLGRKAocAAAAAAAAAxg09ZBAAhwAAAAAAAADGDfdNSgKIAAAAAAAAAMYNFnRKAogAAAAAAAAA
xg0fdBAAiAAAAAAAAADGDZ9GjgiJAAAAAAAAAMYNuDmSCIkAAAAAAAAAxg2fOZIIiQAAAAAAAADG
Db5OlwiJAKw6AAAAAMYJp0LfB4kA5DoAAAAAxgm2Qt8HigAcOwAAAADGCZIJ5geLAFQ7AAAAAMYJ
pAnmB4wAjDsAAAAAxgmeCO0HjQDEOwAAAADGCbEI7QeOAPw7AAAAAMYJXEb0B48ANDwAAAAAxglx
RvQHkABsPAAAAADGCcwJ+weRAKQ8AAAAAMYJ5An7B5IA3DwAAAAAxgmncAIIkwAUPQAAAADGCcNw
AgiUAEw9AAAAAMYJ2wgJCJUAhD0AAAAAxgn0CAkIlgC8PQAAAADGCYZFEAiXAPQ9AAAAAMYJn0UQ
CJgALD4AAAAAxglKNBcImQBkPgAAAADGCW40FwiaAJw+AAAAAMYJOUUeCJsA1D4AAAAAxglMRR4I
nAAMPwAAAADGCcthJQidAEQ/AAAAAMYJ4GElCJ4AfD8AAAAAxgmiQSwInwC0PwAAAADGCbNBLAig
AOw/AAAAAMYJVwgzCKEAJEAAAAAAxglmCDMIogBcQAAAAADGCQBMpgmjAJRAAAAAAMYJDkymCaQA
zEAAAAAAxglyUDoIpQAEQQAAAADGCYNQOgimADxBAAAAAMYJWzNBCKcAdEEAAAAAxgl0M0EIqACs
QQAAAADGCc9LrQmpAORBAAAAAMYJ30utCaoAHEIAAAAAxgnwTEgIqwBUQgAAAADGCflMSAisAIxC
AAAAAMYJHjNPCK0AxEIAAAAAxgkxM08IrgD8QgAAAADGCTgIZAivADRDAAAAAMYJQQhkCLAAbEMA
AAAAxgmeTLQJsQCkQwAAAADGCaxMtAmyANxDAAAAAMYJUEy7CbMAFEQAAAAAxglhTLsJtABMRAAA
AADGCbJLwgm1AIREAAAAAMYJv0vCCbYAvEQAAAAAxgkxCVYItwD0RAAAAADGCTwJVgi4ACxFAAAA
AMYJhUJdCLkAZEUAAAAAxgmPQl0IugCZRQAAAADGCfRinAi7AKFFAAAAAIEIAGPJCbsAqkUAAAAA
xgnpDG0CvACyRQAAAADGCQcNoQi8ALtFAAAAAMYJ82emCL0Aw0UAAAAAgQgDaM8JvQDMRQAAAADG
CS8KbQK+ANRFAAAAAMYJQQqhCL4A3UUAAAAAxglcXG0CvwDlRQAAAACBCHNcoQi/AO5FAAAAAMYJ
GAVKAsAA9kUAAAAAxgkgBRAAwAD/RQAAAADGCTJPSgLBAAdGAAAAAMYJSU8QAMEAEEYAAAAAxgk2
aqsIwgAYRgAAAADGCUVqsQjCACFGAAAAAMYJnmBKAsMAKUYAAAAAxgmtYBAAwwAyRgAAAADGCSgF
SgLEADpGAAAAAMYJLwUQAMQAQ0YAAAAAxgkYZLgIxQBLRgAAAACBCCJk1QnFAFRGAAAAAMYJgmBK
AsYAXEYAAAAAxgmQYBAAxgBlRgAAAADGCehmvgjHAG1GAAAAAIEI9mbcCccAdkYAAAAAxgl6BUoC
yAB+RgAAAACBCI0FEADIAIdGAAAAAMYJjXFKAskAj0YAAAAAgQijcRAAyQCYRgAAAADGCfEHSgLK
AKBGAAAAAIEIBwgQAMoAqUYAAAAAxgkHOpIIywCxRgAAAADGCSA6wwjLALpGAAAAAMYJG2xtAswA
wkYAAAAAxgkxbKEIzADLRgAAAADGCec/yQjNANNGAAAAAIEI+T/iCc0A3EYAAAAAxgkTaG0CzgDk
RgAAAADGCS9ooQjOAO1GAAAAAMYJOTqSCM8A9UYAAAAAxglIOsMIzwD+RgAAAADGCXpzkgjQAAZH
AAAAAMYJiHPDCNAAD0cAAAAAxglYTc8I0QAXRwAAAADGCWVN1QjRACBHAAAAAMYJY29KAtIAKEcA
AAAAxglzbxAA0gAxRwAAAADGCXdp3AjTADlHAAAAAMYJhmniCNMAQkcAAAAAxgnnUekI1ABKRwAA
AACBCPtR6QnUAFNHAAAAAMYJGl7uCNUAW0cAAAAAgQgrXu8J1QBkRwAAAADGCTFrbQLWAGxHAAAA
AMYJQ2uhCNYAdUcAAAAAxgn8c0oC1wB9RwAAAADGCQl0EADXAIZHAAAAAMYJxjDzCNgAjkcAAAAA
xgnVMPkI2ACXRwAAAADGCboyjgjZAJ9HAAAAAMYJzzIBANkAqEcAAAAAxgnzam0C2gCwRwAAAACB
CAJroQjaALlHAAAAAMYJLnFtAtsAwUcAAAAAxgk6caEI2wDKRwAAAADGCYRJbQLcANJHAAAAAIEI
l0mhCNwA20cAAAAAxgkhYQAJ3QDjRwAAAACBCDRh9QndAOxHAAAAAMYJi2IGCd4A9EcAAAAAgQiV
YvwJ3gD9RwAAAADGCYAHRgLfAAVIAAAAAIEIjwc/CeAADkgAAAAAxglqCQwJ4QAWSAAAAADGCX4J
EgnhAB9IAAAAAMYJjDJKAuIAJ0gAAAAAxgmYMhAA4gAwSAAAAADGCQZHbQLjADhIAAAAAMYJEkeh
COMAQUgAAAAAxglbDG0C5ABJSAAAAADGCYEMoQjkAFJIAAAAAMYJCk6OCOUAWkgAAAAAgQglTgEA
5QBjSAAAAADGCShtRgLmAGtIAAAAAIEIM20/CecAdEgAAAAAxgl2ThkJ6AB8SAAAAADGCYVOHwno
AIVIAAAAAMYJhjAmCekAjUgAAAAAxgmcMCwJ6QCWSAAAAADGCTkNSgLqAJ5IAAAAAMYJVA0QAOoA
p0gAAAAAxgl5XTMJ6wCvSAAAAACBCI5dAwrrALhIAAAAAMYJKQxtAuwAwEgAAAAAxglCDKEI7ADJ
SAAAAADGCaIGSgLtANFIAAAAAIEIuAYQAO0A2kgAAAAAxglCOEoC7gDiSAAAAACBCFU4EADuAOtI
AAAAAMYJZgZKAu8A80gAAAAAgQiEBhAA7wD8SAAAAADGCfs1SgLwAARJAAAAAIEIFjYQAPAADUkA
AAAAxgl0OZII8QAVSQAAAACBCIU5wwjxAB5JAAAAAMYJZgttAvIAJkkAAAAAxgmKC6EI8gAvSQAA
AADGCShnOQnzADdJAAAAAIEIN2cKCvMAQEkAAAAAxglTbG0C9ABISQAAAADGCW9soQj0AFFJAAAA
AMYJLi9tAvUAWUkAAAAAxglEL6EI9QBiSQAAAADGCRFrbQL2AGpJAAAAAMYJIWuhCPYAc0kAAAAA
xgkeNEoC9wB7SQAAAADGCTQ0EAD3AIRJAAAAAMYJyTmSCPgAjEkAAAAAxgnaOcMI+ACVSQAAAADG
CUZpDAn5AJ1JAAAAAMYJV2kSCfkApkkAAAAAxgkwYkoC+gCuSQAAAACBCEhiEAD6ALdJAAAAAMYJ
y2c5CfsAv0kAAAAAgQjfZwoK+wDISQAAAADGCf8+kgj8ANBJAAAAAIEIGz/DCPwA2UkAAAAAxgn8
OEoC/QDhSQAAAACBCBQ5EAD9AOpJAAAAAMYJ5HNGAv4A8kkAAAAAxgnwcz8J/wD7SQAAAADGCcMM
bQIAAQNKAAAAAIEIzQyhCAABDEoAAAAAxgl8V0QJAQEUSgAAAADGCZZXSgkBAR1KAAAAAMYJHFhR
CQIBJUoAAAAAxgknWFYJAgEuSgAAAADGCbNlSgIDATZKAAAAAIEIymUQAAMBP0oAAAAAxglfPEoC
BAFHSgAAAACBCHM8EAAEAVBKAAAAAMYJJTdKAgUBWEoAAAAAgQg0NxAABQFhSgAAAADGCVRuXAkG
AWlKAAAAAMYJaW5hCQYBckoAAAAAxgnFd2cJBwF6SgAAAADGCdV3bQkHAYNKAAAAAMYJsmxtAggB
i0oAAAAAgQi7bKEICAGUSgAAAADGCc5MkggJAZxKAAAAAIEI2UzDCAkBpUoAAAAAxgkxNkoCCgGt
SgAAAADGCUg2EAAKAbZKAAAAAMYJQE50CQsBvkoAAAAAgQhMThEKCwHHSgAAAADGCacMbQIMAc9K
AAAAAIEItQyhCAwB2EoAAAAAxgmbPpIIDQHgSgAAAADGCbE+wwgNAelKAAAAAMYJ3z6SCA4B8UoA
AAAAxgnvPsMIDgH6SgAAAADGCWA/kggPAQJLAAAAAMYJcj/DCA8BC0sAAAAAxgmpakoCEAETSwAA
AADGCblqEAAQARxLAAAAAMYJg1JKAhEBJEsAAAAAxgmKUhAAEQEtSwAAAADGCWZKkggSATVLAAAA
AMYJekrDCBIBPksAAAAAxgmICG0CEwFGSwAAAADGCZMIoQgTAU9LAAAAAMYJWGF6CRQBV0sAAAAA
gQhrYRgKFAFgSwAAAADGCUhjSgIVAWhLAAAAAMYJWmMQABUBcUsAAAAAxgkxPkoCFgF5SwAAAADG
CUQ+EAAWAYJLAAAAAMYBWi+ACRcBgksAAAAAxgG5cQYAGAGCSwAAAADGAcdGBgAYAYJLAAAAAMYB
cT6GCRgBhEsAAAAAxgFzdUYCGQGCSwAAAADGAeRBBgAaAYJLAAAAAMYBvHM/CRoBhEsAAAAAxgGs
T40JGwGCSwAAAADGAapJkgkbAYRLAAAAAMYBV0aZCRwBgksAAAAAxgHlbwYAHgGCSwAAAADGAdBF
BgAeAYJLAAAAAMYBaV6gCR4BgksAAAAAxgETLwYAIAGCSwAAAADGARFIBgAgAYdLAAAAAMYJ/W1t
AiABj0sAAAAAxgkNbqEIIAGYSwAAAADGCeNpHwohAaBLAAAAAMYJ8mklCiEBqUsAAAAAxgmZSm0C
IgGxSwAAAADGCbtKoQgiAbpLAAAAAMYJui9KAiMBwksAAAAAxgnXLxAAIwHLSwAAAADGCWBPjggk
AdNLAAAAAMYJbU8BACQB3EsAAAAAxgkDL5IIJQHkSwAAAADGCQsvwwglAe1LAAAAAMYJSTuSCCYB
9UsAAAAAxgleO8MIJgH+SwAAAADGCSk7LAonAQZMAAAAAMYJOTsyCicBD0wAAAAAxgk5BZIIKAEX
TAAAAADGCUQFwwgoASBMAAAAAMYJHmBtAikBKEwAAAAAxgk8YKEIKQExTAAAAADGCb4FSgIqATlM
AAAAAIEI1gUQACoBQkwAAAAAxgmiR20CKwFKTAAAAADGCbZHoQgrAVNMAAAAAMYJVEdtAiwBW0wA
AAAAgQhkR6EILAFkTAAAAADGCdxOSgItAWxMAAAAAMYJ6U4QAC0BdUwAAAAAxgmiaTkKLgF9TAAA
AADGCbRpPwouAYZMAAAAAMYJ9gZKAi8BjkwAAAAAgQgOBxAALwGXTAAAAADGCRJvbQIwAZ9MAAAA
AMYJKm+hCDABqEwAAAAAxglfNkoCMQGwTAAAAADGCXk2EAAxAblMAAAAAMYJoF5KAjIBwUwAAAAA
xgm9XhAAMgHKTAAAAADGCR5dSgIzAdJMAAAAAMYJM10QADMB20wAAAAAxgkoPEYKNAHjTAAAAADG
CTs8TAo0AexMAAAAAMYJJgdKAjUB9EwAAAAAxgk1BxAANQH9TAAAAADGCfJfSgI2AQVNAAAAAMYJ
CGAQADYBDk0AAAAAxglQXUoCNwEWTQAAAACBCF5dEAA3AR9NAAAAAMYJG0BTCjgBJ00AAAAAgQgv
QFkKOAEwTQAAAADGCdRujgg5AThNAAAAAMYJ824BADkBQU0AAAAAxgnrOZIIOgFJTQAAAADGCfk5
wwg6AVJNAAAAAMYJxl9KAjsBWk0AAAAAxgncXxAAOwFjTQAAAADGCVhfSgI8AWtNAAAAAMYJZl8Q
ADwBdE0AAAAAxgn9C20CPQF8TQAAAADGCRMMoQg9AYVNAAAAAMYJD2lgCj4BjU0AAAAAgQgiaWYK
PgGWTQAAAADGCcBukgg/AZ5NAAAAAMYJym7DCD8Bp00AAAAAxgmnO5IIQAGvTQAAAADGCcA7wwhA
AbhNAAAAAMYJgzssCkEBwE0AAAAAxgmVOzIKQQHJTQAAAADGCU8FkghCAdFNAAAAAMYJXAXDCEIB
gksAAAAAxgE1UgYAQwGESwAAAADGAZFSbQpDAYRLAAAAAMYBB0rSB0UBhEsAAAAAxgFsXVEJRQGE
SwAAAADGAUxSeApFAYRLAAAAAMYBGC9+CkUB2k0AAAAAxgkrSY4ISAHiTQAAAADGCTpJAQBIAetN
AAAAAMYJpgdKAkkB800AAAAAxgmzBxAASQH8TQAAAADGCetBbQJKAQROAAAAAMYJ+EGhCEoBDU4A
AAAAxgkOYkoCSwEVTgAAAADGCR9iEABLAR5OAAAAAMYJwGZKAkwBJk4AAAAAxgnNZhAATAEvTgAA
AADGCUILkghNATdOAAAAAMYJVAvDCE0BQE4AAAAAxgmiQIkKTgFITgAAAACBCLZAjwpOAVFOAAAA
AMYJtl1KAk8BWU4AAAAAgQjEXRAATwFiTgAAAADGCcc+kghQAWpOAAAAAMYJ0z7DCFABc04AAAAA
xglOSo4IUQF7TgAAAADGCVpKAQBRAYROAAAAAMYJilxKAlIBjE4AAAAAxgmUXBAAUgGVTgAAAADG
Cd5SlgpTAZ1OAAAAAIEI7FKcClMBpk4AAAAAxgkyQo4IVAGuTgAAAADGCUZCAQBUAbdOAAAAAMYJ
akCjClUBv04AAAAAgQh8QKkKVQHITgAAAADGCeM0SgJWAdBOAAAAAMYJ7DQQAFYB2U4AAAAAxgmT
d0oCVwHhTgAAAADGCax3EABXAepOAAAAAMYJRD+SCFgB8k4AAAAAxglSP8MIWAH7TgAAAADGCflo
sApZAQNPAAAAAMYJBGm2ClkBDE8AAAAAxgmJZ0oCWgEUTwAAAADGCapnEABaAR1PAAAAAMYJRmdK
AlsBJU8AAAAAxglhZxAAWwEuTwAAAADGCWBJbQJcATZPAAAAAMYJbUmhCFwBP08AAAAAxgkPSY4I
XQFHTwAAAADGCR1JAQBdAYRLAAAAAMYBL029Cl4BgksAAAAAxgGOQAYAXgGCSwAAAADGARZCBgBe
AYRLAAAAAMYBGC/DCl4BUE8AAAAAxgEhMW0CYQGESwAAAADGAUtvRgJhAYJLAAAAAMYB4G8GAGIB
UE8AAAAAxgFwXm0CYgFTTwAAAADGCTxuSgJiAVtPAAAAAMYJSG4QAGIBZE8AAAAAxgmOdZIIYwFs
TwAAAADGCZ51wwhjAXVPAAAAAMYJcDdKAmQBfU8AAAAAxgmCNxAAZAGGTwAAAADGCTZWSgJlAY5P
AAAAAMYJU1YQAGUBl08AAAAAxgmWc5IIZgGfTwAAAADGCaNzwwhmAahPAAAAAMYJJFRKAmcBsE8A
AAAAxglBVBAAZwG5TwAAAADGCUdmSgJoAcFPAAAAAMYJW2YQAGgByk8AAAAAxglJd0oCaQHSTwAA
AADGCWF3EABpAdtPAAAAAMYJjHZKAmoB408AAAAAxgmndhAAagHsTwAAAADGCdQxSgJrAfRPAAAA
AMYJ8jEQAGsB/U8AAAAAxgkac0oCbAEFUAAAAADGCTtzEABsAQ5QAAAAAMYJZkFKAm0BFlAAAAAA
xgl/QRAAbQEfUAAAAADGCeFrSgJuASdQAAAAAMYJ+2sQAG4BMFAAAAAAxglsS0oCbwE4UAAAAADG
CYZLEABvAUFQAAAAAMYJ6zvOCnABSVAAAAAAgQgAPNQKcAFSUAAAAADGCRBXSgJxAVpQAAAAAMYJ
JlcQAHEBY1AAAAAAxgliMkoCcgFrUAAAAADGCXcyEAByAXRQAAAAAMYJ/lVKAnMBfFAAAAAAxgka
VhAAcwGFUAAAAADGCfZUSgJ0AY1QAAAAAMYJElUQAHQBllAAAAAAxgmeVUoCdQGeUAAAAADGCbVV
EAB1AadQAAAAAMYJD01KAnYBr1AAAAAAxgkcTRAAdgG4UAAAAADGCfc2SgJ3AcBQAAAAAIEIDjcQ
AHcByVAAAAAAxgkpMEoCeAHRUAAAAACBCEUwEAB4AdpQAAAAAMYJY3RKAnkB4lAAAAAAgQiBdBAA
eQHrUAAAAADGCS5VSgJ6AfNQAAAAAMYJTVUQAHoB/FAAAAAAxgksOUoCewEEUQAAAADGCTw5EAB7
AQ1RAAAAAMYJrTZKAnwBFVEAAAAAxgnFNhAAfAEeUQAAAADGCaAFSgJ9ASZRAAAAAMYJrwUQAH0B
L1EAAAAAxgn/bEoCfgE3UQAAAADGCQ5tEAB+AUBRAAAAAMYJhmRKAn8BSFEAAAAAxgmYZBAAfwFR
UQAAAADGCYc8SgKAAVlRAAAAAMYJnTwQAIABYlEAAAAAxgloOEoCgQFqUQAAAADGCX44EACBAXNR
AAAAAMYJ7gVKAoIBe1EAAAAAgQgABhAAggGEUQAAAADGCapkSgKDAYxRAAAAAMYJvGQQAIMBlVEA
AAAAxgmzPEoChAGdUQAAAADGCck8EACEAaZRAAAAAMYJlDhKAoUBrlEAAAAAxgmqOBAAhQG3UQAA
AADGCRIGSgKGAb9RAAAAAIEIJAYQAIYByFEAAAAAxgnOZEoChwHQUQAAAADGCeBkEACHAdlRAAAA
AMYJ3zxKAogB4VEAAAAAxgn1PBAAiAHqUQAAAADGCcA4SgKJAfJRAAAAAMYJ1jgQAIkB+1EAAAAA
xgk2BkoCigEDUgAAAACBCEgGEACKAQxSAAAAAMYJU15KAosBFFIAAAAAxgleXhAAiwEdUgAAAADG
CdA3SgKMASVSAAAAAMYJ3jcQAIwBLlIAAAAAxglaQkoCjQE2UgAAAADGCWZCEACNAT9SAAAAAMYJ
3TZKAo4BR1IAAAAAxgnqNhAAjgFQUgAAAADGCbB0SgKPAVhSAAAAAIEIx3QQAI8BYVIAAAAAxgn9
V9sKkAFpUgAAAADGCQhY4QqQAXJSAAAAAMYJkVNKApEBelIAAAAAxgmoUxAAkQGDUgAAAADGCaU9
bQKSAYtSAAAAAIEItD2hCJIBlFIAAAAAxgnQc0oCkwGcUgAAAADGCdpzEACTAaVSAAAAAMYJ8lNK
ApQBrVIAAAAAxgkLVBAAlAG2UgAAAADGCSZlSgKVAb5SAAAAAMYJNmUQAJUBx1IAAAAAxgnJdkoC
lgHPUgAAAADGCd12EACWAdhSAAAAAMYJ+nVKApcB4FIAAAAAxgkRdhAAlwHpUgAAAADGCTAxSgKY
AfFSAAAAAMYJSjEQAJgB+lIAAAAAxglkckoCmQECUwAAAADGCYFyEACZAQtTAAAAAMYJ4EBKApoB
E1MAAAAAxgn1QBAAmgEcUwAAAADGCVVrSgKbASRTAAAAAMYJa2sQAJsBLVMAAAAAxgnGVkoCnAE1
UwAAAADGCdhWEACcAT5TAAAAAMYJxlRKAp0BRlMAAAAAxgneVBAAnQFPUwAAAADGCfJkSgKeAVdT
AAAAAMYJAGUQAJ4BYFMAAAAAxgmnYkoCnwFoUwAAAADGCbRiEACfAXFTAAAAAMYJb2ZKAqABeVMA
AAAAxgmLZhAAoAGCUwAAAADGCb9TSgKhAYpTAAAAAMYJzlMQAKEBk1MAAAAAxgkeNUoCogGbUwAA
AADGCSs1EACiAaRTAAAAAMYJ3UptAqMBrFMAAAAAxgnpSqEIowG1UwAAAADGCQQzSgKkAb1TAAAA
AMYJETMQAKQBxlMAAAAAxgk2ckoCpQHOUwAAAACBCE1yEAClAddTAAAAAMYJ/y9KAqYB31MAAAAA
gQgUMBAApgHoUwAAAADGCfpxSgKnAfBTAAAAAIEIGHIQAKcB+VMAAAAAxgnedEoCqAEBVAAAAACB
CPp0EACoAQpUAAAAAMYJNXRKAqkBElQAAAAAgQhMdBAAqQEbVAAAAADGCSx1SgKqASNUAAAAAIEI
SnUQAKoBLFQAAAAAxgmUN0oCqwE0VAAAAADGCaE3EACrAT1UAAAAAMYJ7DdKAqwBRVQAAAAAgQgF
OBAArAFOVAAAAADGCUZlSgKtAVZUAAAAAMYJWWUQAK0BX1QAAAAAxgnxdkoCrgFnVAAAAADGCQh3
EACuAXBUAAAAAMYJKHZKAq8BeFQAAAAAxglCdhAArwGBVAAAAADGCWQxSgKwAYlUAAAAAMYJgTEQ
ALABklQAAAAAxgmeckoCsQGaVAAAAADGCb5yEACxAaNUAAAAAMYJCkFKArIBq1QAAAAAxgkiQRAA
sgG0VAAAAADGCYFrSgKzAbxUAAAAAMYJmmsQALMBxVQAAAAAxglDN0oCtAHNVAAAAADGCVM3EAC0
AdZUAAAAAMYJ0DVKArUB3lQAAAAAxgnfNRAAtQHnVAAAAADGCZJUSgK2Ae9UAAAAAMYJrFQQALYB
+FQAAAAAxgl4XkoCtwEAVQAAAADGCYxeEAC3AQlVAAAAAMYJkzZKArgBEVUAAAAAxgmgNhAAuAEa
VQAAAADGCfZOSgK5ASJVAAAAAMYJCU8QALkBK1UAAAAAxglbU0oCugEzVQAAAADGCXZTEAC6ATxV
AAAAAMYJJWZKArsBRFUAAAAAxgk2ZhAAuwFNVQAAAADGCR93SgK8AVVVAAAAAMYJNHcQALwBXlUA
AAAAxglcdkoCvQFmVQAAAADGCXR2EAC9AW9VAAAAAMYJnjFKAr4Bd1UAAAAAxgm5MRAAvgGAVQAA
AADGCd5ySgK/AYhVAAAAAMYJ/HIQAL8BkVUAAAAAxgk6QUoCwAGZVQAAAADGCVBBEADAAaJVAAAA
AMYJs2tKAsEBqlUAAAAAxgnKaxAAwQGzVQAAAADGCepWSgLCAbtVAAAAAMYJ/VYQAMIBxFUAAAAA
xgnMVUoCwwHMVQAAAADGCeVVEADDAdVVAAAAAMYJplZKAsQB3VUAAAAAxgm2VhAAxAHmVQAAAADG
CTgySgLFAe5VAAAAAMYJTTIQAMUB91UAAAAAxglwVkoCxgH/VQAAAADGCYtWEADGAQhWAAAAAMYJ
WE5KAscBEFYAAAAAxglnThAAxwEZVgAAAADGCWxVSgLIASFWAAAAAMYJhVUQAMgBKlYAAAAAxglc
c0oCyQEyVgAAAADGCWtzEADJATtWAAAAAMYJbGXoCsoBQ1YAAAAAxgmHZe4KygFMVgAAAADGCYU+
SgLLAVRWAAAAAMYJkD4QAMsBXVYAAAAAxgnkcUoCzAFlVgAAAADGCe9xEADMAW5WAAAAAMYJPFdK
As0BdlYAAAAAxglMVxAAzQF/VgAAAADGCQo1SgLOAYdWAAAAAMYJFDUQAM4BkFYAAAAAxgleVEoC
zwGYVgAAAADGCXhUEADPAaFWAAAAAMYJXgFKAtABqVYAAAAAxgloARAA0AGyVgAAAADGCQ4CSgLR
AbpWAAAAAMYJGAIQANEBw1YAAAAAxgm6AkoC0gHLVgAAAADGCcQCEADSAdRWAAAAAMYJQQNKAtMB
3FYAAAAAxglLAxAA0wHlVgAAAADGCYQ/SgLUAe1WAAAAAMYJmD8QANQB9lYAAAAAxgkgMkoC1QH+
VgAAAADGCSwyEADVAQdXAAAAAMYJTDlKAtYBD1cAAAAAxglgORAA1gEYVwAAAADGCR44SgLXASBX
AAAAAMYJMDgQANcBKVcAAAAAxgmuN0oC2AExVwAAAADGCb83EADYAYJLAAAAAMYBij0QANkBgksA
AAAAxgFxPRAA2gGESwAAAADGAWov0gfbAYRLAAAAAMYBki/SB9sBgksAAAAAxgF8PQYA2wGCSwAA
AADGAYAvBgDbAYJLAAAAAMYBpDIQANsBgksAAAAAxgE8XgYA3AGCSwAAAADGAfxH9QrcATpXAAAA
AOYBdz4GAN0BSVcAAAAAxAF3PqEI3QFcVwAAAADEALBGBgDeAYxXAAAAAIQY9l0GAN4BPFsAAAAA
hgA8TQYA3gGoWwAAAACRAEo98QLeARxcAAAAAJEAxGP8Ct4BwFwAAAAAkQByYPwK3wFIXwAAAACR
AOFlAgvgAdBfAAAAAJEAsGjxAuEByGEAAAAAkQDeVwgL4QGYYgAAAACGGPZdBgDiAaBiAAAAAJEY
/F3xAuIBuGIAAAAAgxj2XQYA4gHAYgAAAACTCFFYDgviAexiAAAAAJMIwz0TC+IB82IAAAAAkwjP
PRgL4gH7YgAAAACWCEdsHgvjAQJjAAAAAIYY9l0GAOMBCmMAAAAAkRj8XfEC4wEAAAAAAwAGGAwD
BgDjAQAAAAADEMYNDmVKAuMBAAAAAAMQxg0aZRAA5AEAAAAAAwAGGFgEBgDlAQAAAAADEMYN2TtK
AuUBAAAAAAMQxg3iOxAA5gEAAAAAAwAGGNQDBgDnAQAAAAADEMYF5FwjC+cBAAAAAAMABhi8AwYA
6AEAAAAAAxDGDe41SgLoAQAAAAADAAYYyAMGAOkBAAAAAAMQxgXkQQYA6QEAAAAAAxDGBbo0EADp
AQAAAAADAAYYJwEGAOoBAAAAAAMQxg2fRo4I6gEAAAAAAwAGGAwDBgDqAQAAAAADEMYNKG6OCOoB
AAAAAAMQxg2gSygL6gEAAAAAAxDGBQpNawjsAQAAAAADEMYFnFBxCO0BAAAAAAMQxgWVMxAA8AEA
AAAAAwAGGMoBBgDxAQAAAAADEMYFmzMQAPEBAAAAAAMQxgUlCQYA8gEAAAAAAwAGGJECBgDyAQAA
AAADEMYF0kJrCPIBAAAAAAMQxgX9YWsI8wEAAAAAAxDGBQoKiAj0AQAAAAADEMYFGwmICPUBAAAA
AAMQxgXARYAI9gEAAAAAgxDGBcxBeQj4AQAAAACDEMYFjkaICPoBAAAAAIMQxgUECoAI+wEAAAAA
gxDGBedwgAj9AQAAAACDEMYFFQmACP8BAAAAAIMQxgWaNIAIAQIAAAAAgxDGBU8JBgADAgAAAACD
EMYFZ0VrCAMCAAAAAIMQxgV9CAYABAIAAAAAgxDGBc1CBgAEAgAAAAADAAYY9l0uCwQCAAAAAIMA
RgC6MwYABgIAAAAAAwAGGPZdLgsGAgAAAAADAEYAujOICAgCAAAAAAMABhj2XS4LCQIAAAAAAwBG
ALoziAgLAgAAAAADAAYY9l0uCwwCAAAAAIMARgC6M4gIDgIAAAAAAwAGGPZdLgsPAgAAAACDAEYA
ujOACBECAAAAAAMABhj2XS4LEwIAAAAAgwBGALozgAgVAgAAAAADAAYY9l0uCxcCAAAAAIMARgC6
M4AIGQIAAAAAAwAGGPZdLgsbAgAAAAADAEYAujOACB0CAAAAAAMABhj2XS4LHwIAAAAAgwBGALoz
gAghAgAAAAADAAYY9l0uCyMCAAAAAIMARgC6M2sIJQIAAAAAAwAGGPZdLgsmAgAAAAADAEYAujNr
CCgCAAAAAAMABhj2XS4LKQIAAAAAgwBGALozeQgrAgAAAAADAAYY9l0uCy0CAAAAAIMARgC6MwYA
LwIAAAAAAwAGGPZdLgsvAgAAAAADAEYAujNrCDECAAAAAAMABhj2XS4LMgIAAAAAAwBGALozcQg0
AgAAAAADAAYY9l0uCzcCAAAAAAMARgC6MxAAOQIAAAAAAxDGBfBMSAg6AgAAAAADEMYF+UxICDsC
AAAAAAMQxgVyUDoIPAIAAAAAAxDGBYNQOgg9AgAAAAADEMYFWzNBCD4CAAAAAAMQxgV0M0EIPwIA
AAAAAwAGGAwDBgBAAgAAAAADEMYFHjNPCEACAAAAAAMQxgUxM08IQQIAAAAAAxDGBTgIZAhCAgAA
AAADEMYFQQhkCEMCAAAAAAMABhjIAwYARAIAAAAAAxDGBYVCXQhEAgAAAAADEMYFj0JdCEUCAAAA
AAMQxgXLYSUIRgIAAAAAAxDGBeBhJQhHAgAAAAADEMYFkgnmB0gCAAAAAAMQxgWkCeYHSQIAAAAA
AxDGBZ4I7QdKAgAAAAADEMYFsQjtB0sCAAAAAAMQxgWGRRAITAIAAAAAAxDGBZ9FEAhNAgAAAAAD
EMYFokEsCE4CAAAAAAMQxgWzQSwITwIAAAAAAxDGBVxG9AdQAgAAAAADEMYFcUb0B1ECAAAAAAMQ
xgXMCfsHUgIAAAAAAxDGBeQJ+wdTAgAAAAADEMYFp3ACCFQCAAAAAAMQxgXDcAIIVQIAAAAAAxDG
BdsICQhWAgAAAAADEMYF9AgJCFcCAAAAAAMQxgVKNBcIWAIAAAAAAxDGBW40FwhZAgAAAAADEMYF
MQlWCFoCAAAAAAMQxgU8CVYIWwIAAAAAAxDGBTlFHghcAgAAAAADEMYFTEUeCF0CAAAAAAMQxgVX
CDMIXgIAAAAAAxDGBWYIMwhfAgAAAAADEMYFp0LfB2ACAAAAAAMQxgW2Qt8HYQIAAAAAAwAGGPZd
LgtiAgAAAAADAEYAujN5CGQCAAAAAAMABhj2XS4LZgIAAAAAAwBGALozawhoAgAAAAADAAYY9l0u
C2kCAAAAAAMARgC6MxAAawIAAAAAAwAGGPZdLgtsAgAAAAADAEYAujMGAG4CAAAAAAMABhj2XS4L
bgIAAAAAAwBGALozeQhwAgAAAAADAAYY9l0uC3ICAAAAAAMARgC6M3kIdAIAAAAAAwAGGPZdLgt2
AgAAAAADAEYAujNrCHgCAAAAAAMABhj2XS4LeQIAAAAAgwBGALozBgB7AgAAAAADAAYY9l0uC3sC
AAAAAAMARgC6M2sIfQIAAAAAAwAGGKQEBgB+AgAAAAADEMYNuGM0C34CAAAAAAMQxg3BYjkLfwIA
AAAAAwAGGO8ABgCAAgAAAAADEMYNc0hKAoACAAAAAAMABhh0AwYAgQIAAAAAAxDGDcl1UQmBAgAA
AAADEMYN2nVWCYICAAAAAAMABhh0AwYAgwIAAAAAAxDGDew4SgKDAgAAAAADEMYNYzdKAoQCAAAA
AAMQxg3+ZUoChQIAAAAAAwAGGBsBBgCGAgAAAAADEMYN9Fw/C4YCAAAAAAMABhh0AwYAhwIAAAAA
AxDGDaBLRQuHAgAAAAADAAYYygEGAIkCAAAAAAMQxg1ATnQJiQIAAAAAAwAGGHgCBgCKAgAAAAAD
EMYNDmZKAooCAAAAAAMABhgMAwYAiwIAAAAAAxDGDShujgiLAgAAAAADEMYNoEtLC4sCAAAAAAMQ
xg2+TpcIjQIAAAAAAxDGDRhkuAiOAgAAAAADEMYNQE50CY4CAAAAAAMQxg0obUYCjwIAAAAAAxDG
DfRinAiQAgAAAAADEMYN82emCJECAAAAAAMQxg0yT0oCkgIAAAAAAxDGDUlPEACTAgAAAAADEMYN
FnRKApQCAAAAAAMQxg0fdBAAlQIAAAAAAxDGDZ5gSgKWAgAAAAADEMYNrWAQAJcCAAAAAAMQxg2C
YEoCmAIAAAAAAxDGDZBgEACZAgAAAAADEMYNjXFKApoCAAAAAAMQxg3xB0oCmwIAAAAAAxDGDbg5
kgicAgAAAAADEMYNWgZKApwCAAAAAAMQxg3nUekInQIAAAAAAxDGDRpe7gieAgAAAAADEMYNxjDz
CJ8CAAAAAAMQxg3VMPkInwIAAAAAAxDGDZ85kgigAgAAAAADEMYNgAdGAqACAAAAAAMQxg0sZEoC
oQIAAAAAAxDGDT1kEACiAgAAAAADEMYNjDJKAqMCAAAAAAMQxg2YMhAApAIAAAAAAxDGDQZHbQKl
AgAAAAADEMYNEkehCKUCAAAAAAMQxg0KTo4IpgIAAAAAAxDGDfdNSgKmAgAAAAADEMYNwwxtAqcC
AAAAAAMQxg3Fd2cJpwIAAAAAAxDGDdV3bQmnAgAAAAADEMYNn0aOCKgCAAAAAAMQxg2RakoCqAIA
AAAAAxDGDZ1qEACpAgAAAAADEMYNiAhtAqoCAAAAAAMQxg2TCKEIqgIAAAAAAxDGDVhhegmrAgAA
AAADEMYFcT6GCawCAAAAAAMQxgVzdUYCrQIAAAAAAxDGBeRBBgCuAgAAAAADEMYFvHM/Ca4CAAAA
AAMQxgVXRpkJrwIAAAAAAxDGBeVvBgCxAgAAAAADEMYF0EUGALECAAAAAAMQxgVpXqAJsQIAAAAA
AxDGDekMbQKzAgAAAAADEMYNBw2hCLMCAAAAAAMQxg0vCm0CtAIAAAAAAxDGDUEKoQi0AgAAAAAD
EMYNGAVKArUCAAAAAAMQxg0gBRAAtgIAAAAAAxDGDSgFSgK3AgAAAAADEMYNLwUQALgCAAAAAAMQ
xg0HOpIIuQIAAAAAAxDGDSA6wwi5AgAAAAADEMYNG2xtAroCAAAAAAMQxg0xbKEIugIAAAAAAxDG
DTk6kgi7AgAAAAADEMYNSDrDCLsCAAAAAAMQxg16c5IIvAIAAAAAAxDGDYhzwwi8AgAAAAADEMYN
Y29KAr0CAAAAAAMQxg1zbxAAvgIAAAAAAxDGDXdp3Ai/AgAAAAADEMYNhmniCL8CAAAAAAMQxg38
c0oCwAIAAAAAAxDGDQl0EADBAgAAAAADEMYNWwxtAsICAAAAAAMQxg2BDKEIwgIAAAAAAxDGDSkM
bQLDAgAAAAADEMYNQgyhCMMCAAAAAAMQxg2iBkoCxAIAAAAAAxDGDUI4SgLFAgAAAAADEMYNZgZK
AsYCAAAAAAMQxg37NUoCxwIAAAAAAxDGDXQ5kgjIAgAAAAADEMYNZgttAsgCAAAAAAMQxg2KC6EI
yAIAAAAAAxDGDShnOQnJAgAAAAADEMYNU2xtAsoCAAAAAAMQxg1vbKEIygIAAAAAAxDGDS4vbQLL
AgAAAAADEMYNRC+hCMsCAAAAAAMQxg0Ra20CzAIAAAAAAxDGDSFroQjMAgAAAAADEMYNHjRKAs0C
AAAAAAMQxg00NBAAzgIAAAAAAxDGDck5kgjPAgAAAAADEMYN2jnDCM8CAAAAAAMQxg1GaQwJ0AIA
AAAAAxDGDVdpEgnQAgAAAAADEMYNMGJKAtECAAAAAAMQxg3LZzkJ0gIAAAAAAxDGDXxXRAnTAgAA
AAADEMYNlldKCdQCAAAAAAMQxg0lN0oC1QIAAAAAAxDGDbJsbQLWAgAAAAADEMYNzkySCNYCAAAA
AAMQxg0xNkoC1gIAAAAAAxDGDUg2EADXAgAAAAADEMYNpwxtAtgCAAAAAAMQxg2DUkoC2AIAAAAA
AxDGDYpSEADZAgAAAAADEMYNSGNKAtoCAAAAAAMQxg1aYxAA2wIAAAAAAxDGDTE+SgLcAgAAAAAD
EMYNRD4QAN0CAAAAAAMQxgW5cQYA3gIAAAAAAwAGGIUCBgDeAgAAAAADEMYFEy8GAN4CAAAAAAMQ
xg2LYgYJ3gIAAAAAAxDGDSFhAAnfAgAAAAADEMYNNmqrCOACAAAAAAMQxg1FarEI4AIAAAAAAxDG
Dec/yQjhAgAAAAADEMYFEUgGAOECAAAAAAMQxg26Mo4I4QIAAAAAAxDGDc8yAQDhAgAAAAADEMYN
agkMCeICAAAAAAMQxg1+CRIJ4gIAAAAAAxDGDfNqbQLjAgAAAAADEMYNLnFtAuMCAAAAAAMQxg06
caEI4wIAAAAAAxDGDVhNzwjkAgAAAAADEMYNZU3VCOQCAAAAAAMQxg0xa20C5QIAAAAAAxDGDUNr
oQjlAgAAAAADEMYNXFxtAuYCAAAAAAMQxg3oZr4I5gIAAAAAAxDGDbNlSgLnAgAAAAADEMYNXzxK
AugCAAAAAAMQxg0TaG0C6QIAAAAAAxDGDS9ooQjpAgAAAAADEMYNdk4ZCeoCAAAAAAMQxg2FTh8J
6gIAAAAAAxDGDYYwJgnrAgAAAAADEMYNnDAsCesCAAAAAAMQxg15XTMJ7AIAAAAAAxDGBVovgAnt
AgAAAAADEMYNVG5cCe4CAAAAAAMQxg1pbmEJ7wIAAAAAAxDGDalqSgLwAgAAAAADEMYNuWoQAPEC
AAAAAAMQxg3fPpII8gIAAAAAAxDGDe8+wwjyAgAAAAADEMYNYD+SCPMCAAAAAAMQxg1yP8MI8wIA
AAAAAxDGDZs+kgj0AgAAAAADEMYNsT7DCPQCAAAAAAMQxg1mSpII9QIAAAAAAxDGDXpKwwj1AgAA
AAADEMYFqkmSCfYCAAAAAAMQxgXHRgYA9wIAAAAAAxDGDYRJbQL3AgAAAAADEMYFrE+NCfcCAAAA
AAMQxg16BUoC+AIAAAAAAxDGDRxYUQn5AgAAAAADEMYNJ1hWCfoCAAAAAAMQxg05DUoC+wIAAAAA
AxDGDVQNEAD8AgAAAAADEMYN5HNGAv0CAAAAAAMQxg3wcz8J/gIAAAAAAxDGDfw4SgL/AgAAAAAD
EMYN/z6SCAADAAAAAAMABhh0AwYAAAMAAAAAAxDGDbhjNAsAAwAAAAADAAYYTgAGAAEDAAAAAAMQ
xg2jaFILAQMAAAAAAwAGGBgDBgACAwAAAAADEMYNOT1XCwIDAAAAAAMABhgBAAYAAwMAAAAAAxDG
BehXRAkDAxZjAAAAAJEY/F3xAgQDuGIAAAAAhhj2XQYABAOCSwAAAACDAKoABgAEA4JLAAAAAIMA
PwGICAQDgksAAAAAgwDiAYgIBQOCSwAAAACDAKkCiAgGA4JLAAAAAIMAMAOACAcDgksAAAAAgwCM
A4AICQOCSwAAAACDAOwDgAgLA4JLAAAAAIMAKASACA0DgksAAAAAgwBwBIAIDwOCSwAAAACDALwE
awgRA4JLAAAAAIMAGwBrCBIDgksAAAAAgwDIAHkIEwOCSwAAAACDAH8BBgAVA4JLAAAAAIMARwJr
CBUDgksAAAAAgwDbAnEIFgOCSwAAAACDAGIDEAAZA4JLAAAAAIMAqgN5CBoDgksAAAAAgwAKBGsI
HAOCSwAAAACDAEYEEAAdA4JLAAAAAIMAjgQGAB4DgksAAAAAgwBoAHkIHgOCSwAAAACDAAkBeQgg
A4JLAAAAAIMAsgFrCCIDgksAAAAAgwBmAgYAIwOCSwAAAACDAPoCawgjAwAAAQAsRQAAAQA9SwAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAOSwAAAQBvOQAAAQAOSwAAAQBvOQAAAQCiUAAAAgBdPgAAAwAOSwAAAQC4
TAAAAgAOSwAAAQAOSwAAAQAOSwAAAQDSbAAAAgAOSwAAAQDSbAAAAgAOSwAAAQDSbAAAAgAOSwAA
AQDSbAAAAgAOSwAAAQDSbAAAAgAOSwAAAQDSbAAAAQDSbAAAAQDSbAAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAAAAAAAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAAAAAAAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAAAAAAAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQBragAAAQAQMgAAAAAA
ABAQAQAVSgAAAQABSwAAAAAAAAAAAQBSUwAAAQCISBAQAgAGPQAAAQCQRwAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAAAAAAAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAAAAAAAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAAAAAAAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQBragAAAQAQMgAAAAAAABAQAQAVSgAAAQABSwAAAAAAAAAAAQBSUwAAAQCISBAQAgAGPQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQDMVwAAAgB5YwAAAQBdPhAQ
AgDjBhAQAwA6SAAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQBdPgAAAgDjBgAAAwA6SAAAAAAAAAAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQCISAAAAQCISAAAAQCISAAAAQDmUwAAAQCQRwAA
AQD2VwAAAQD2VwAAAQCIbgAAAQCCSAAAAQAsRQAgAAAAAAEgAQCfZgAgAAAAAAEgAQAGPQAgAAAA
AAAgAAAAAAEgAQCISAAgAAAAAAEgAQDKcQMAAQAOSwEgAQCiUAEgAgBdPgMAAwAOSwEgAQBvOQEg
AQBvOQMAAQAOSwMAAQAOSwEgAQDSbAEgAQDSbAEgAQDSbAMAAgAOSwEgAQC4TAMAAgAOSwEgAQDS
bAEgAQDSbAMAAgAOSwEgAQDSbAMAAgAOSwEgAQDSbAMAAgAOSwEgAQDSbAMAAgAOSwMAAQAOSwAA
AQAsRQAAAgAsRQAAAQAsRQAAAgAsRQEgAQDSbAAAAQAsRQAAAgAsRQEgAQDSbAAAAQAsRQAAAgAs
RQEgAQDSbAAAAQAsRQAAAgAsRQEgAQDSbAMAAgAOSwAAAQAsRQAAAgAsRQEgAQDSbAMAAgAOSwAA
AQAsRQAAAgAsRQEgAQDSbAMAAgAOSwAAAQAsRQAAAgAsRQEgAQDSbAMAAgAOSwAAAQAsRQAAAgAs
RQEgAQDSbAMAAgAOSwAAAQAsRQAAAgAsRQMAAQAOSwAAAQAsRQAAAgAsRQMAAQAOSwAAAQAsRQAA
AgAsRQEgAQC4TAMAAgAOSwAAAQAsRQAAAgAsRQAAAQAsRQAAAgAsRQMAAQAOSwAAAQAsRQAAAgAs
RQEgAQCiUAEgAgBdPgMAAwAOSwAAAQAsRQAAAgAsRQEgAQBvOQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAs
RQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAAAQAsRQAA
AgAsRQEgAQCyLwMAAgAOSwAAAQAsRQAAAgAsRQMAAQAOSwAAAQAsRQAAAgAsRQEgAQBvOQAAAQAs
RQAAAgAsRQAAAQAsRQAAAgAsRQEgAQBdPgMAAgAOSwAAAQAsRQAAAgAsRQEgAQBdPgMAAgAOSwAA
AQAsRQAAAgAsRQMAAQAOSwAAAQAsRQAAAgAsRQAAAQAsRQAAAgAsRQMAAQAOSwAgAAAAAAAgAAAA
AAAgAAAAAAAgAAAAAAEgAQDtdQAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAEgAQDKcQAg
AAAAAAAgAAAAAAAgAAAAAAEgAQDKcQAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAA
AAEgAQBNTwAgAAAAAAEgAQAjdAAgAAAAAAEgAQC+YAAgAAAAAAEgAQCUYAAgAAAAAAAgAAAAAAAg
AAAAAAAgAAAAAAAgAAAAAAEAAQDmMAAgAAAAAAAgAAAAAAEgAQBBZAAgAAAAAAEgAQCcMgEAAQAW
RwAgAAAAAAEAAQDndwAgAAAAAAEgAQDBagEAAQCXCAAgAAAAAAEAAQAQMgAgAAAAABEgAQAVSgAg
AAAAAAEgAQBSUwEgAQCISBEgAgAGPQEAAQALDQEAAQBFCgAgAAAAAAEgAQAkBQAgAAAAAAEgAQAz
BQEAAQAkOgEAAQA1bAEAAQBMOgEAAQCMcwAgAAAAAAEgAQB3bwEAAQCXaQAgAAAAAAEgAQANdAEA
AQCFDAEAAQBGDAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAEAAQCOCwAgAAAAAAEAAQBzbAEAAQBI
LwEAAQAlawAgAAAAAAEgAQA4NAEAAQDeOQEAAQBqaQAgAAAAAAAgAAAAAAAgAAAAAAEgAQCaVwAg
AAAAAAAgAAAAAAEgAQBMNgAgAAAAAAEgAQCVUgAgAAAAAAEgAQBeYwAgAAAAAAEgAQBIPgAgAAAA
AAAgAAAAAAEAAQBWagEAAQDTMgEAAQCCCQEAAQA+cQEAAQDhTQEAAQBHawAgAAAAAAAgAAAAAAAg
AAAAAAEAAQAzaAEAAQCWTgEAAQC0MAAgAAAAAAEgAQBragAgAAAAAAEgAQBtbgAgAAAAAAEgAQC9
agEAAQDzPgEAAQB2PwEAAQC1PgEAAQB+SgEAAQABSwAgAAAAAAAgAAAAAAAgAAAAAAEgAQArWAAg
AAAAAAEgAQBYDQAgAAAAAAEgAQD0cwAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAgAAAAAAAAAQAL
BQAAAQALBQAAAQALBQAAAQALBQAAAgDyBAAAAQALBQAAAgDyBAAAAQALBQAAAgDyBAAAAQALBQAA
AgDyBAAAAQALBQAAAgDyBAAAAQDyBAAAAQDyBAAAAQD7BAAAAgDyBAAAAQDyBAAAAQACBQAAAgDn
BAAAAwDyBAAAAQDgBAAAAQDNBAAAAgDyBAAAAQDyBAAAAQDgBAAAAQDnBAAAAgDyBAAAAQDnBAAA
AgDyBAAAAQDyBAAAAQDyBAMARQAHAKgBCACsAQgAKAALAJEADQCwAQ0APAAQALQBEADAABIAkQAT
AJEAFAC4ARQAwAAVALwBFgDAARcA/AAXAAQBGADEARgAaAAcAMgBHAB4ADoAkQA7AMwBOwD0AD4A
kQBCANABQgDAAEMA1AFDAMAARADYAUQAGAFiANwBZACRAGYA4AFnAOQBZwDAAGgA6AFpAJEAawCR
AHEAkQBzAJEACQD2XQEAEQD2XQYAGQD2XQoAKQD2XRAAMQD2XRAAOQD2XRAAQQD2XRAASQD2XRAA
UQD2XRAAWQD2XRAAYQD2XRAAaQD2XQYAgQD2XQYAcQCwRgYAkQD2XQYAuQD2XQYA2QD2XRUA8QD2
XRsA+QD2XRAAAQH2XQYACQH2XSEAEQH2XSYAAQH2XS4AGQH2XRAAKQH2XQEAOQHLOkAAQQGqM0wA
OQGYRkAA6QCaR7UB6QAMNLgBUQH2XcABWQGEWccBWQFjW8cBYQGAas8BaQGoRi4CcQD2XQYAmQC4
ZjMCcQGPYTkCeQGgSz8CgQEiRUYCcQCHR0oCiQHYUk4CcQGLbAEAkQH2XRAA6QBpBVoCmQHxMGIC
IQHeXWgCqQA+bUYCqQADcG0CiQB3PgYAoQHhYnwCqQHBOoECoQEgaoYCsQHcaJ0CsQG5daICoQFI
XUoCDAD2XbEC0QGsdLcCoQEgas8C4QHcaJ0CoQHzd50CoQF5d9wCoQD4MkoCqQFMU/ECoQEgavUC
qQG4OvwCoQGeXEoCoQGFd9wCoQHETEoCwQF/PgADoQGNSHwCoQGYRhADoQHEcxYDoQEVbBsD6QEg
LyIDmQD2XQYA6QAodCcDwQD2XS0D4QD2XQYAEgD9AUcDEgARAkcDEgBpBEcDEgB9BEcDCAAABUcD
CAAEBUwDCAAIBVEDCAAQBUcDCAAUBUwDCAAYBVEDEgAZBUcDCAAcBVYDEgAdBUcDCAAkBUcDCAAo
BUwDCAAwBUcDCAA0BUwDCAA4BVEDCAA8BVYDCABABVsDCABIBUcDCABMBUwDCABQBVEDCABUBVYD
CABYBVsDCABcBWADCABgBWUDCABkBWoDCABoBW8DCABsBXQDCABwBXkDCAB0BX4DCAB4BYMDCAB8
BYgDCACABY0DCACEBZIDCACIBZcDCACMBZwDCACQBaEDCACYBUcDCACcBUwDCACkBUcDCACoBUwD
CACsBVEDCACwBVYDCAC0BVsDCAC4BWADCAC8BWUDCADEBUcDCADIBUwDCADMBVEDCADUBUcDCADY
BUwDCADcBVEDCADkBUcDCADoBUwDCADsBVEDCAD0BUcDCAD4BUwDCAD8BVEDCAAEBkcDCAAIBkwD
CAAMBlEDCAAQBlYDCAAYBkcDCAAcBkwDCAAgBlEDCAAkBlYDCAAoBlsDCAAsBmADCAA0BlEDCAA4
BlYDCAA8BlsDCABEBkcDCABIBkwDCABMBlYDCABQBmADCABUBmoDCABcBkcDCABgBkwDCABkBlED
CABsBkcDCABwBkwDCAB0BlEDCAB4BlsDCAB8BmADCACABmoDCACEBm8DCACIBpIDCACMBpcDCACQ
BpwDCACUBqEDCACYBqYDCACcBqsDCACgBrADCACkBrUDCACoBroDCACsBr8DCACwBsQDCAC0BskD
CAC4Bs4DCAC8BtMDCADABtgDCADEBt0DCADIBuIDCADMBucDCADQBuwDCADUBvEDCADYBvYDCADc
BvsDCADgBgAECADkBgUECADoBgoECADsBg8ECADwBhQECAD0BhkECAD4Bh4ECAD8BiMECAAABygE
CAAEBy0ECAAIBzIECAAMBzcECAAQBzwECAAUB0EECAAYB0YECAAcB0sECAAgB1AECAAkB1UECAAo
B1oECAAsB18ECAAwB2QECAA0B2kECAA4B24ECAA8B3MECABAB3gECABEB30ECABIB4IECABMB4cE
CABQB4wECABUB5EECABYB5YECABcB5sECABgB6AECABkB6UECABoB6oECABsB68ECABwB7QECAB0
B7kECAB4B74ECAB8B8MECACAB8gECACEB80ECACIB9IECACMB9cECACQB9wECACUB+EECACYB+YE
CACcB+sECACgB/AECACkB/UECACoB/oECACsB/8ECACwBwQFCAC0BwkFCAC4Bw4FCAC8BxMFCADA
BxgFCADEBx0FCADIByIFCADMBycFCADQBywFCADUBzEFCADYBzYFCADcBzsFCADgB0AFCADkB0UF
CADoB0oFCADsB08FCADwB1QFCAD0B1kFCAD4B14FCAD8B2MFCAAACGgFCAAECG0FCAAICHIFCAAM
CHcFCAAQCHwFCAAUCIEFCAAYCIYFCAAcCIsFCAAgCJAFCAAkCJUFCAAoCJoFCAAsCJ8FCAAwCKQF
CAA0CKkFCAA4CK4FCAA8CLMFCABACLgFCABECL0FCABICMIFCABMCMcFCABQCMwFCABUCNEFCABY
CNYFCABcCNsFCABgCOAFCABkCOUFCABoCOoFCABsCO8FCABwCPQFCAB0CPkFCAB4CP4FCAB8CAMG
CACACAgGCACECA0GCACICBIGCACMCBcGCACQCBwGCACUCCEGCACYCCYGCACcCCsGCACgCDAGCACk
CDUGCACoCDoGCACsCD8GCACwCEQGCAC0CEkGCAC4CE4GCAC8CFMGCADECEcDCADICEwDCADMCFED
CADUCEcDCADYCEwDCADcCFEDCADkCEcDCADoCEwDCADsCFEDCADwCFYDCAD4CEcDCAD8CEwDCAAA
CVEDCAAECVYDCAAICVsDCAAQCUcDCAAUCUwDCAAYCVEDCAAcCVYDCAAgCVsDCAAkCWADCAAsCUcD
CAAwCUwDCAA0CVEDCAA4CVYDCABACUcDCABECUwDCABICVEDCABMCVYDCABUCUcDCABYCUwDCABc
CVEDCABkCUcDCABoCUwDCABsCVEDCABwCVYDCAB4CUcDCAB8CUwDCACACVEDCACECVYDCACICVsD
CAD4CUcDCAD8CUwDIABjAEwDIQBjAEwDLgALADUNLgATAD4NLgAbAF0NLgAjAGYNLgArAI8NLgAz
AI8NLgA7AI8NLgBDAGYNLgBLAJUNLgBTAI8NLgBbAKwNQABjAEwDQQBjAEwDYQBjAEwDgABjAEwD
gQBjAEwDgwB7AEwDoABjAEwDoQBjAEwDowCDAEwDwABjAEwDwQBjAEwD4ABjAEwD4QBjAEwD4wBj
AEwD4wCTADET4wCbAJET4wCjAEwDAAFjAEwDAQFjAEwDAwFjAEwDAwGbALsTAwGTADETAwGjAEwD
IAFjAEwDIQFjAEwDIwFjAEwDIwGrAOUTIwGbAOwTIwGjAEwDQAFjAEwDQQFjAEwDQwFjAEwDQwGz
ABYUQwG7AHsUYAFjAEwDYQFjAEwDYwFjAEwDYwHDANsUYwGbAOUUYwGjAEwDgAFjAEwDgQFjAEwD
gwFjAEwDgwGbAA8VgwGjAEwDoAFjAEwDoQFjAEwDowFjAEwDowGTADETowGbADkVowGjAEwDwAFj
AEwDwQFjAEwDwwFjAEwDwwGbAGMVwwGrAOUTwwGjAEwD4AFjAEwD4QFjAEwD4wFjAEwD4wGzAI0V
4wG7AP4VAAJjAEwDAQJjAEwDAwJjAEwDAwKbAGQWAwKTADETAwKjAEwDIAJjAEwDIQJjAEwDIwJj
AEwDIwKbAI4WIwKjAEwDQAJjAEwDQQJjAEwDQwJjAEwDQwLDANsUQwKbALgWQwKjAEwDYAJjAEwD
YQJjAEwDYwJjAEwDYwLDANsUYwKbAOIWYwKjAEwDgAJjAEwDgQJjAEwDgwJjAEwDgwKbAAwXgwKT
ADETgwKjAEwDoAJjAEwDoQJjAEwDowJjAEwDowKbADYXowKTADETowKjAEwDwAJjAEwDwwJjAEwD
wwKTADETwwKbAGAXwwKjAEwD4AJjAEwD4QJjAEwD4wJjAEwD4wKbAIoX4wKTADET4wKjAEwDAANj
AEwDAQNjAEwDAwNjAEwDAwObALQXAwOTADETAwOjAEwDIANjAEwDIQNjAEwDIwNjAEwDIwOrAOUT
IwObAN4XIwOjAEwDQANjAEwDQQNjAEwDQwNjAEwDQwOzAAgYQwO7AGsYYANjAEwDYQNjAEwDYwNj
AEwDYwObAMoYYwOjAEwDgANjAEwDgQNjAEwDgwNjAEwDgwObAPQYgwOTADETgwOjAEwDoANjAEwD
oQNjAEwDowNjAEwDowObAB4ZowOrAOUTowOjAEwDwANjAEwDwQNjAEwDwwNjAEwDwwOzAEgZwwO7
ALUZ4ANjAEwD4QNjAEwD4wNjAEwD4wOrAOUT4wObABka4wOjAEwDAARjAEwDAQRjAEwDAwRjAEwD
AwS7AEMaIARjAEwDIQRjAEwDIwRjAEwDIwS7ALMaQARjAEwDQQRjAEwDQwRjAEwDQwS7ACYbYARj
AEwDYQRjAEwDYwRjAEwDYwS7AJobgARjAEwDgQRjAEwDgwRjAEwDgwS7ABAcoARjAEwDoQRjAEwD
owRjAEwDowS7AIkcwARjAEwDwQRjAEwDwwRjAEwDwwS7AAYd4ARjAEwD4QRjAEwD4wRjAEwD4wS7
AIAdAAVjAEwDAQVjAEwDAwVjAEwDAwW7APodIAVjAEwDIQVjAEwDIwVjAEwDIwW7AIAeQAVjAEwD
QQVjAEwDQwVjAEwDQwW7APQeYAVjAEwDYQVjAEwDYwVjAEwDYwW7AGofgQVjAEwDgwVjAEwDgwW7
ANwfoQVjAEwDowVjAEwDowW7AEwgwQVjAEwDwwVjAEwDwwW7ALcg4QVjAEwD4wVjAEwD4wW7ACkh
6QVrAEwDAQZjAEwDAwZjAEwDAwazAKMhAwa7AAYiIQZjAEwDIwZjAEwDIwa7AGUiQQZjAEwDQwZj
AEwDQwa7ANIiYQZjAEwDYwZjAEwDYwa7ADwjgQZjAEwDgwZjAEwDgwa7ALAjoQZjAEwDowZjAEwD
owa7ABokqQZrAEwDwQZjAEwDwwZjAEwDwwa7AIgk4QZjAEwD4wZjAEwD4wa7APMkAQdjAEwDAwdj
AEwDAwe7AF0lIQdjAEwDIwdjAEwDIwe7AMklQQdjAEwDQwdjAEwDQwfDANsUQwebADQmQwejAEwD
YQdjAEwDYwdjAEwDYweTADETYwebAF4mYwejAEwDgQdjAEwDgwdjAEwDgwebAIgmgwerAOUTgwej
AEwDoQdjAEwDowdjAEwDowezALImowe7ABEnwQdjAEwDwwdjAEwDwwfDANsUwwebAG4nwwejAEwD
4QdjAEwD4wdjAEwD4webAIoX4wejAEwDAQhjAEwDAwhjAEwDAwibAJgnAwirAOUTAwijAEwDIQhj
AEwDIwhjAEwDIwizAMInIwi7ADEoQQhjAEwDQwhjAEwDQwibAJYoQwiTADETQwijAEwDYQhjAEwD
YwhjAEwDYwibAMAoYwiTADETYwijAEwDgQhjAEwDgwhjAEwDgwibAOoogwiTADETgwijAEwDoQhj
AEwDowhjAEwDowibABQpowirAOUTowijAEwDwQhjAEwDwwhjAEwDwwizAD4pwwi7AKUp4QhjAEwD
4whjAEwD4wi7AAYqAQljAEwDAwljAEwDAwm7AGoqIQljAEwDIwljAEwDIwm7AMIqQQljAEwDQwlj
AEwDQwm7ACArYQljAEwDYwljAEwDYwm7AHgrgQljAEwDgwljAEwDgwm7ANgriQlrAEwDoQljAEwD
owljAEwDowm7ADMswQljAEwDwwljAEwDwwm7AIks4QljAEwD4wljAEwD4wm7AOEsAQpjAEwDAwpj
AEwDAwq7ADUtIQpjAEwDIwpjAEwDIwq7AI0tQQpjAEwDQwpjAEwDQwq7AOktYQpjAEwDYwpjAEwD
Ywq7AEUugQpjAEwDgQprAEwDgwpjAEwDgwq7AJ8uoQpjAEwDowpjAEwDowq7APwuwQpjAEwDwwpj
AEwDwwq7AFcv4QpjAEwD4wpjAEwD4wq7ALMvAQtjAEwDAwtjAEwDAwu7AAwwIQtjAEwDIwtjAEwD
Iwu7AGQwQQtjAEwDQQtrAEwDQwtjAEwDQwu7AMMwYQtjAEwDYwtjAEwDYwu7ACAxZAtrAEwDgQtj
AEwDgwtjAEwDgwu7AHoxoQtjAEwDowtjAEwDowu7ANYxwQtjAEwDwwtjAEwDwwu7AC8y4QtjAEwD
4wtjAEwD4wu7AJAyAQxjAEwDAwxjAEwDAwy7AOsyBAxrAEwDIQxjAEwDIwxjAEwDIwy7AEUzQQxj
AEwDQwxjAEwDQwyTADETQwybAJ0zQwyjAEwDYQxjAEwDYwxjAEwDYwybAMczYwyjAEwDgQxjAEwD
gwxjAEwDgwzDANsUgwybAPEzgwyjAEwDoQxjAEwDowxjAEwDowybABs0owyjAEwDwQxjAEwDwwxj
AEwDwwybAEU0wwyTADETwwyjAEwD4QxjAEwD4wxjAEwD4wyTADET4wybAG804wyjAEwDAQ1jAEwD
Aw1jAEwDAw2bAJk0Aw2TADETAw2jAEwDIQ1jAEwDIw1jAEwDIw3DANsUIw2bAMM0Iw2jAEwDQQ1j
AEwDQw1jAEwDQw2bAJETQw2jAEwDYQ1jAEwDYw1jAEwDYw2bALsTYw3DANsUYw2jAEwDgQ1jAEwD
gw1jAEwDgw2bADkVgw2jAEwDhA1rAEwDoQ1jAEwDow1jAEwDow2bAGQWow2jAEwDpA1rAEwDwQ1j
AEwDww1jAEwDww2bAAwXww2jAEwD4Q1jAEwD4w1jAEwD4w2bADYX4w2jAEwDAQ5jAEwDAw5jAEwD
Aw6bAGAXAw6jAEwDIQ5jAEwDIQ5rAEwDIw5jAEwDIw7DANsUIw6bALQXIw6jAEwDQQ5jAEwDQw5j
AEwDQw6bAPQYQw6jAEwDYQ5jAEwDYw5jAEwDYw7DANsUYw6bAF4mYw6jAEwDgQ5jAEwDgw5jAEwD
gw6bAJYogw6jAEwDoQ5jAEwDow5jAEwDow6bAMAoow6jAEwDwQ5jAEwDww5jAEwDww6bAOooww6j
AEwD4Q5jAEwD4w5jAEwD4w6bAJ0z4w6jAEwDAQ9jAEwDAw9jAEwDAw+bAEU0Aw+jAEwDIQ9jAEwD
Iw9jAEwDIw+bAG80Iw+jAEwDQQ9jAEwDQw9jAEwDQw+bAJk0Qw+jAEwDYQ9jAEwDYw9jAEwDgQ9j
AEwDoQ9jAEwDwQ9jAEwDxA9rAEwD4Q9jAEwDARBjAEwDIRBjAEwDJBBrAEwDQRBjAEwDYRBjAEwD
gRBjAEwDoRBjAEwDwRBjAEwD4RBjAEwDARFjAEwDIRFjAEwDQRFjAEwDYRFjAEwDgRFjAEwDoRFj
AEwDwRFjAEwD4RFjAEwDARJjAEwDIRJjAEwDKRJrAEwDQRJjAEwDYRJjAEwDgRJjAEwDoRJjAEwD
wRJjAEwD4RJjAEwD6RJrAEwDARNjAEwDIRNjAEwDQRNjAEwDYRNjAEwDgRNjAEwDoRNjAEwDwRNj
AEwD4RNjAEwDARRjAEwDIRRjAEwDQRRjAEwDYRRjAEwDgRRjAEwDoRRjAEwDwRRjAEwD4RRjAEwD
ARVjAEwDIRVjAEwDQRVjAEwDYRVjAEwDgRVjAEwDoRVjAEwDwRVjAEwDyRVrAEwD4RVjAEwDARZj
AEwDIRZjAEwDQRZjAEwDYRZjAEwDgRZjAEwDoRZjAEwDwRZjAEwD4RZjAEwDARdjAEwDIRdjAEwD
QRdjAEwDYRdjAEwDgRdjAEwDoRdjAEwDwRdjAEwD4RdjAEwDARhjAEwDIRhjAEwDQRhjAEwDYRhj
AEwDgRhjAEwDoRhjAEwDwRhjAEwD4RhjAEwDARljAEwDIRljAEwDQRljAEwDYRljAEwDgRljAEwD
oRljAEwDwRljAEwD4RljAEwDARpjAEwDIRpjAEwDQRpjAEwDYRpjAEwDgRpjAEwDoRpjAEwDwRpj
AEwD4RpjAEwDARtjAEwDIRtjAEwDQRtjAEwDYRtjAEwDgRtjAEwDoRtjAEwDwRtjAEwD4RtjAEwD
5BtrAEwDARxjAEwDBBxrAEwDIRxjAEwDQRxjAEwDYRxjAEwDgRxjAEwDoRxjAEwDwRxjAEwDxBxr
AEwD4RxjAEwD5BxrAEwDAR1jAEwDIR1jAEwDQR1jAEwDYR1jAEwDgR1jAEwDoR1jAEwDwR1jAEwD
4R1jAEwDAR5jAEwDIR5jAEwDQR5jAEwDYR5jAEwDgR5jAEwDoR5jAEwDwB5jAEwDwR5jAEwD4B5j
AEwD4R5jAEwDAB9jAEwDAR9jAEwDIB9jAEwDIR9jAEwDQB9jAEwDQR9jAEwDYB9jAEwDYR9jAEwD
gB9jAEwDgR9jAEwDoB9jAEwDoR9jAEwDwB9jAEwDwR9jAEwDxB9rAEwD4B9jAEwD4R9jAEwD5B9r
AEwDACBjAEwDASBjAEwDICBjAEwDISBjAEwDQCBjAEwDQSBjAEwDYCBjAEwDYSBjAEwDgCBjAEwD
gSBjAEwDoCBjAEwDoSBjAEwDwCBjAEwDwSBjAEwD4CBjAEwD4SBjAEwDACFjAEwDASFjAEwDICFj
AEwDISFjAEwDQCFjAEwDQSFjAEwDYCFjAEwDYSFjAEwDgCFjAEwDgSFjAEwDoCFjAEwDoSFjAEwD
wCFjAEwDwSFjAEwD4CFjAEwD4SFjAEwDACJjAEwDASJjAEwDICJjAEwDISJjAEwDQCJjAEwDQSJj
AEwDYCJjAEwDYSJjAEwDgCJjAEwDgSJjAEwDoCJjAEwDoSJjAEwDwCJjAEwDwSJjAEwD4CJjAEwD
4SJjAEwDACNjAEwDASNjAEwDICNjAEwDISNjAEwDJCNrAEwDQCNjAEwDQSNjAEwDYCNjAEwDYSNj
AEwDgCNjAEwDgSNjAEwDhCNrAEwDoCNjAEwDoSNjAEwDwCNjAEwDwSNjAEwD4CNjAEwD4SNjAEwD
ACRjAEwDASRjAEwDICRjAEwDISRjAEwDQCRjAEwDQSRjAEwDYCRjAEwDYSRjAEwDgCRjAEwDgSRj
AEwDoCRjAEwDoSRjAEwDwCRjAEwDwSRjAEwD4CRjAEwD4SRjAEwDACVjAEwDASVjAEwDICVjAEwD
ISVjAEwDQCVjAEwDQSVjAEwDYCVjAEwDYSVjAEwDgCVjAEwDgSVjAEwDoCVjAEwDoSVjAEwDwCVj
AEwDwSVjAEwD4CVjAEwD4SVjAEwDACZjAEwDASZjAEwDICZjAEwDISZjAEwDQCZjAEwDQSZjAEwD
YCZjAEwDYSZjAEwDgCZjAEwDgSZjAEwDoCZjAEwDoSZjAEwDwCZjAEwDwSZjAEwD4CZjAEwD4SZj
AEwDACdjAEwDASdjAEwDICdjAEwDQCdjAEwDYCdjAEwDgCdjAEwDoCdjAEwDwCdjAEwDwSdjAEwD
4CdjAEwDAChjAEwDIChjAEwDQChjAEwDYChjAEwDgChjAEwDoChjAEwDwChjAEwD4ChjAEwDAClj
AEwDICljAEwDQCljAEwDYCljAEwDgCljAEwDoCljAEwDwCljAEwD4CljAEwDACpjAEwDICpjAEwD
QCpjAEwDYCpjAEwDgCpjAEwDoCpjAEwDwCpjAEwD4CpjAEwDACtjAEwDICtjAEwDQCtjAEwDYCtj
AEwDgCtjAEwDoCtjAEwDwCtjAEwD4CtjAEwDACxjAEwDICxjAEwDJCxrAEwDQCxjAEwDYCxjAEwD
gCxjAEwDoCxjAEwDwCxjAEwD4CxjAEwDAC1jAEwDIC1jAEwDQC1jAEwDYC1jAEwDgC1jAEwDoC1j
AEwDwC1jAEwD4C1jAEwDAC5jAEwDIC5jAEwDQC5jAEwDYC5jAEwDgC5jAEwDoC5jAEwDwC5jAEwD
yS6LAF0N4C5jAEwD6S6LAF0NAC9jAEwDIC9jAEwDKS/LAPQNQC9jAEwDSS/LAP0NYC9jAEwDaS/L
AA8OgC9jAEwDiS/LACoOoC9jAEwDqS/LADMOwC9jAEwDyS/LADwO4C9jAEwD6S/LAPkOADBjAEwD
CTDLAAIPIDBjAEwDKTDLAAsPQDBjAEwDSTDLABQPYDBjAEwDaTDLAB0PgDBjAEwDiTDLACYPoDBj
AEwDqTDLAC8PwDBjAEwDyTDLADgP4DBjAEwD6TDLADwOADFjAEwDCTHLAIQOIDFjAEwDKTHLAEEP
QDFjAEwDSTHLADMOYDFjAEwDaTHLADwOgDFjAEwDiTHLAEoPoDFjAEwDqTHLAHsOwDFjAEwDyTHL
AIQO4DFjAEwD6THLAGkOADJjAEwDCTLLAFMPIDJjAEwDKTLLAFwPQDJjAEwDSTLLAGUPYDJjAEwD
aTLLAG4PgDJjAEwDiTLLAHcPoDJjAEwDqTLLAIAPwDJjAEwDyTLLAIkP4DJjAEwD6TLLAJIPADNj
AEwDCTPLAJsPIDNjAEwDKTPLAKQPQDNjAEwDSTPLAK0PYDNjAEwDaTPLALYPgDNjAEwDiTPLAL8P
oDNjAEwDqTPLAMgPwDNjAEwDyTPLANEP4DNjAEwD6TPLANoPADRjAEwDCTTLAOMPIDRjAEwDKTTL
AOwPQDRjAEwDSTTLAPUPYDRjAEwDaTTLAP4PgDRjAEwDiTTLAAcQoDRjAEwDqTTLABAQwDRjAEwD
yTTLABkQ4DRjAEwD6TTLACIQADVjAEwDCTXLACsQIDVjAEwDKTXLADQQQDVjAEwDSTXLAF0NYDVj
AEwDaTXLAIUQgDVjAEwDiTXLAI4QoDVjAEwDqTXLAJcQwDVjAEwDyTXLAKAQ4DVjAEwD6TXLAKkQ
ADZjAEwDCTbLALIQIDZjAEwDKTbLALsQQDZjAEwDSTbLAMQQYDZjAEwDaTbLAM0QgDZjAEwDiTbL
ANYQoDZjAEwDqTbLAN8QwDZjAEwDyTbLAOgQ4DZjAEwD6TbLAPEQADdjAEwDCTfLAPoQIDdjAEwD
KTfLAAMRQDdjAEwDSTfLAAwRYDdjAEwDaTfLABURgDdjAEwDiTfLAB4RoDdjAEwDqTfLACcRwDdj
AEwDyTfLADAR4DdjAEwD6TfLADkRADhjAEwDCTjLAEIRIDhjAEwDKTjLAEsRQDhjAEwDSTjLAFQR
YDhjAEwDaTjLAF0RgDhjAEwDiTjLADMOoDhjAEwDqTjLAGYRwDhjAEwDyTjLAG8R4DhjAEwD6TjL
AHgRADljAEwDCTnLAIERIDljAEwDKTnLAIoRQDljAEwDSTnLAJMRYDljAEwDaTnLAJwRgDljAEwD
iTnLAKURoDljAEwDqTnLAK4RwDljAEwDyTnLALcR4DljAEwD6TnLANIRADpjAEwDCTrLANsRIDpj
AEwDKTrLAOQRQDpjAEwDSTrLAO0RYDpjAEwDaTrLAP8RgDpjAEwDiTrLAAgSoDpjAEwDqTrLABES
wDpjAEwDyTrLABoS4DpjAEwD6TrLACMSADtjAEwDCTvLACwSIDtjAEwDKTvLADUSSTvLAD4SaTvL
AEcSiTvLAFASqTvLAFkSyTvLAGIS6TvLAGsSCTzLAHQSKTzLAIYSSTzLAI8SaTzLAJgSiTzLAKES
qTzLAKoSyTzLALMS6TzLAM4SCT3LAOASID1jAEwDKT3LAOkSQD1jAEwDST3LAPISYD1jAEwDaT3L
APsSgD1jAEwDiT3LAAQToD1jAEwDqT3LAA0TwD1jAEwDyT3LAPkO4D1jAEwD6T3LABYTAD5jAEwD
CT7LAB8TID5jAEwDQD5jAEwDYD5jAEwDgD5jAEwDoD5jAEwDwD5jAEwD4D5jAEwDAD9jAEwDID9j
AEwDQD9jAEwDYD9jAEwDgD9jAEwDoD9jAEwDwD9jAEwD4D9jAEwDAEBjAEwDIEBjAEwDQEBjAEwD
YEBjAEwDgEBjAEwDoEBjAEwDwEBjAEwD4EBjAEwDAEFjAEwDIEFjAEwDQEFjAEwDYEFjAEwDgEFj
AEwDoEFjAEwDwEFjAEwD4EFjAEwDAEJjAEwDIEJjAEwDQEJjAEwDYEJjAEwDgEJjAEwDoEJjAEwD
wEJjAEwD4EJjAEwDAENjAEwDIENjAEwDQENjAEwDYENjAEwDgENjAEwDoENjAEwDwENjAEwD4ENj
AEwDAERjAEwDIERjAEwDQERjAEwDYERjAEwDgERjAEwDoERjAEwDwERjAEwD4ERjAEwDAEVjAEwD
IEVjAEwDQEVjAEwDYEVjAEwDgEVjAEwDoEVjAEwDwEVjAEwDoEZjAEwDwEZjAEwD4EZjAEwDAEdj
AEwDIEdjAEwDQEdjAEwDYEdjAEwDgEdjAEwDoEdjAEwDwEdjAEwD4EdjAEwDAEhjAEwDIEhjAEwD
QEhjAEwDYEhjAEwDgEhjAEwDoEhjAEwDwEhjAEwD4EhjAEwDAEljAEwDIEljAEwDQEljAEwDYElj
AEwDgEljAEwDoEljAEwDwEljAEwD4EljAEwDAEpjAEwDIEpjAEwDQEpjAEwDYEpjAEwDgEpjAEwD
oEpjAEwDwEpjAEwD4EpjAEwDAEtjAEwDIEtjAEwDQEtjAEwDYEtjAEwDgEtjAEwDoEtjAEwDwEtj
AEwD4EtjAEwDAExjAEwDIE1jAEwDQE1jAEwDYE1jAEwDgE1jAEwDoE1jAEwDwE1jAEwD4E1jAEwD
AE5jAEwDIE5jAEwDQE5jAEwDYE5jAEwDgE5jAEwDoE5jAEwDwE5jAEwD4E5jAEwDAE9jAEwDIE9j
AEwDQE9jAEwDYE9jAEwDgE9jAEwDoE9jAEwDwE9jAEwD4E9jAEwDAFBjAEwDIFBjAEwDQFBjAEwD
YFBjAEwDgFBjAEwDoFBjAEwDwFBjAEwD4FBjAEwDAFFjAEwDIFFjAEwDQFFjAEwDYFFjAEwDgFFj
AEwDoFFjAEwDwFFjAEwD4FFjAEwDAFJjAEwDIFJjAEwDQFJjAEwDYFJjAEwDgFJjAEwDoFJjAEwD
wFJjAEwD4FJjAEwDAFNjAEwDIFNjAEwDQFNjAEwDYFNjAEwDgFNjAEwDoFNjAEwDwFNjAEwD4FNj
AEwDAFRjAEwDIFRjAEwDQFRjAEwDYFRjAEwDgFRjAEwDoFRjAEwDwFRjAEwD4FRjAEwDAFVjAEwD
IFVjAEwDQFVjAEwDYFVjAEwDgFVjAEwDoFVjAEwDwFVjAEwD4FVjAEwDAFZjAEwDIFZjAEwDQFZj
AEwDYFZjAEwDgFZjAEwDoFZjAEwDwFZjAEwD4FZjAEwDAFdjAEwDIFdjAEwDQFdjAEwDYFdjAEwD
gFdjAEwDoFdjAEwDwFdjAEwD4FdjAEwDAFhjAEwDIFhjAEwDQFhjAEwDYFhjAEwDgFhjAEwDoFhj
AEwDwFhjAEwD4FhjAEwDAFljAEwDIFljAEwDQFljAEwDYFljAEwDgFljAEwDoFljAEwDwFljAEwD
4FljAEwDAFpjAEwDIFpjAEwDQFpjAEwDYFpjAEwDgFpjAEwDoFpjAEwDwFpjAEwD4FpjAEwDAFtj
AEwDIFtjAEwDQFtjAEwDYFtjAEwDgFtjAEwDoFtjAEwDwFtjAEwD4FtjAEwDAFxjAEwDIFxjAEwD
QFxjAEwDYFxjAEwDgFxjAEwDoFxjAEwDwFxjAEwD4FxjAEwDAF1jAEwDIF1jAEwDQF1jAEwDYF1j
AEwDgF1jAEwDoF1jAEwDwF1jAEwD4F1jAEwDAF5jAEwDIF5jAEwDQF5jAEwDYF5jAEwDgF5jAEwD
oF5jAEwDwF5jAEwD4F5jAEwDAF9jAEwDIF9jAEwDQF9jAEwDYF9jAEwDgF9jAEwDoF9jAEwDwF9j
AEwD4F9jAEwDAGBjAEwDIGBjAEwDQGBjAEwDYGBjAEwDgGBjAEwDoGBjAEwDwGBjAEwD4GBjAEwD
AGFjAEwDIGFjAEwDQGFjAEwDYGFjAEwDgGFjAEwDoGFjAEwDwGFjAEwD4GFjAEwDAGJjAEwDIGJj
AEwDQGJjAEwDYGJjAEwDgGJjAEwDoGJjAEwDwGJjAEwD4GJjAEwDAGNjAEwDIGNjAEwDQGNjAEwD
YGNjAEwDgGNjAEwDoGNjAEwDwGNjAEwD4GNjAEwDAGRjAEwDIGRjAEwDQGRjAEwDYGRjAEwDgGRj
AEwDoGRjAEwDwGRjAEwD4GRjAEwDAGVjAEwDIGVjAEwDQGVjAEwDYGVjAEwDgGVjAEwDoGVjAEwD
wGVjAEwD4GVjAEwDAGZjAEwDIGZjAEwDQGZjAEwDYGZjAEwDgGZjAEwDoGZjAEwDwGZjAEwD4GZj
AEwDAGdjAEwDIGdjAEwDQGdjAEwDYGdjAEwDgGdjAEwDoGdjAEwDwGdjAEwD4GdjAEwDAGhjAEwD
IGhjAEwDQGhjAEwDYGhjAEwDgGhjAEwDoGhjAEwDwGhjAEwD4GhjAEwDAGljAEwDIGljAEwDQGlj
AEwDYGljAEwDgGljAEwDoGljAEwDwGljAEwD4GljAEwDAGpjAEwDIGpjAEwDQGpjAEwDYGpjAEwD
gGpjAEwDoGpjAEwDwGpjAEwDoG7LAPQNwG7LAPQNAG/LAP0NIG/LAP0NYG/LAAYOoG/LAA8O4G/L
ABgOAHDLACEOQHDLACoOgHDLADMOoHDLADwOwHDLAEUO4HDLAE4OAHHLAFcOQHHLAGAOYHHLAGkO
oHHLAHIOwHHLAHsO4HHLAIQOAHLLAI0OIHLLAJYOQHLLAJ8OYHLLAKgOgHLLALEOoHLLALoOwHLL
AMMO4HLLAMwOAHPLANUOIHPLAN4OQHPLAOcOYHPLAPAOIH/LAPkOQH/LAAIPgH/LAAsPwH/LABQP
4H/LABQPIIDLAB0PQIDLACYPYIDLAC8PoIDLADgP4IDLADwOIIHLAIQOYIHLAEEPoIHLADMOwIHL
ADwO4IHLAEoPAILLAHsOIILLAIQOQILLAGkOYILLAFMPgILLAFwPoILLAGUPwILLAGUP4ILLAG4P
AIPLAG4PIIPLAHcPQIPLAHcPYIPLAIAPgIPLAIAPoIPLAIkPwIPLAJIP4IPLAJsPAITLAKQPIITL
AK0PQITLALYPYITLAL8PgITLAL8PoITLAMgPwITLANEP4ITLANoPAIXLANoPIIXLAOMPQIXLAOMP
YIXLAOwPgIXLAOwPoIXLAPUPwIXLAP4P4IXLAAcQAIbLABAQIIbLABAQQIbLABkQYIbLACIQgIbL
ACIQoIbLACsQwIbLACsQ4IbLADQQAIfLAD0QIIfLAEYQQIfLAE8QYIfLAFgQgIfLAGEQoIfLAGoQ
wIfLAHMQ4IfLAHwQAIjLAF0NIIjLAF0NQIjLAIUQYIjLAIUQgIjLAI4QoIjLAI4QwIjLAJcQ4IjL
AJcQAInLAKAQIInLAKAQQInLAKkQYInLAKkQgInLALIQoInLALIQwInLALsQ4InLALsQAIrLAMQQ
IIrLAMQQQIrLAM0QYIrLAM0QgIrLANYQoIrLANYQwIrLAN8Q4IrLAN8QAIvLAOgQIIvLAOgQQIvL
APEQYIvLAPoQgIvLAAMRoIvLAAwRwIvLABUR4IvLAB4RAIzLAB4RIIzLACcRQIzLADARYIzLADAR
gIzLADkRoIzLADkRwIzLAEIR4IzLAEIRAI3LAEsRII3LAEsRQI3LAFQRYI3LAFQRgI3LAF0RoI3L
AF0RwI3LADMO4I3LAGYRAI7LAG8RII7LAG8RQI7LAHgRYI7LAIERgI7LAIoRoI7LAJMRwI7LAJMR
4I7LAJwRAI/LAKURII/LAKURQI/LAK4RYI/LAK4RgI/LALcRoI/LALcRwI/LAMARAJDLAMkRIJDL
ANIRQJDLANsRYJDLAOQRgJDLAOQRoJDLAO0RwJDLAPYR4JDLAP8RAJHLAP8RIJHLAAgSQJHLAAgS
YJHLABESgJHLABoSoJHLABoSwJHLACMS4JHLACMSAJLLACwSIJLLACwSQJLLADUSYJLLAD4SgJLL
AEcSoJLLAFASwJLLAFkS4JLLAFkSAJPLAGISIJPLAGISQJPLAGsSYJPLAGsSgJPLAHQSoJPLAH0S
wJPLAIYS4JPLAIYSAJTLAI8SIJTLAI8SQJTLAJgSYJTLAJgSgJTLAKESoJTLAKESwJTLAKoS4JTL
AKoSAJXLALMSIJXLALMSQJXLALwSYJXLAMUSgJXLAM4SoJXLANcSwJXLAOAS4JXLAOkSAJbLAOkS
IJbLAPISQJbLAPISYJbLAPsSgJbLAPsSoJbLAAQTwJbLAA0TAJfLAPkOQJfLABYTgJfLAB8TwJfL
ACgTxwNYBskDWAbLA1gGzQNYBs8DWgbRA1gG0wNYBtUDWgbXA1wG2wNeBt0DXgbhA1gG4wNYBukD
WgbrA1oG7QNaBvEDXgb1A1oG9wNaBvsDWgb/A1oGAwRaBhEEWgYXBFoGHQRaBiMEWgYrBFoGMwRa
BjsEWgZDBFoGVwReBmkEXgZrBF4GcwRYBskEXgbXBFgG4QReBukEXgb9BFoG/wRaBgEFWAYDBVoG
BQVaBgcFWAYJBVgGCwVYBg0FWgYPBVoGEQVcBhMFWgYVBVgGFwVaBhkFXAYbBVoGHQVaBh8FXgYh
BVoGIwVaBiUFWAYnBVgGKQVYBisFWAYtBVgGLwVYBjEFWAYzBVgGNQVYBjcFWAY5BVgGOwVaBj0F
WgZBBWAGQwVYBkUFWAZHBVgGSQVYBk0FWAZRBVgGUwVYBlcFWgZbBV4GXQVcBl8FXgZhBVoGYwVY
BmUFXAZrBVgGbQVYBm8FWAZxBVgGewVYBn0FWAaBBVgGgwVYBokFWAaLBVgGjQVYBo8FWAaTBVoG
mwVYBp0FWAajBVgGpQVaBqcFWgapBVoGqwVYBq0FWAavBVgGsQVYBrMFWAa1BVgGtwVYBrkFWAa7
BVgGvQVaBr8FWgbNBVoGzwVYBtEFWAbZBVoG2wVaBt0FWgbfBVoG4QVYBuMFWAbvBVoG8QVYBvMF
Wgb1BVoG9wVYBvkFWAb7BVwG/QVcBv8FWAYBBloGAwZaBgUGWgYHBloGNABfAHEAgwCVAKcAuQDL
AN0A7wABARMBJQE3AUkBWwFtAX8BkQGjAdQB5gH4AQoCHAJTAnECjALWAuICBQMCAAEAAwAVADAA
LgAAAM1CgAAAAAoKhAAAABsJiAAAAI5GjAAAAAQKkAAAAOdwlAAAABUJmAAAAMBFnAAAAJo0oAAA
AGdFpAAAAP1hqAAAAMxBrAAAAH0IsAAAAJxQuAAAAJUzvAAAAApNyAAAAJszzAAAAE8J4AAAANJC
5AAAACUJ0AAAAM1CgAAAAAoKhAAAABsJiAAAAI5GjAAAAAQKkAAAAOdwlAAAABUJmAAAAMBFnAAA
AJo0oAAAAGdFpAAAAP1hqAAAAMxBrAAAAH0IsAAAABVMtAAAAJxQuAAAAJUzvAAAAOZLxAAAAApN
yAAAAJszzAAAACUJ0AAAALNM2AAAAGhM1AAAAMZL3AAAAE8J4AAAANJC5AAAAApNyAAAAJxQuAAA
AJUzvAAAAJszzAAAACUJ0AAAANJC5AAAAP1hqAAAAAoKhAAAABsJiAAAAMBFnAAAAMxBrAAAAI5G
jAAAAAQKkAAAAOdwlAAAABUJmAAAAJo0oAAAAE8J4AAAAGdFpAAAAH0IsAAAAM1CgAACAAEAAwBk
AAUAdgEGAHgBDAB5AREAewESAH0BPwB/AWMAggFqAIMBawCHAWwAiAFwAIkBcQCKAXQAjAF2AO4B
AAC4TF0LAADBamMLAADGBmMLAABBZGMLAAD7TWMLAAAjdGMLAACjRmcLAAC8OWsLAACjOWsLAADQ
TnALAAAcY3ULAAALDXoLAABNaH4LAABFCnoLAAB3XHoLAAAkBWMLAABNT2MLAABWaoMLAAC+YGML
AAAzBWMLAABWZIkLAACUYGMLAAAGZ48LAACRBWMLAAC+cWMLAAALCGMLAAAkOmsLAAA1bHoLAAAN
QJQLAAAzaHoLAABMOmsLAACMc2sLAADhTZoLAAB3b2MLAACXaaALAAARUqYLAAAvXqsLAABHa3oL
AAANdGMLAADmMLALAADTMmcLAAAGa3oLAAA+cXoLAACbSXoLAABJYbYLAAChYrwLAACTB8ILAACC
CcYLAACcMmMLAAAWR3oLAACFDHoLAAApTmcLAAA3bcILAACWTswLAAC0MNILAABYDWMLAAClXdgL
AABGDHoLAAC8BmMLAABZOGMLAACIBmMLAAAaNmMLAACJOWsLAACOC3oLAADoZ94LAABzbHoLAABI
L3oLAAAla3oLAAA4NGMLAADeOWsLAABqacYLAABMYmMLAADjZ94LAAAfP2sLAAAYOWMLAAD0c8IL
AADRDHoLAACaV+QLAAArWOoLAADOZWMLAAB3PGMLAAA4N2MLAABtbu8LAADnd/QLAAC/bHoLAADd
TGsLAABMNmMLAABQTvoLAAC5DHoLAAC1PmsLAADzPmsLAAB2P2sLAAC9amMLAACVUmMLAAB+SmsL
AACXCHoLAACAYQAMAABeY2MLAABIPmMLAADBamMLAADGBmMLAABBZGMLAAD7TWMLAAAjdGMLAACj
RmcLAAC8OWsLAACjOWsLAADQTnALAAAcY3ULAAALDXoLAABNaH4LAABFCnoLAAB3XHoLAAAkBWML
AABNT2MLAABWaoMLAAC+YGMLAAAzBWMLAABWZIkLAACUYGMLAAAGZ48LAACRBWMLAAC+cWMLAAAL
CGMLAAAkOmsLAAA1bHoLAAANQJQLAAAzaHoLAABMOmsLAACMc2sLAADhTZoLAAB3b2MLAACXaaAL
AAARUqYLAAAvXqsLAABHa3oLAAANdGMLAADmMLALAADTMmcLAAAGa3oLAAA+cXoLAACbSXoLAABJ
YbYLAAChYrwLAACTB8ILAACCCcYLAACcMmMLAAAWR3oLAACFDHoLAAApTmcLAAA3bcILAACWTswL
AAC0MNILAABYDWMLAAClXdgLAABGDHoLAAC8BmMLAABZOGMLAACIBmMLAAAaNmMLAACJOWsLAACO
C3oLAADoZ94LAABzbHoLAABIL3oLAAAla3oLAAA4NGMLAADeOWsLAABqacYLAABMYmMLAADjZ94L
AAAfP2sLAAAYOWMLAAD0c8ILAADRDHoLAACaV+QLAAArWOoLAADOZWMLAAB3PGMLAAA4N2MLAABt
bu8LAADnd/QLAAC/bHoLAADdTGsLAABMNmMLAABQTvoLAAC5DHoLAAC1PmsLAADzPmsLAAB2P2sL
AAC9amMLAACVUmMLAAB+SmsLAACXCHoLAACAYQAMAABeY2MLAABIPmMLAAARbnoLAAADagYMAAC/
SnoLAADbL2MLAABxT2cLAAAPL2sLAABiO2sLAABnOwwMAABIBWsLAABAYHoLAADaBWMLAAC6R3oL
AABoR3oLAAATT2MLAADIaRIMAAASB2MLAAAub3oLAAB9NmMLAADBXmMLAAA3XWMLAABQPBgMAAA5
B2MLAAAMYGMLAABvXWMLAABFQB4MAAD3bmcLAAD9OWsLAADgX2MLAABqX2MLAAAXDHoLAAA3aSQM
AAA8b2sLAADEO2sLAADLOwwMAABgBWsLAAA+SWcLAAC3B2MLAABRQnoLAAAjYmMLAADRZmMLAABY
C2sLAADQQCoMAADIXWMLAAD3PmsLAACGSmcLAACYXGMLAAAAUzAMAABKQmcLAACUQDYMAADwNGML
AACwd2MLAAB6P2sLAAAHajwMAACuZ2MLAABlZ2MLAABxSXoLAAAhSWcLAACAbmMLAACidWsLAACG
N2MLAABXVmMLAACnc2sLAABFVGMLAABfZmMLAABld2MLAACrdmMLAAD2MWMLAAA/c2MLAACDQWML
AAD/a2MLAACKS2MLAAAXPEIMAAAqV2MLAAB7MmMLAAAeVmMLAAAWVWMLAAC5VWMLAAAgTWMLAAAS
N2MLAABJMGMLAACFdGMLAABRVWMLAABoOWMLAADJNmMLAACzBWMLAAASbWMLAACcZGMLAAChPGML
AACCOGMLAAAEBmMLAADAZGMLAADNPGMLAACuOGMLAAAoBmMLAADkZGMLAAD5PGMLAADaOGMLAABM
BmMLAABiXmMLAAA4OGMLAABqQmMLAAAcN2MLAADLdGMLAAAVWEgMAACsU2MLAAC4PXoLAADec2ML
AAAPVGMLAAA6ZWMLAADhdmMLAAAVdmMLAABOMWMLAACFcmMLAAD5QGMLAABva2MLAADcVmMLAADi
VGMLAAAEZWMLAAC4YmMLAACPZmMLAADSU2MLAAAvNWMLAAD3SnoLAAAVM2MLAABRcmMLAABQMGML
AAAccmMLAAD+dGMLAACMdGMLAABOdWMLAADHN2MLAAAJOGMLAACkZWMLAAAMd2MLAABGdmMLAACF
MWMLAADCcmMLAAAmQWMLAACea2MLAABXN2MLAADjNWMLAACwVGMLAACQXmMLAACkNmMLAAANT2ML
AAB6U2MLAAA6ZmMLAAA4d2MLAAB4dmMLAAC9MWMLAAAAc2MLAABUQWMLAADOa2MLAAABV2MLAADp
VWMLAAC6VmMLAABRMmMLAACPVmMLAABrTmMLAACJVWMLAABvc2MLAACLZU4MAACUPmMLAABdcmML
AABQV2MLAAAyNWMLAAB8VGMLAABsAWMLAAAcAmMLAADIAmMLAABPA2MLAACcP2MLAAAwMmMLAABk
OWMLAAA0OGMLAADDN2MLAABVWFQMAADjPVkMAACDbF4MAACfZmMMAAAGPWMMAADyNWMMAACjRmcM
AAA2bmcMAAC4TGsMAADrY3EMAADbYnYMAAB3SGMMAADtdXwMAADwOGMMAABnN2MMAAAZZmMMAAD4
XIEMAAC4TIcMAABQTo0MAAASZmMMAAA2bmcMAAC4TJMMAADQTpoMAABWZJ8MAABQTo0MAAA3baUM
AAAcY6kMAABNaK4MAABNT2MMAAAjdGMMAAC+YGMMAACUYGMMAAC+cWMMAAALCGMMAAC8ObMMAADG
BmMMAAARUrgMAAAvXr0MAADmMMIMAACjObMMAACTB6UMAABBZGMMAACcMmMMAAAWR8gMAAApTmcM
AAD7TWMMAADRDMgMAADnd8wMAACjRmcMAADBamMMAACXCMgMAACAYdIMAAALDcgMAABFCsgMAAAk
BWMMAAAzBWMMAAAkOrMMAAA1bMgMAABMOrMMAACMc7MMAAB3b2MMAACXadgMAAANdGMMAACFDMgM
AABGDMgMAAC8BmMMAABZOGMMAACIBmMMAAAaNmMMAACJObMMAACOC8gMAADoZ94MAABzbMgMAABI
L8gMAAAla8gMAAA4NGMMAADeObMMAABqaeQMAABMYmMMAADjZ94MAACaV+oMAAA4N2MMAAC/bMgM
AADdTLMMAABMNmMMAAC5DMgMAACVUmMMAABeY2MMAABIPmMMAAChYvAMAABJYfYMAABWavwMAAAN
QAINAADTMmcMAACCCeQMAAAGa8gMAAA+ccgMAADhTQgNAABHa8gMAAB3XMgMAAAGZw4NAADOZWMM
AAB3PGMMAAAzaMgMAACWThMNAAC0MBkNAAClXR8NAABtbiUNAAC9amMMAADzPrMMAAB2P7MMAAC1
PrMMAAB+SrMMAACbScgMAACRBWMMAAArWHwMAABYDWMMAAD0c6UMAAAYOWMMAAAfP7MMAADrY3EM
AADEaCoNAABcPS8NCAAEAAIAEAAFAAIAAgABAAMAAQACAAMACAAGAAQAEAAHAAQAAgBAAAUAAQBB
AAUACAAIAAYAEAAJAAYAAgBCAAcACAAKAAgAEAALAAgAAgBDAAkAAQBEAAkACAAMAAoAEAANAAoA
AgBFAAsACAAOAAwAEAAPAAwAAgBGAA0AAQBHAA0ACAAQAA4AEAARAA4AAgBIAA8ACAASABAAEAAT
ABAAAgBJABEACAAUABIAEAAVABIAAgBKABMACAAWABQAEAAXABQAAgBLABUACAAYABYAEAAZABYA
AgBMABcACAAaABgAEAAbABgAAgBNABkAAQBOABkACAAcABoAEAAdABoAAgBPABsACAAeABwAEAAf
ABwAAgBQAB0AAQBRAB0ACAAgAB4AEAAhAB4AAgBSAB8ACAAiACAAEAAjACAAAgBTACEAAQBUACEA
CAAkACIAEAAlACIAAgBVACMAAQBWACMACAAmACQAEAAnACQAAgBXACUAAQBYACUACAAoACYAEAAp
ACYAAgBZACcAAQBaACcACAAqACgAEAArACgAAgBbACkAAQBcACkACAD2ACoAEAD3ACoAAgBdACsA
CAD4ACwAEAD5ACwAAgBeAC0AAQBfAC0ACAD6AC4AEAD7AC4AAgBgAC8ACAD8ADAAEAD9ADAAAgBh
ADEACAD+ADIAEAD/ADIAAgBiADMACAAAATQAEAABATQAAgBjADUACAACATYAEAADATYAAgBkADcA
AQBlADcACAAEATgAEAAFATgAAgBmADkAAQBnADkACAAGAToAEAAHAToAAgBoADsACAAIATwAEAAJ
ATwAAgBpAD0AAQBqAD0ACAAKAT4AEAALAT4AAgBrAD8AAQBsAD8ACAAMAUAAEAANAUAAAgBtAEEA
AQBuAEEACAAOAUIAEAAPAUIAAgBvAEMAAQBwAEMACAAQAUQAEAARAUQAAgBxAEUAAQByAEUACAAS
AUYAEAATAUYAAgBzAEcAAQB0AEcACAAUAUgAEAAVAUgAAgB1AEkACAAWAUoAEAAXAUoAAgB2AEsA
CAAYAUwAEAAZAUwAAgB3AE0AAQB4AE0ACAAaAU4AEAAbAU4AAgB5AE8AAQB6AE8ACAAcAVAAEAAd
AVAAAgB7AFEAAQB8AFEACAAeAVIAEAAfAVIAAgB9AFMAAQB+AFMACAAgAVQAEAAhAVQAAgB/AFUA
CAAiAVYAEAAjAVYAAgCAAFcAAQCBAFcACAAkAVgAEAAlAVgAAgCCAFkACAAmAVoAEAAnAVoAAgCD
AFsACAC8A1wAEAC9A1wAAgCEAF0ACAC+A14AEAC/A14AAgCFAF8ACADAA2AAEADBA2AAAgCGAGEA
AQCHAGEACADDA2IAEADEA2IAAgCIAGMAAQCJAGMACADFA2QAEADGA2QAAgCKAGUAAQCLAGUACADI
A2YAEADJA2YAAgCMAGcAAQCNAGcACADKA2gAEADLA2gAAgCOAGkACADMA2oAEADNA2oAAgCPAGsA
CADOA2wAEADPA2wAAgCQAG0AAQCRAG0ACADQA24AEADRA24AAgCSAG8AAQCTAG8ACADSA3AAEADT
A3AAAgCUAHEAAQCVAHEACADUA3IAEADVA3IAAgCWAHMACADWA3QAEADXA3QAAgCXAHUAAQCYAHUA
CADYA3YAEADZA3YAAgCZAHcACADaA3gAEADbA3gAAgCaAHkACADcA3oAEADdA3oAAgCbAHsACADe
A3wAEADfA3wAAgCcAH0ACADgA34AEADhA34AAgCdAH8ACADiA4AAEADjA4AAAgCeAIEAAQCfAIEA
CADkA4IAEADlA4IAAgCgAIMAAgChAIUAAQCiAIUAAgCjAIcAAQCkAIcAAgClAIkAAQCmAIkAAgCn
AIsAAQCoAIsAAgCpAI0AAQCqAI0AAgCrAI8AAQCsAI8AAgCtAJEAAgCuAJMAAgCvAJUAAgCwAJcA
AgCxAJkAAQCyAJkAAgCzAJsAAgC0AJ0AAQC1AJ0AAgC2AJ8AAQC3AJ8AAgC4AKEAAgC5AKMAAgC6
AKUAAgC7AKcAAQC8AKcAAgC9AKkAAQC+AKkAAgC/AKsAAgDAAK0AAgDBAK8AAQDCAK8AAgDDALEA
AgDEALMAAgDFALUAAQDGALUAAgDHALcAAQDIALcAAgDJALkAAQDKALkAAgDLALsAAQDMALsAAgDN
AL0AAQDOAL0AAgDPAL8AAQDQAL8AAgDRAMEAAQDSAMEAAgDTAMMAAgDUAMUAAQDVAMUAAgDWAMcA
AQDXAMcAAgDqAMkAAQDrAMkAAgDsAMsAAgDtAM0AAQDuAM0AAgDvAM8AAgDwANEAAQDxANEAAgDy
ANMAAgDzANUAAgD0ANcAAgD1ANkAAgAoAdsAAQApAdsAAgAqAd0AAQArAd0AAgAsAd8AAQAtAd8A
AgAuAeEAAQAvAeEAAgAwAeMAAQAxAeMAAgAyAeUAAQAzAeUAAgA0AecAAQA1AecAAgA2AekAAQA3
AekAAgA4AesAAQA5AesAAgA6Ae0AAQA7Ae0AAgA8Ae8AAQA9Ae8AAgA+AfEAAQA/AfEAAgBAAfMA
AQBBAfMAAgBCAfUAAQBDAfUAAgBEAfcAAQBFAfcAAgBGAfkAAQBHAfkAAgBIAfsAAQBJAfsAAgBK
Af0AAQBLAf0AAgBMAf8AAQBNAf8AAgBOAQEBAQBPAQEBAgBQAQMBAQBRAQMBAgBSAQUBAQBTAQUB
AgBUAQcBAQBVAQcBAgBWAQkBAQBXAQkBAgBYAQsBAQBZAQsBAgBaAQ0BAQBbAQ0BAgBcAQ8BAQBd
AQ8BAgBeAREBAQBfAREBAgBgARMBAQBhARMBAgBiARUBAQBjARUBAgBkARcBAQBlARcBAgBmARkB
AQBnARkBAgBoARsBAQBpARsBAgBqAR0BAQBrAR0BAgBsAR8BAQBtAR8BAgBuASEBAQBvASEBAgBw
ASMBAQBxASMBAgByASUBAQBzASUBAgB0AScBAQB1AScBAgB2ASkBAQB3ASkBAgB4ASsBAQB5ASsB
AgB6AS0BAQB7AS0BAgB8AS8BAQB9AS8BAgB+ATEBAQB/ATEBAgCAATMBAQCBATMBAgCCATUBAQCD
ATUBAgCEATcBAQCFATcBAgCGATkBAQCHATkBAgCIATsBAQCJATsBAgCKAT0BAQCLAT0BAgCMAT8B
AQCNAT8BAgCOAUEBAQCPAUEBAgCQAUMBAQCRAUMBAgCSAUUBAQCTAUUBAgCUAUcBAQCVAUcBAgCW
AUkBAQCXAUkBAgCYAUsBAQCZAUsBAgCaAU0BAQCbAU0BAgCcAU8BAQCdAU8BAgCeAVEBAQCfAVEB
AgCgAVMBAQChAVMBAgCiAVUBAQCjAVUBAgCkAVcBAQClAVcBAgCmAVkBAQCnAVkBAgCoAVsBAQCp
AVsBAgCqAV0BAQCrAV0BAgCsAV8BAQCtAV8BAgCuAWEBAQCvAWEBAgCwAWMBAQCxAWMBAgCyAWUB
AQCzAWUBAgC0AWcBAQC1AWcBAgC2AWkBAQC3AWkBAgC4AWsBAQC5AWsBAgC6AW0BAQC7AW0BAgC8
AW8BAQC9AW8BAgC+AXEBAQC/AXEBAgDAAXMBAQDBAXMBAgDCAXUBAQDDAXUBAgDEAXcBAQDFAXcB
AgDGAXkBAQDHAXkBAgDIAXsBAQDJAXsBAgDKAX0BAQDLAX0BAgDMAX8BAQDNAX8BAgDOAYEBAQDP
AYEBAgDQAYMBAQDRAYMBAgDSAYUBAQDTAYUBAgDUAYcBAQDVAYcBAgDWAYkBAQDXAYkBAgDYAYsB
AQDZAYsBAgDpAY0BAQDqAY0BAgDrAY8BAQDsAY8BAgDtAZEBAQDuAZEBAgDvAZMBAQDwAZMBAgDx
AZUBAQDyAZUBAgDzAZcBAQD0AZcBAgD1AZkBAQD2AZkBAgD3AZsBAQD4AZsBAgD5AZ0BAQD6AZ0B
AgD7AZ8BAQD8AZ8BAgD9AaEBAQD+AaEBAgD/AaMBAQAAAqMBAgABAqUBAQACAqUBAgADAqcBAQAE
AqcBAgAFAqkBAQAGAqkBAgAHAqsBAQAIAqsBAgAJAq0BAQAKAq0BAgALAq8BAQAMAq8BAgANArEB
AQAOArEBAgAPArMBAQAQArMBAgARArUBAQASArUBAgATArcBAQAUArcBAgAVArkBAQAWArkBAgAX
ArsBAQAYArsBAgAZAr0BAQAaAr0BAgAbAr8BAQAcAr8BAgAdAsEBAQAeAsEBAgAfAsMBAQAgAsMB
AgAhAsUBAQAiAsUBAgAjAscBAQAkAscBAgAlAskBAQAmAskBAgAnAssBAQAoAssBAgApAs0BAQAq
As0BAgArAs8BAQAsAs8BAgAtAtEBAQAuAtEBAgA1AtMBAQA2AtMBAgA3AtUBAQA4AtUBAgA5AtcB
AQA6AtcBAgA7AtkBAQA8AtkBAgA9AtsBAQA+AtsBAgA/At0BAQBAAt0BAgBBAt8BAQBCAt8BAgBD
AuEBAQBEAuEBAgBFAuMBAQBGAuMBAgBHAuUBAQBIAuUBAgBJAucBAQBKAucBAgBLAukBAQBMAukB
AgBNAusBAQBOAusBAgBPAu0BAQBQAu0BAgBRAu8BAQBSAu8BAgBTAvEBAQBUAvEBAgBVAvMBAQBW
AvMBAgBXAvUBAQBYAvUBAgBZAvcBAQBaAvcBAgBbAvkBAQBcAvkBAgBdAvsBAQBeAvsBAgBfAv0B
AQBgAv0BAgBpAv8BAQBqAv8BAgBrAgECAQBsAgECAgBtAgMCAQBuAgMCAgBvAgUCAQBwAgUCAgBx
AgcCAQByAgcCAgBzAgkCAQB0AgkCAgB1AgsCAQB2AgsCAgB3Ag0CAQB4Ag0CAgB5Ag8CAQB6Ag8C
AgB7AhECAQB8AhECAgB9AhMCAQB+AhMCAgB/AhUCAQCAAhUCAgCBAhcCAQCCAhcCAgCDAhkCAQCE
AhkCAgCFAhsCAQCGAhsCAgCHAh0CAQCIAh0CAgCJAh8CAQCKAh8CAgCLAiECAQCMAiECAgCNAiMC
AQCOAiMCAgCPAiUCAQCQAiUCAgCRAicCAQCSAicCAgCTAikCAQCUAikCAgCVAisCAQCWAisCAgCX
Ai0CAQCYAi0CAgCZAi8CAQCaAi8CAgCbAjECAQCcAjECAgCdAjMCAQCeAjMCAgCfAjUCAQCgAjUC
AgChAjcCAQCiAjcCAgCjAjkCAQCkAjkCAgClAjsCAQCmAjsCAgCnAj0CAQCoAj0CAgCpAj8CAQCq
Aj8CAgCrAkECAQCsAkECAgCtAkMCAQCuAkMCAgCvAkUCAQCwAkUCAgCxAkcCAQCyAkcCAgCzAkkC
AQC0AkkCAgC1AksCAQC2AksCAgC3Ak0CAQC4Ak0CAgC5Ak8CAQC6Ak8CAgC7AlECAQC8AlECAgC9
AlMCAQC+AlMCAgC/AlUCAQDAAlUCAgDBAlcCAQDCAlcCAgDDAlkCAQDEAlkCAgDFAlsCAQDGAlsC
AgDHAl0CAQDIAl0CAgDJAl8CAQDKAl8CAgDLAmECAQDMAmECAgDNAmMCAQDOAmMCAgDPAmUCAQDQ
AmUCAgDRAmcCAQDSAmcCAgDTAmkCAQDUAmkCAgDVAmsCAQDWAmsCAgDXAm0CAQDYAm0CAgDZAm8C
AQDaAm8CAgDbAnECAQDcAnECAgDdAnMCAQDeAnMCAgDfAnUCAQDgAnUCAgDhAncCAQDiAncCAgDj
AnkCAQDkAnkCAgDlAnsCAQDmAnsCAgDnAn0CAQDoAn0CAgDpAn8CAQDqAn8CAgDrAoECAQDsAoEC
AgDtAoMCAQDuAoMCAgDvAoUCAQDwAoUCAgDxAocCAQDyAocCAgDzAokCAQD0AokCAgD1AosCAQD2
AosCAgD3Ao0CAQD4Ao0CAgD5Ao8CAQD6Ao8CAgD7ApECAQD8ApECAgD9ApMCAQD+ApMCAgD/ApUC
AQAAA5UCAgABA5cCAQACA5cCAgADA5kCAQAEA5kCAgAFA5sCAQAGA5sCAgAHA50CAQAIA50CAgAJ
A58CAQAKA58CAgALA6ECAQAMA6ECAgANA6MCAQAOA6MCAgAPA6UCAQAQA6UCAgARA6cCAQASA6cC
AgATA6kCAQAUA6kCAgAVA6sCAQAWA6sCAgAXA60CAQAYA60CAgAZA68CAQAaA68CAgAbA7ECAQAc
A7ECAgAdA7MCAQAeA7MCAgAfA7UCAQAgA7UCAgAhA7cCAQAiA7cCAgAjA7kCAQAkA7kCAgAlA7sC
AQAmA7sCAgAnA70CAQAoA70CAgApA78CAQAqA78CAgArA8ECAQAsA8ECAgAtA8MCAQAuA8MCAgAv
A8UCAQAwA8UCAgAxA8cCAQAyA8cCAgAzA8kCAQA0A8kCAgA1A8sCAQA2A8sCAgA3A80CAQA4A80C
AgA5A88CAQA6A88CAgA7A9ECAQA8A9ECAgA9A9MCAQA+A9MCAgA/A9UCAQBAA9UCAgBBA9cCAQBC
A9cCAgBDA9kCAQBEA9kCAgBFA9sCAQBGA9sCAgBHA90CAQBIA90CAgBJA98CAQBKA98CAgBLA+EC
AQBMA+ECAgBNA+MCAQBOA+MCAgBPA+UCAQBQA+UCAgBRA+cCAQBSA+cCAgBTA+kCAQBUA+kCAgBV
A+sCAQBWA+sCAgBuA+0CAgBvA+8CAQBwA+8CAgBxA/ECAgB1A/MCAQB2A/MCAgB4A/UCAQB5A/UC
AgB9A/cCAgCCA/kCAgCEA/sCAgCFA/0CAgD5A/8CAgD6AwEDAgD8AwMDAgD+AwUDAQD/AwUDAgAB
BAcDAgACBAkDAgADBAsDAgAFBA0DAgAHBA8DAgAJBBEDAgALBBMDAgANBBUDAgAOBBcDAgAPBBkD
AgAQBBsDAgARBB0DAgASBB8DAgATBCEDAgAUBCMDAgAVBCUDAQAWBCUDAgAXBCcDAQAYBCcDAgAZ
BCkDAQAaBCkDAgAbBCsDAQAcBCsDAgAdBC0DAgAeBC8DAgAfBDEDAgAgBDMDAgAhBDUDAgAiBDcD
AgAjBDkDAQAkBDkDAgAlBDsDAgAmBD0DAgAnBD8DAQAoBD8DAgApBEEDAQAqBEEDAgArBEMDAQAs
BEMDAgAtBEUDAgAuBEcDAgAvBEkDAgAwBEsDAQAxBEsDAgAyBE0DAgAzBE8DAQA0BE8DAgA1BFED
AQA2BFEDAgA3BFMDAgBABFUDAQBBBFUDAgBCBFcDAQBDBFcDAgBEBFkDAQBFBFkDAgBGBFsDAQBH
BFsDAgBIBF0DAQBJBF0DAgBKBF8DAQBLBF8DAgBMBGEDAQBNBGEDAgBOBGMDAQBPBGMDAgBQBGUD
AQBRBGUDAgBSBGcDAQBTBGcDAgBUBGkDAQBVBGkDAgBWBGsDAQBXBGsDAgBYBG0DAQBZBG0DAgBa
BG8DAgBbBHEDAgBcBHMDAgBdBHUDAgBeBHcDAgBfBHkDAQBgBHkDAgBhBHsDAgBiBH0DAQBjBH0D
AgBkBH8DAQBlBH8DAgBmBIEDAQBnBIEDAgBoBIMDAQBpBIMDAgBqBIUDAQBrBIUDAgBsBIcDAQBt
BIcDAgBuBIkDAgBvBIsDAgBwBI0DAQBxBI0DAgByBI8DAgBzBJEDAgB0BJMDAgB1BJUDAQB2BJUD
AgB3BJcDAgB4BJkDAQB5BJkDAgB6BJsDAQB7BJsDAgB8BJ0DAQB9BJ0DAgCBBJ8DAgCCBKEDAgCD
BKMDAQCEBKMDAgCFBKUDAgCHBKcDAQCIBKcDAgCJBKkDAQCKBKkDAgCLBKsDAgCMBK0DAQCNBK0D
AgCOBK8DAQCPBK8DAgCQBLEDAQCRBLEDAgCSBLMDAgCTBLUDAgCUBLcDAgCVBLkDAgCWBLsDAQCX
BLsDAgCYBL0DAQCZBL0DAgCaBL8DAQCbBL8DAgCcBMEDAgCeBMMDAQCfBMMDAgCgBMUDAQChBMUD
AgCiBMcDAQCjBMcDAgCkBMkDAQClBMkDAgCmBMsDAQCnBMsDAgCoBM0DAQCpBM0DAgCsBM8DAgCu
BNEDAgCvBNMDAQCwBNMDAgCxBNUDAQCyBNUDAgCzBNcDAQC0BNcDAgC1BNkDAgC2BNsDAgC4BN0D
AgC6BN8DAgC8BOEDAwDEBh0AqQIEgAAAAQAAAM0X4mgAAAAAAAB6AAAABAAAAAAAAAAAAAAANQPA
BwAAAAAEAAAAAAAAAAAAAAA1Ax49AAAAAAsAAAAAAAAAAAAAAD4DtUkAAAAABAAAAAAAAAAAAAAA
NQO9TAAAAAALAAAAAAAAAAAAAAA+A2EHAAAAAAAAAAABAAAAdF8AAHsAAwB8AAQANwBZADcAawA3
AH0ANwCPADcAoQA3ALMANwDFADcA1wA3AOkANwD7ADcADQE3AB8BNwAxATcAQwE3AFUBNwBnATcA
eQE3AIsBNwCdATcArwE3AOABNwDyATcABAI3ABYCNwAoAnUAywIAAAAAAF9WdGJsR2FwMV8xMAA8
PjlfXzExOThfMTAAPC5jdG9yPmJfXzExOThfMTAASXRlbUV2ZW50c18xMABJbnNwZWN0b3JFdmVu
dHNfMTAAX1Z0YmxHYXAyXzIwADw+OV9fMTE5OF8yMAA8LmN0b3I+Yl9fMTE5OF8yMABTVF83YTky
NzJjNjFkMDg0YzJkODg4ZDk1ZmU4NDMxYWEyMAA8PjlfXzExOThfMAA8LmN0b3I+Yl9fMTE5OF8w
ADw+OV9fMTE5OF8xMQA8LmN0b3I+Yl9fMTE5OF8xMQBBcHBsaWNhdGlvbkV2ZW50c18xMQBfVnRi
bEdhcDJfMjEAPD45X18xMTk4XzIxADwuY3Rvcj5iX18xMTk4XzIxAF9WdGJsR2FwMl8xAF9WdGJs
R2FwM18xADw+OV9fMTE5OF8xADwuY3Rvcj5iX18xMTk4XzEASUVudW1lcmFibGVgMQBnZXRfVXNl
cjEAc2V0X1VzZXIxADw+OV9fMTE5OF8xMgA8LmN0b3I+Yl9fMTE5OF8xMgBNQVBJRm9sZGVyRXZl
bnRzXzEyADw+OV9fMTE5OF8yMgA8LmN0b3I+Yl9fMTE5OF8yMgBJbnQzMgBfVnRibEdhcDFfMgA8
PjlfXzExOThfMgA8LmN0b3I+Yl9fMTE5OF8yAEZ1bmNgMgBvbENvbnRhY3RQaG9uZUhvbWUyAGdl
dF9Vc2VyMgBzZXRfVXNlcjIAb2xDb250YWN0UGhvbmVCdXNpbmVzczIAPD45X18xMTk4XzEzADwu
Y3Rvcj5iX18xMTk4XzEzADw+OV9fMTE5OF8yMwA8LmN0b3I+Yl9fMTE5OF8yMwBfVnRibEdhcDFf
NTMAX1Z0YmxHYXAxXzMAX1Z0YmxHYXAyXzMAPD45X18xMTk4XzMAPC5jdG9yPmJfXzExOThfMwBn
ZXRfVXNlcjMAc2V0X1VzZXIzADw+OV9fMTE5OF8xNAA8LmN0b3I+Yl9fMTE5OF8xNAA8PjlfXzEx
OThfMjQAPC5jdG9yPmJfXzExOThfMjQAX1Z0YmxHYXAxXzQAX1Z0YmxHYXAzXzQAPD45X18xMTk4
XzQAPC5jdG9yPmJfXzExOThfNABnZXRfVXNlcjQAc2V0X1VzZXI0ADw+OV9fMTE5OF8xNQA8LmN0
b3I+Yl9fMTE5OF8xNQBfVnRibEdhcDFfNQA8PjlfXzExOThfNQA8LmN0b3I+Yl9fMTE5OF81ADw+
OV9fMTE5OF8xNgA8LmN0b3I+Yl9fMTE5OF8xNgBfVnRibEdhcDFfNgBfVnRibEdhcDJfNgBfVnRi
bEdhcDNfNgA8PjlfXzExOThfNgA8LmN0b3I+Yl9fMTE5OF82ADw+OV9fMTE5OF8xNwA8LmN0b3I+
Yl9fMTE5OF8xNwA8PjlfXzExOThfNwA8LmN0b3I+Yl9fMTE5OF83ADw+OV9fMTE5OF8xOAA8LmN0
b3I+Yl9fMTE5OF8xOABfVnRibEdhcDJfOAA8PjlfXzExOThfOAA8LmN0b3I+Yl9fMTE5OF84ADw+
OV9fMTE5OF8xOQA8LmN0b3I+Yl9fMTE5OF8xOQA8PjkAX1Z0YmxHYXAxXzkAPD45X18xMTk4XzkA
PC5jdG9yPmJfXzExOThfOQA8Rm9yd2FyZD4APE1vZHVsZT4APE5hbWU+ADxSZXNwb25zZT4APENh
bmNlbD4APEl0ZW0+ADxBY3Rpb24+ADxBdHRhY2htZW50PgBnZXRfQkNDAHNldF9CQ0MAZ2V0X0ND
AHNldF9DQwBHQwBnZXRfRW5kVVRDAHNldF9FbmRVVEMAZ2V0X1N0YXJ0VVRDAHNldF9TdGFydFVU
QwBHZXRUeXBlRnJvbUNMU0lEAGdldF9Db252ZXJzYXRpb25JRABzZXRfQ29udmVyc2F0aW9uSUQA
Z2V0X0N1c3RvbWVySUQAc2V0X0N1c3RvbWVySUQAZ2V0X0dsb2JhbEFwcG9pbnRtZW50SUQAc2V0
X0dsb2JhbEFwcG9pbnRtZW50SUQAZ2V0X0VtYWlsMUVudHJ5SUQAc2V0X0VtYWlsMUVudHJ5SUQA
Z2V0X0VtYWlsMkVudHJ5SUQAc2V0X0VtYWlsMkVudHJ5SUQAZ2V0X0VtYWlsM0VudHJ5SUQAc2V0
X0VtYWlsM0VudHJ5SUQAZ2V0X0VudHJ5SUQAZ2V0X1JlY2VpdmVkT25CZWhhbGZPZkVudHJ5SUQA
c2V0X1JlY2VpdmVkT25CZWhhbGZPZkVudHJ5SUQAZ2V0X1JlY2VpdmVkQnlFbnRyeUlEAHNldF9S
ZWNlaXZlZEJ5RW50cnlJRABvbENvbnRhY3RQaG9uZVRUWVRURABmTm9VSQBvbEZvcm1hdEhUTUwA
Z2V0X01lZXRpbmdXb3Jrc3BhY2VVUkwAc2V0X01lZXRpbmdXb3Jrc3BhY2VVUkwAZ2V0X05ldFNo
b3dVUkwAc2V0X05ldFNob3dVUkwAb2xDb250YWN0UGhvbmVJU0ROAFN5c3RlbS5JTwBNaWNyb3Nv
ZnQuU3FsU2VydmVyLk1hbmFnZWREVFMAZ2V0X01BUElPQkpFQ1QAc2V0X01BUElPQkpFQ1QAdmFs
dWVfXwBnZXRfQ2FyZERhdGEAc2V0X0NhcmREYXRhAG1zY29ybGliADw+YwBTVF80YzBhY2E2ZDFh
MDI0NGUwOGY1MmU0NGFjNjY1ODNiYwBnZXRfQ29udmVyc2F0aW9uVG9waWMAc2V0X0NvbnZlcnNh
dGlvblRvcGljAFN5c3RlbS5Db2xsZWN0aW9ucy5HZW5lcmljAGFkZF9SZWFkAHJlbW92ZV9SZWFk
AEl0ZW1fUmVhZABhZGRfQmVmb3JlUmVhZAByZW1vdmVfQmVmb3JlUmVhZABJdGVtX0JlZm9yZVJl
YWQAZ2V0X1VuUmVhZABzZXRfVW5SZWFkAGFkZF9BdHRhY2htZW50UmVhZAByZW1vdmVfQXR0YWNo
bWVudFJlYWQASXRlbV9BdHRhY2htZW50UmVhZABhZGRfQmVmb3JlQXR0YWNobWVudFJlYWQAcmVt
b3ZlX0JlZm9yZUF0dGFjaG1lbnRSZWFkAEl0ZW1fQmVmb3JlQXR0YWNobWVudFJlYWQAVGhyZWFk
AGFkZF9VbmxvYWQAcmVtb3ZlX1VubG9hZABJdGVtX1VubG9hZABvbE1hcmtlZEZvckRvd25sb2Fk
AGdldF9NYXJrRm9yRG93bmxvYWQAc2V0X01hcmtGb3JEb3dubG9hZABhZGRfQXR0YWNobWVudEFk
ZAByZW1vdmVfQXR0YWNobWVudEFkZABJdGVtX0F0dGFjaG1lbnRBZGQAYWRkX0JlZm9yZUF0dGFj
aG1lbnRBZGQAcmVtb3ZlX0JlZm9yZUF0dGFjaG1lbnRBZGQASXRlbV9CZWZvcmVBdHRhY2htZW50
QWRkAG9sUmVzcG9uc2VOb3RSZXNwb25kZWQAZ2V0X0F1dG9Gb3J3YXJkZWQAc2V0X0F1dG9Gb3J3
YXJkZWQAb2xVbnNwZWNpZmllZABvbEZvcm1hdFVuc3BlY2lmaWVkAEludGVybG9ja2VkAG9sRmxh
Z01hcmtlZABvbFVuTWFya2VkAG9sTWVldGluZ1JlY2VpdmVkQW5kQ2FuY2VsZWQAb2xNZWV0aW5n
Q2FuY2VsZWQAb2xSZXNwb25zZURlY2xpbmVkAG9sTWVldGluZ0RlY2xpbmVkAG9sVGFza0RlbGVn
YXRpb25EZWNsaW5lZABvbFRhc2tEZWZlcnJlZABpc0Rpc3Bvc2VkAG9sVGFza05vdERlbGVnYXRl
ZABvbFVucmVzdHJpY3RlZABnZXRfRGF0ZUNvbXBsZXRlZABzZXRfRGF0ZUNvbXBsZXRlZABnZXRf
UmVjaXBpZW50UmVhc3NpZ25tZW50UHJvaGliaXRlZABzZXRfUmVjaXBpZW50UmVhc3NpZ25tZW50
UHJvaGliaXRlZABvbFJlc3BvbnNlQWNjZXB0ZWQAb2xNZWV0aW5nQWNjZXB0ZWQAb2xUYXNrRGVs
ZWdhdGlvbkFjY2VwdGVkAG9sVGFza05vdFN0YXJ0ZWQAZ2V0X1Jlc3BvbnNlUmVxdWVzdGVkAHNl
dF9SZXNwb25zZVJlcXVlc3RlZABnZXRfUmVhZFJlY2VpcHRSZXF1ZXN0ZWQAc2V0X1JlYWRSZWNl
aXB0UmVxdWVzdGVkAGdldF9PcmlnaW5hdG9yRGVsaXZlcnlSZXBvcnRSZXF1ZXN0ZWQAc2V0X09y
aWdpbmF0b3JEZWxpdmVyeVJlcG9ydFJlcXVlc3RlZABnZXRfU3VibWl0dGVkAHNldF9TdWJtaXR0
ZWQAZ2V0X1NhdmVkAHNldF9TYXZlZABvbE1lZXRpbmdSZWNlaXZlZABnZXRfQWx0ZXJuYXRlUmVj
aXBpZW50QWxsb3dlZABzZXRfQWx0ZXJuYXRlUmVjaXBpZW50QWxsb3dlZABvbFJlc3BvbnNlT3Jn
YW5pemVkAGdldF9QZXJtaXNzaW9uVGVtcGxhdGVHdWlkAHNldF9QZXJtaXNzaW9uVGVtcGxhdGVH
dWlkADxVc2VyMT5rX19CYWNraW5nRmllbGQAPFVzZXIyPmtfX0JhY2tpbmdGaWVsZAA8VXNlcjM+
a19fQmFja2luZ0ZpZWxkADxVc2VyND5rX19CYWNraW5nRmllbGQAPENDPmtfX0JhY2tpbmdGaWVs
ZAA8QkNDPmtfX0JhY2tpbmdGaWVsZAA8RW5kVVRDPmtfX0JhY2tpbmdGaWVsZAA8U3RhcnRVVEM+
a19fQmFja2luZ0ZpZWxkADxDb252ZXJzYXRpb25JRD5rX19CYWNraW5nRmllbGQAPEN1c3RvbWVy
SUQ+a19fQmFja2luZ0ZpZWxkADxHbG9iYWxBcHBvaW50bWVudElEPmtfX0JhY2tpbmdGaWVsZAA8
RW1haWwxRW50cnlJRD5rX19CYWNraW5nRmllbGQAPEVtYWlsMkVudHJ5SUQ+a19fQmFja2luZ0Zp
ZWxkADxFbWFpbDNFbnRyeUlEPmtfX0JhY2tpbmdGaWVsZAA8UmVjZWl2ZWRPbkJlaGFsZk9mRW50
cnlJRD5rX19CYWNraW5nRmllbGQAPFJlY2VpdmVkQnlFbnRyeUlEPmtfX0JhY2tpbmdGaWVsZAA8
TWVldGluZ1dvcmtzcGFjZVVSTD5rX19CYWNraW5nRmllbGQAPE5ldFNob3dVUkw+a19fQmFja2lu
Z0ZpZWxkADxNQVBJT0JKRUNUPmtfX0JhY2tpbmdGaWVsZAA8Q2FyZERhdGE+a19fQmFja2luZ0Zp
ZWxkADxDb252ZXJzYXRpb25Ub3BpYz5rX19CYWNraW5nRmllbGQAPFVuUmVhZD5rX19CYWNraW5n
RmllbGQAPE1hcmtGb3JEb3dubG9hZD5rX19CYWNraW5nRmllbGQAPEF1dG9Gb3J3YXJkZWQ+a19f
QmFja2luZ0ZpZWxkADxEYXRlQ29tcGxldGVkPmtfX0JhY2tpbmdGaWVsZAA8UmVjaXBpZW50UmVh
c3NpZ25tZW50UHJvaGliaXRlZD5rX19CYWNraW5nRmllbGQAPFJlc3BvbnNlUmVxdWVzdGVkPmtf
X0JhY2tpbmdGaWVsZAA8UmVhZFJlY2VpcHRSZXF1ZXN0ZWQ+a19fQmFja2luZ0ZpZWxkADxPcmln
aW5hdG9yRGVsaXZlcnlSZXBvcnRSZXF1ZXN0ZWQ+a19fQmFja2luZ0ZpZWxkADxTdWJtaXR0ZWQ+
a19fQmFja2luZ0ZpZWxkADxTYXZlZD5rX19CYWNraW5nRmllbGQAPEFsdGVybmF0ZVJlY2lwaWVu
dEFsbG93ZWQ+a19fQmFja2luZ0ZpZWxkADxQZXJtaXNzaW9uVGVtcGxhdGVHdWlkPmtfX0JhY2tp
bmdGaWVsZAA8RW5kPmtfX0JhY2tpbmdGaWVsZAA8UmVtaW5kZXJQbGF5U291bmQ+a19fQmFja2lu
Z0ZpZWxkADxDb25mZXJlbmNlU2VydmVyUGFzc3dvcmQ+a19fQmFja2luZ0ZpZWxkADxMYXN0Rmly
c3ROb1NwYWNlPmtfX0JhY2tpbmdGaWVsZAA8Q29tcGFueUxhc3RGaXJzdE5vU3BhY2U+a19fQmFj
a2luZ0ZpZWxkADxQZXJtaXNzaW9uU2VydmljZT5rX19CYWNraW5nRmllbGQAPEltcG9ydGFuY2U+
a19fQmFja2luZ0ZpZWxkADxIb21lQWRkcmVzc1Bvc3RhbENvZGU+a19fQmFja2luZ0ZpZWxkADxN
YWlsaW5nQWRkcmVzc1Bvc3RhbENvZGU+a19fQmFja2luZ0ZpZWxkADxPdGhlckFkZHJlc3NQb3N0
YWxDb2RlPmtfX0JhY2tpbmdGaWVsZAA8QnVzaW5lc3NBZGRyZXNzUG9zdGFsQ29kZT5rX19CYWNr
aW5nRmllbGQAPFdlYlBhZ2U+a19fQmFja2luZ0ZpZWxkADxQZXJzb25hbEhvbWVQYWdlPmtfX0Jh
Y2tpbmdGaWVsZAA8QnVzaW5lc3NIb21lUGFnZT5rX19CYWNraW5nRmllbGQAPE1pbGVhZ2U+a19f
QmFja2luZ0ZpZWxkADxJbnRlcm5ldENvZGVwYWdlPmtfX0JhY2tpbmdGaWVsZAA8TGFuZ3VhZ2U+
a19fQmFja2luZ0ZpZWxkADxSZW1pbmRlclNvdW5kRmlsZT5rX19CYWNraW5nRmllbGQAPFJvbGU+
a19fQmFja2luZ0ZpZWxkADxUaXRsZT5rX19CYWNraW5nRmllbGQAPEpvYlRpdGxlPmtfX0JhY2tp
bmdGaWVsZAA8TWlkZGxlTmFtZT5rX19CYWNraW5nRmllbGQAPFJlY2VpdmVkT25CZWhhbGZPZk5h
bWU+a19fQmFja2luZ0ZpZWxkADxTZW50T25CZWhhbGZPZk5hbWU+a19fQmFja2luZ0ZpZWxkADxO
ZXRNZWV0aW5nRG9jUGF0aE5hbWU+a19fQmFja2luZ0ZpZWxkADxOaWNrTmFtZT5rX19CYWNraW5n
RmllbGQAPENvbXB1dGVyTmV0d29ya05hbWU+a19fQmFja2luZ0ZpZWxkADxGdWxsTmFtZT5rX19C
YWNraW5nRmllbGQAPENvbXBhbnlBbmRGdWxsTmFtZT5rX19CYWNraW5nRmllbGQAPFNlbmRlck5h
bWU+a19fQmFja2luZ0ZpZWxkADxNYW5hZ2VyTmFtZT5rX19CYWNraW5nRmllbGQAPEFzc2lzdGFu
dE5hbWU+a19fQmFja2luZ0ZpZWxkADxMYXN0TmFtZT5rX19CYWNraW5nRmllbGQAPFlvbWlMYXN0
TmFtZT5rX19CYWNraW5nRmllbGQAPEZpcnN0TmFtZT5rX19CYWNraW5nRmllbGQAPExhc3ROYW1l
QW5kRmlyc3ROYW1lPmtfX0JhY2tpbmdGaWVsZAA8WW9taUZpcnN0TmFtZT5rX19CYWNraW5nRmll
bGQAPFJlY2VpdmVkQnlOYW1lPmtfX0JhY2tpbmdGaWVsZAA8RW1haWwxRGlzcGxheU5hbWU+a19f
QmFja2luZ0ZpZWxkADxFbWFpbDJEaXNwbGF5TmFtZT5rX19CYWNraW5nRmllbGQAPEVtYWlsM0Rp
c3BsYXlOYW1lPmtfX0JhY2tpbmdGaWVsZAA8UmV0ZW50aW9uUG9saWN5TmFtZT5rX19CYWNraW5n
RmllbGQAPENvbXBhbnlOYW1lPmtfX0JhY2tpbmdGaWVsZAA8WW9taUNvbXBhbnlOYW1lPmtfX0Jh
Y2tpbmdGaWVsZAA8UmVjZWl2ZWRUaW1lPmtfX0JhY2tpbmdGaWVsZAA8UmVtaW5kZXJUaW1lPmtf
X0JhY2tpbmdGaWVsZAA8UmVwbHlUaW1lPmtfX0JhY2tpbmdGaWVsZAA8RGVmZXJyZWREZWxpdmVy
eVRpbWU+a19fQmFja2luZ0ZpZWxkADxFeHBpcnlUaW1lPmtfX0JhY2tpbmdGaWVsZAA8RW5kVGlt
ZVpvbmU+a19fQmFja2luZ0ZpZWxkADxFbmRJbkVuZFRpbWVab25lPmtfX0JhY2tpbmdGaWVsZAA8
U3RhcnRUaW1lWm9uZT5rX19CYWNraW5nRmllbGQAPFN0YXJ0SW5TdGFydFRpbWVab25lPmtfX0Jh
Y2tpbmdGaWVsZAA8QnVzaW5lc3NDYXJkVHlwZT5rX19CYWNraW5nRmllbGQAPE5ldE1lZXRpbmdU
eXBlPmtfX0JhY2tpbmdGaWVsZAA8U2VuZGVyRW1haWxUeXBlPmtfX0JhY2tpbmdGaWVsZAA8RW1h
aWwxQWRkcmVzc1R5cGU+a19fQmFja2luZ0ZpZWxkADxFbWFpbDJBZGRyZXNzVHlwZT5rX19CYWNr
aW5nRmllbGQAPEVtYWlsM0FkZHJlc3NUeXBlPmtfX0JhY2tpbmdGaWVsZAA8SGFzUGljdHVyZT5r
X19CYWNraW5nRmllbGQAPFZvdGluZ1Jlc3BvbnNlPmtfX0JhY2tpbmdGaWVsZAA8U3BvdXNlPmtf
X0JhY2tpbmdGaWVsZAA8VGFza0NvbXBsZXRlZERhdGU+a19fQmFja2luZ0ZpZWxkADxEdWVEYXRl
PmtfX0JhY2tpbmdGaWVsZAA8VGFza0R1ZURhdGU+a19fQmFja2luZ0ZpZWxkADxSZXRlbnRpb25F
eHBpcmF0aW9uRGF0ZT5rX19CYWNraW5nRmllbGQAPFN0YXJ0RGF0ZT5rX19CYWNraW5nRmllbGQA
PFRhc2tTdGFydERhdGU+a19fQmFja2luZ0ZpZWxkADxVc2VyQ2VydGlmaWNhdGU+a19fQmFja2lu
Z0ZpZWxkADxEb3dubG9hZFN0YXRlPmtfX0JhY2tpbmdGaWVsZAA8UmVjdXJyZW5jZVN0YXRlPmtf
X0JhY2tpbmdGaWVsZAA8UmVzcG9uc2VTdGF0ZT5rX19CYWNraW5nRmllbGQAPERlbGVnYXRpb25T
dGF0ZT5rX19CYWNraW5nRmllbGQAPEhvbWVBZGRyZXNzU3RhdGU+a19fQmFja2luZ0ZpZWxkADxN
YWlsaW5nQWRkcmVzc1N0YXRlPmtfX0JhY2tpbmdGaWVsZAA8T3RoZXJBZGRyZXNzU3RhdGU+a19f
QmFja2luZ0ZpZWxkADxCdXNpbmVzc0FkZHJlc3NTdGF0ZT5rX19CYWNraW5nRmllbGQAPENvbXBs
ZXRlPmtfX0JhY2tpbmdGaWVsZAA8UGVyY2VudENvbXBsZXRlPmtfX0JhY2tpbmdGaWVsZAA8RlRQ
U2l0ZT5rX19CYWNraW5nRmllbGQAPE5vQWdpbmc+a19fQmFja2luZ0ZpZWxkADxJc1JlY3Vycmlu
Zz5rX19CYWNraW5nRmllbGQAPElzT25saW5lTWVldGluZz5rX19CYWNraW5nRmllbGQAPFRvdGFs
V29yaz5rX19CYWNraW5nRmllbGQAPEFjdHVhbFdvcms+a19fQmFja2luZ0ZpZWxkADxUZWFtVGFz
az5rX19CYWNraW5nRmllbGQAPElzTWFya2VkQXNUYXNrPmtfX0JhY2tpbmdGaWVsZAA8T3JkaW5h
bD5rX19CYWNraW5nRmllbGQAPFRvRG9UYXNrT3JkaW5hbD5rX19CYWNraW5nRmllbGQAPENvbmZl
cmVuY2VTZXJ2ZXJBbGxvd0V4dGVybmFsPmtfX0JhY2tpbmdGaWVsZAA8Sm91cm5hbD5rX19CYWNr
aW5nRmllbGQAPEJ1c2luZXNzQ2FyZExheW91dFhtbD5rX19CYWNraW5nRmllbGQAPEl0ZW0+a19f
QmFja2luZ0ZpZWxkADxTZW50T24+a19fQmFja2luZ0ZpZWxkADxDaGlsZHJlbj5rX19CYWNraW5n
RmllbGQAPEZsYWdJY29uPmtfX0JhY2tpbmdGaWVsZAA8T3V0bG9va0ludGVybmFsVmVyc2lvbj5r
X19CYWNraW5nRmllbGQAPFNlc3Npb24+a19fQmFja2luZ0ZpZWxkADxQcm9mZXNzaW9uPmtfX0Jh
Y2tpbmdGaWVsZAA8UGVybWlzc2lvbj5rX19CYWNraW5nRmllbGQAPExvY2F0aW9uPmtfX0JhY2tp
bmdGaWVsZAA8T2ZmaWNlTG9jYXRpb24+a19fQmFja2luZ0ZpZWxkADxCaWxsaW5nSW5mb3JtYXRp
b24+a19fQmFja2luZ0ZpZWxkADxEdXJhdGlvbj5rX19CYWNraW5nRmllbGQAPEZvcm1EZXNjcmlw
dGlvbj5rX19CYWNraW5nRmllbGQAPFRvPmtfX0JhY2tpbmdGaWVsZAA8T3duZXJzaGlwPmtfX0Jh
Y2tpbmdGaWVsZAA8T3JnYW5pemF0aW9uYWxJRE51bWJlcj5rX19CYWNraW5nRmllbGQAPEdvdmVy
bm1lbnRJRE51bWJlcj5rX19CYWNraW5nRmllbGQAPElTRE5OdW1iZXI+a19fQmFja2luZ0ZpZWxk
ADxIb21lMlRlbGVwaG9uZU51bWJlcj5rX19CYWNraW5nRmllbGQAPEJ1c2luZXNzMlRlbGVwaG9u
ZU51bWJlcj5rX19CYWNraW5nRmllbGQAPFRUWVRERFRlbGVwaG9uZU51bWJlcj5rX19CYWNraW5n
RmllbGQAPE1vYmlsZVRlbGVwaG9uZU51bWJlcj5rX19CYWNraW5nRmllbGQAPEhvbWVUZWxlcGhv
bmVOdW1iZXI+a19fQmFja2luZ0ZpZWxkADxDYWxsYmFja1RlbGVwaG9uZU51bWJlcj5rX19CYWNr
aW5nRmllbGQAPENvbXBhbnlNYWluVGVsZXBob25lTnVtYmVyPmtfX0JhY2tpbmdGaWVsZAA8UmFk
aW9UZWxlcGhvbmVOdW1iZXI+a19fQmFja2luZ0ZpZWxkADxDYXJUZWxlcGhvbmVOdW1iZXI+a19f
QmFja2luZ0ZpZWxkADxPdGhlclRlbGVwaG9uZU51bWJlcj5rX19CYWNraW5nRmllbGQAPEJ1c2lu
ZXNzVGVsZXBob25lTnVtYmVyPmtfX0JhY2tpbmdGaWVsZAA8QXNzaXN0YW50VGVsZXBob25lTnVt
YmVyPmtfX0JhY2tpbmdGaWVsZAA8UHJpbWFyeVRlbGVwaG9uZU51bWJlcj5rX19CYWNraW5nRmll
bGQAPFBhZ2VyTnVtYmVyPmtfX0JhY2tpbmdGaWVsZAA8SG9tZUZheE51bWJlcj5rX19CYWNraW5n
RmllbGQAPE90aGVyRmF4TnVtYmVyPmtfX0JhY2tpbmdGaWVsZAA8QnVzaW5lc3NGYXhOdW1iZXI+
a19fQmFja2luZ0ZpZWxkADxUZWxleE51bWJlcj5rX19CYWNraW5nRmllbGQAPFNhdmVTZW50TWVz
c2FnZUZvbGRlcj5rX19CYWNraW5nRmllbGQAPEdlbmRlcj5rX19CYWNraW5nRmllbGQAPFNlbmRl
cj5rX19CYWNraW5nRmllbGQAPEF1dG9SZXNvbHZlZFdpbm5lcj5rX19CYWNraW5nRmllbGQAPE93
bmVyPmtfX0JhY2tpbmdGaWVsZAA8TmV0TWVldGluZ1NlcnZlcj5rX19CYWNraW5nRmllbGQAPE9y
Z2FuaXplcj5rX19CYWNraW5nRmllbGQAPFByb3BlcnR5QWNjZXNzb3I+a19fQmFja2luZ0ZpZWxk
ADxEZWxlZ2F0b3I+a19fQmFja2luZ0ZpZWxkADxHZXRJbnNwZWN0b3I+a19fQmFja2luZ0ZpZWxk
ADxGaWxlQXM+a19fQmFja2luZ0ZpZWxkADxOZXRNZWV0aW5nQWxpYXM+a19fQmFja2luZ0ZpZWxk
ADxOZXRNZWV0aW5nT3JnYW5pemVyQWxpYXM+a19fQmFja2luZ0ZpZWxkADxSZXNvdXJjZXM+a19f
QmFja2luZ0ZpZWxkADxSZXF1aXJlZEF0dGVuZGVlcz5rX19CYWNraW5nRmllbGQAPE9wdGlvbmFs
QXR0ZW5kZWVzPmtfX0JhY2tpbmdGaWVsZAA8Rm9yY2VVcGRhdGVUb0FsbEF0dGVuZGVlcz5rX19C
YWNraW5nRmllbGQAPENvbXBhbmllcz5rX19CYWNraW5nRmllbGQAPENhdGVnb3JpZXM+a19fQmFj
a2luZ0ZpZWxkADxJdGVtUHJvcGVydGllcz5rX19CYWNraW5nRmllbGQAPFVzZXJQcm9wZXJ0aWVz
PmtfX0JhY2tpbmdGaWVsZAA8Q29udGFjdE5hbWVzPmtfX0JhY2tpbmdGaWVsZAA8UmVwbHlSZWNp
cGllbnROYW1lcz5rX19CYWNraW5nRmllbGQAPExpbmtzPmtfX0JhY2tpbmdGaWVsZAA8SW5pdGlh
bHM+a19fQmFja2luZ0ZpZWxkADxBY3Rpb25zPmtfX0JhY2tpbmdGaWVsZAA8Vm90aW5nT3B0aW9u
cz5rX19CYWNraW5nRmllbGQAPENsYXNzPmtfX0JhY2tpbmdGaWVsZAA8RW1haWwxQWRkcmVzcz5r
X19CYWNraW5nRmllbGQAPEVtYWlsMkFkZHJlc3M+a19fQmFja2luZ0ZpZWxkADxFbWFpbDNBZGRy
ZXNzPmtfX0JhY2tpbmdGaWVsZAA8SU1BZGRyZXNzPmtfX0JhY2tpbmdGaWVsZAA8SG9tZUFkZHJl
c3M+a19fQmFja2luZ0ZpZWxkADxNYWlsaW5nQWRkcmVzcz5rX19CYWNraW5nRmllbGQAPFNlbGVj
dGVkTWFpbGluZ0FkZHJlc3M+a19fQmFja2luZ0ZpZWxkADxTZW5kZXJFbWFpbEFkZHJlc3M+a19f
QmFja2luZ0ZpZWxkADxPdGhlckFkZHJlc3M+a19fQmFja2luZ0ZpZWxkADxCdXNpbmVzc0FkZHJl
c3M+a19fQmFja2luZ0ZpZWxkADxJbnRlcm5ldEZyZWVCdXN5QWRkcmVzcz5rX19CYWNraW5nRmll
bGQAPENvbnRhY3RzPmtfX0JhY2tpbmdGaWVsZAA8Q29uZmxpY3RzPmtfX0JhY2tpbmdGaWVsZAA8
UmVjaXBpZW50cz5rX19CYWNraW5nRmllbGQAPFN0YXR1c1VwZGF0ZVJlY2lwaWVudHM+a19fQmFj
a2luZ0ZpZWxkADxTdGF0dXNPbkNvbXBsZXRpb25SZWNpcGllbnRzPmtfX0JhY2tpbmdGaWVsZAA8
UmVwbHlSZWNpcGllbnRzPmtfX0JhY2tpbmdGaWVsZAA8QXR0YWNobWVudHM+a19fQmFja2luZ0Zp
ZWxkADxFbmFibGVTaGFyZWRBdHRhY2htZW50cz5rX19CYWNraW5nRmllbGQAPFN0YXR1cz5rX19C
YWNraW5nRmllbGQAPFJlc3BvbnNlU3RhdHVzPmtfX0JhY2tpbmdGaWVsZAA8UmVtb3RlU3RhdHVz
PmtfX0JhY2tpbmdGaWVsZAA8RmxhZ1N0YXR1cz5rX19CYWNraW5nRmllbGQAPE1lZXRpbmdTdGF0
dXM+a19fQmFja2luZ0ZpZWxkADxCdXN5U3RhdHVzPmtfX0JhY2tpbmdGaWVsZAA8Qm9keUZvcm1h
dD5rX19CYWNraW5nRmllbGQAPFRhc2tTdWJqZWN0PmtfX0JhY2tpbmdGaWVsZAA8SXNDb25mbGlj
dD5rX19CYWNraW5nRmllbGQAPFJlbWluZGVyU2V0PmtfX0JhY2tpbmdGaWVsZAA8SGFzQ292ZXJT
aGVldD5rX19CYWNraW5nRmllbGQAPEhvbWVBZGRyZXNzU3RyZWV0PmtfX0JhY2tpbmdGaWVsZAA8
TWFpbGluZ0FkZHJlc3NTdHJlZXQ+a19fQmFja2luZ0ZpZWxkADxPdGhlckFkZHJlc3NTdHJlZXQ+
a19fQmFja2luZ0ZpZWxkADxCdXNpbmVzc0FkZHJlc3NTdHJlZXQ+a19fQmFja2luZ0ZpZWxkADxE
ZWxldGVBZnRlclN1Ym1pdD5rX19CYWNraW5nRmllbGQAPFJlbWluZGVyT3ZlcnJpZGVEZWZhdWx0
PmtfX0JhY2tpbmdGaWVsZAA8U2VudD5rX19CYWNraW5nRmllbGQAPERlcGFydG1lbnQ+a19fQmFj
a2luZ0ZpZWxkADxQYXJlbnQ+a19fQmFja2luZ0ZpZWxkADxBbGxEYXlFdmVudD5rX19CYWNraW5n
RmllbGQAPEFjY291bnQ+a19fQmFja2luZ0ZpZWxkADxTZW5kVXNpbmdBY2NvdW50PmtfX0JhY2tp
bmdGaWVsZAA8U3RhcnQ+a19fQmFja2luZ0ZpZWxkADxSZW1pbmRlck1pbnV0ZXNCZWZvcmVTdGFy
dD5rX19CYWNraW5nRmllbGQAPE5ldE1lZXRpbmdBdXRvU3RhcnQ+a19fQmFja2luZ0ZpZWxkADxG
bGFnUmVxdWVzdD5rX19CYWNraW5nRmllbGQAPElzSVBGYXg+a19fQmFja2luZ0ZpZWxkADxDb252
ZXJzYXRpb25JbmRleD5rX19CYWNraW5nRmllbGQAPFN1ZmZpeD5rX19CYWNraW5nRmllbGQAPExh
c3RGaXJzdE5vU3BhY2VBbmRTdWZmaXg+a19fQmFja2luZ0ZpZWxkADxMYXN0Rmlyc3RBbmRTdWZm
aXg+a19fQmFja2luZ0ZpZWxkADxIb21lQWRkcmVzc1Bvc3RPZmZpY2VCb3g+a19fQmFja2luZ0Zp
ZWxkADxNYWlsaW5nQWRkcmVzc1Bvc3RPZmZpY2VCb3g+a19fQmFja2luZ0ZpZWxkADxPdGhlckFk
ZHJlc3NQb3N0T2ZmaWNlQm94PmtfX0JhY2tpbmdGaWVsZAA8QnVzaW5lc3NBZGRyZXNzUG9zdE9m
ZmljZUJveD5rX19CYWNraW5nRmllbGQAPFJlZmVycmVkQnk+a19fQmFja2luZ0ZpZWxkADxGbGFn
RHVlQnk+a19fQmFja2luZ0ZpZWxkADxCaXJ0aGRheT5rX19CYWNraW5nRmllbGQAPEhvYmJ5Pmtf
X0JhY2tpbmdGaWVsZAA8UlRGQm9keT5rX19CYWNraW5nRmllbGQAPEhUTUxCb2R5PmtfX0JhY2tp
bmdGaWVsZAA8TGFzdEZpcnN0U3BhY2VPbmx5PmtfX0JhY2tpbmdGaWVsZAA8Q29tcGFueUxhc3RG
aXJzdFNwYWNlT25seT5rX19CYWNraW5nRmllbGQAPEZ1bGxOYW1lQW5kQ29tcGFueT5rX19CYWNr
aW5nRmllbGQAPExhc3RGaXJzdE5vU3BhY2VDb21wYW55PmtfX0JhY2tpbmdGaWVsZAA8TGFzdEZp
cnN0U3BhY2VPbmx5Q29tcGFueT5rX19CYWNraW5nRmllbGQAPEFubml2ZXJzYXJ5PmtfX0JhY2tp
bmdGaWVsZAA8SG9tZUFkZHJlc3NDb3VudHJ5PmtfX0JhY2tpbmdGaWVsZAA8TWFpbGluZ0FkZHJl
c3NDb3VudHJ5PmtfX0JhY2tpbmdGaWVsZAA8T3RoZXJBZGRyZXNzQ291bnRyeT5rX19CYWNraW5n
RmllbGQAPEJ1c2luZXNzQWRkcmVzc0NvdW50cnk+a19fQmFja2luZ0ZpZWxkADxIb21lQWRkcmVz
c0NpdHk+a19fQmFja2luZ0ZpZWxkADxNYWlsaW5nQWRkcmVzc0NpdHk+a19fQmFja2luZ0ZpZWxk
ADxPdGhlckFkZHJlc3NDaXR5PmtfX0JhY2tpbmdGaWVsZAA8QnVzaW5lc3NBZGRyZXNzQ2l0eT5r
X19CYWNraW5nRmllbGQAPFNjaGVkdWxlUGx1c1ByaW9yaXR5PmtfX0JhY2tpbmdGaWVsZAA8U2Vu
c2l0aXZpdHk+a19fQmFja2luZ0ZpZWxkAG9sT3JkZXJGaWVsZABvbFZpZXdGaWVsZABnZXRfRW5k
AHNldF9FbmQAU2VuZABSZXNwb25kAEdldFVwcGVyQm91bmQAZ2V0X1JlbWluZGVyUGxheVNvdW5k
AHNldF9SZW1pbmRlclBsYXlTb3VuZABBZGRCdXNpbmVzc0NhcmQARm9yd2FyZEFzQnVzaW5lc3ND
YXJkAFJlc2V0QnVzaW5lc3NDYXJkAEZvcndhcmRBc1ZjYXJkAG9sRGlzY2FyZABvbERvTm90Rm9y
d2FyZABnZXRfQ29uZmVyZW5jZVNlcnZlclBhc3N3b3JkAHNldF9Db25mZXJlbmNlU2VydmVyUGFz
c3dvcmQAX05hbWVTcGFjZQBnZXRfTGFzdEZpcnN0Tm9TcGFjZQBzZXRfTGFzdEZpcnN0Tm9TcGFj
ZQBnZXRfQ29tcGFueUxhc3RGaXJzdE5vU3BhY2UAc2V0X0NvbXBhbnlMYXN0Rmlyc3ROb1NwYWNl
AG9sTmFtZXNwYWNlAG9sT3V0c3BhY2UAb2xPdXRPZk9mZmljZQBnZXRfUGVybWlzc2lvblNlcnZp
Y2UAc2V0X1Blcm1pc3Npb25TZXJ2aWNlAE9sUGVybWlzc2lvblNlcnZpY2UAZ2V0X0ltcG9ydGFu
Y2UAc2V0X0ltcG9ydGFuY2UAT2xJbXBvcnRhbmNlAENyZWF0ZUluc3RhbmNlAGRlZmF1bHRJbnN0
YW5jZQBvbEFwcHRPY2N1cnJlbmNlAFNraXBSZWN1cnJlbmNlAGdldF9Ib21lQWRkcmVzc1Bvc3Rh
bENvZGUAc2V0X0hvbWVBZGRyZXNzUG9zdGFsQ29kZQBnZXRfTWFpbGluZ0FkZHJlc3NQb3N0YWxD
b2RlAHNldF9NYWlsaW5nQWRkcmVzc1Bvc3RhbENvZGUAZ2V0X090aGVyQWRkcmVzc1Bvc3RhbENv
ZGUAc2V0X090aGVyQWRkcmVzc1Bvc3RhbENvZGUAZ2V0X0J1c2luZXNzQWRkcmVzc1Bvc3RhbENv
ZGUAc2V0X0J1c2luZXNzQWRkcmVzc1Bvc3RhbENvZGUAU2F2ZU1vZGUAb2xGcmVlAGdldF9XZWJQ
YWdlAHNldF9XZWJQYWdlAGdldF9QZXJzb25hbEhvbWVQYWdlAHNldF9QZXJzb25hbEhvbWVQYWdl
AGdldF9CdXNpbmVzc0hvbWVQYWdlAHNldF9CdXNpbmVzc0hvbWVQYWdlAGdldF9NaWxlYWdlAHNl
dF9NaWxlYWdlAFNhdmVCdXNpbmVzc0NhcmRJbWFnZQBnZXRfSW50ZXJuZXRDb2RlcGFnZQBzZXRf
SW50ZXJuZXRDb2RlcGFnZQBvbE91dGxvb2tCYXJTdG9yYWdlAGdldF9NZXNzYWdlAGdldF9MYW5n
dWFnZQBzZXRfTGFuZ3VhZ2UAYWRkX1Byb3BlcnR5Q2hhbmdlAHJlbW92ZV9Qcm9wZXJ0eUNoYW5n
ZQBJdGVtX1Byb3BlcnR5Q2hhbmdlAGFkZF9DdXN0b21Qcm9wZXJ0eUNoYW5nZQByZW1vdmVfQ3Vz
dG9tUHJvcGVydHlDaGFuZ2UASXRlbV9DdXN0b21Qcm9wZXJ0eUNoYW5nZQBDb21wYXJlRXhjaGFu
Z2UASW52b2tlAG9sTWFsZQBvbEZlbWFsZQBvbFRhYmxlAFZhcmlhYmxlAElFbnVtZXJhYmxlAElE
aXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdldFR5cGVGcm9tSGFuZGxlAGdldF9SZW1pbmRl
clNvdW5kRmlsZQBzZXRfUmVtaW5kZXJTb3VuZEZpbGUAYWRkX0JlZm9yZUF0dGFjaG1lbnRXcml0
ZVRvVGVtcEZpbGUAcmVtb3ZlX0JlZm9yZUF0dGFjaG1lbnRXcml0ZVRvVGVtcEZpbGUASXRlbV9C
ZWZvcmVBdHRhY2htZW50V3JpdGVUb1RlbXBGaWxlAFNhdmVBc0ZpbGUAb2xDb250YWN0UGhvbmVN
b2JpbGUAb2xNb2JpbGUAZ2V0X1JvbGUAc2V0X1JvbGUAQ29uc29sZQBvbFRhc2tTaW1wbGUAZ2V0
X1RpdGxlAHNldF9UaXRsZQBnZXRfSm9iVGl0bGUAc2V0X0pvYlRpdGxlAG9sUnVsZQBvbEF1dG9G
b3JtYXRSdWxlAG9sSm91cm5hbE1vZHVsZQBvbE1haWxNb2R1bGUAb2xOYXZpZ2F0aW9uTW9kdWxl
AG9sQ2FsZW5kYXJNb2R1bGUAb2xOb3Rlc01vZHVsZQBvbFRhc2tzTW9kdWxlAG9sU29sdXRpb25z
TW9kdWxlAG9sQ29udGFjdHNNb2R1bGUAZ2V0X01pZGRsZU5hbWUAc2V0X01pZGRsZU5hbWUAZ2V0
X0ZpbGVOYW1lAGdldF9SZWNlaXZlZE9uQmVoYWxmT2ZOYW1lAHNldF9SZWNlaXZlZE9uQmVoYWxm
T2ZOYW1lAGdldF9TZW50T25CZWhhbGZPZk5hbWUAc2V0X1NlbnRPbkJlaGFsZk9mTmFtZQBnZXRf
TmV0TWVldGluZ0RvY1BhdGhOYW1lAHNldF9OZXRNZWV0aW5nRG9jUGF0aE5hbWUAZ2V0X05pY2tO
YW1lAHNldF9OaWNrTmFtZQBnZXRfQ29tcHV0ZXJOZXR3b3JrTmFtZQBzZXRfQ29tcHV0ZXJOZXR3
b3JrTmFtZQBnZXRfRnVsbE5hbWUAc2V0X0Z1bGxOYW1lAGdldF9Db21wYW55QW5kRnVsbE5hbWUA
c2V0X0NvbXBhbnlBbmRGdWxsTmFtZQBnZXRfU2VuZGVyTmFtZQBzZXRfU2VuZGVyTmFtZQBnZXRf
TWFuYWdlck5hbWUAc2V0X01hbmFnZXJOYW1lAGdldF9Vc2VyTmFtZQBnZXRfQXNzaXN0YW50TmFt
ZQBzZXRfQXNzaXN0YW50TmFtZQBnZXRfTGFzdE5hbWUAc2V0X0xhc3ROYW1lAGdldF9Zb21pTGFz
dE5hbWUAc2V0X1lvbWlMYXN0TmFtZQBnZXRfRmlyc3ROYW1lAHNldF9GaXJzdE5hbWUAZ2V0X0xh
c3ROYW1lQW5kRmlyc3ROYW1lAHNldF9MYXN0TmFtZUFuZEZpcnN0TmFtZQBnZXRfWW9taUZpcnN0
TmFtZQBzZXRfWW9taUZpcnN0TmFtZQBnZXRfUmVjZWl2ZWRCeU5hbWUAc2V0X1JlY2VpdmVkQnlO
YW1lAGdldF9FbWFpbDFEaXNwbGF5TmFtZQBzZXRfRW1haWwxRGlzcGxheU5hbWUAZ2V0X0VtYWls
MkRpc3BsYXlOYW1lAHNldF9FbWFpbDJEaXNwbGF5TmFtZQBnZXRfRW1haWwzRGlzcGxheU5hbWUA
c2V0X0VtYWlsM0Rpc3BsYXlOYW1lAGdldF9EaXNwbGF5TmFtZQBnZXRfUmV0ZW50aW9uUG9saWN5
TmFtZQBzZXRfUmV0ZW50aW9uUG9saWN5TmFtZQBnZXRfQ29tcGFueU5hbWUAc2V0X0NvbXBhbnlO
YW1lAGdldF9Zb21pQ29tcGFueU5hbWUAc2V0X1lvbWlDb21wYW55TmFtZQBnZXRfUmVjZWl2ZWRU
aW1lAHNldF9SZWNlaXZlZFRpbWUARGF0ZVRpbWUAZ2V0X0xhc3RNb2RpZmljYXRpb25UaW1lAGdl
dF9DcmVhdGlvblRpbWUAZ2V0X1JlbWluZGVyVGltZQBzZXRfUmVtaW5kZXJUaW1lAGdldF9SZXBs
eVRpbWUAc2V0X1JlcGx5VGltZQBnZXRfRGVmZXJyZWREZWxpdmVyeVRpbWUAc2V0X0RlZmVycmVk
RGVsaXZlcnlUaW1lAGdldF9FeHBpcnlUaW1lAHNldF9FeHBpcnlUaW1lAE1pY3Jvc29mdC5TcWxT
ZXJ2ZXIuRHRzLlJ1bnRpbWUAb2xDb250YWN0UGhvbmVIb21lAG9sSG9tZQBvbENsYXNzTmF2aWdh
dGlvblBhbmUAb2xPdXRsb29rQmFyUGFuZQBSZWFkTGluZQBXcml0ZUxpbmUAQ29tYmluZQBvbFRh
c2tEZWNsaW5lAG9sVGFza1JlcXVlc3REZWNsaW5lAG9sUmVzcG9uc2VOb25lAG9sTm9uZQBvbFJl
bW90ZVN0YXR1c05vbmUAX1RpbWVab25lAGdldF9FbmRUaW1lWm9uZQBzZXRfRW5kVGltZVpvbmUA
Z2V0X0VuZEluRW5kVGltZVpvbmUAc2V0X0VuZEluRW5kVGltZVpvbmUAb2xDbGFzc1RpbWVab25l
AGdldF9TdGFydFRpbWVab25lAHNldF9TdGFydFRpbWVab25lAGdldF9TdGFydEluU3RhcnRUaW1l
Wm9uZQBzZXRfU3RhcnRJblN0YXJ0VGltZVpvbmUAZ2V0X1R5cGUAc2V0X1R5cGUAZ2V0X0J1c2lu
ZXNzQ2FyZFR5cGUAc2V0X0J1c2luZXNzQ2FyZFR5cGUAT2xCdXNpbmVzc0NhcmRUeXBlAGdldF9O
ZXRNZWV0aW5nVHlwZQBzZXRfTmV0TWVldGluZ1R5cGUAT2xOZXRNZWV0aW5nVHlwZQBnZXRfU2Vu
ZGVyRW1haWxUeXBlAHNldF9TZW5kZXJFbWFpbFR5cGUAZ2V0X0VtYWlsMUFkZHJlc3NUeXBlAHNl
dF9FbWFpbDFBZGRyZXNzVHlwZQBnZXRfRW1haWwyQWRkcmVzc1R5cGUAc2V0X0VtYWlsMkFkZHJl
c3NUeXBlAGdldF9FbWFpbDNBZGRyZXNzVHlwZQBzZXRfRW1haWwzQWRkcmVzc1R5cGUAb2xXb3Jr
aW5nRWxzZXdoZXJlAFN5c3RlbS5Db3JlAF9TdG9yZQBvbFN0b3JlAGdldF9EZWZhdWx0U3RvcmUA
RW51bWVyYXRlRm9sZGVyc0luRGVmYXVsdFN0b3JlAEZhaWx1cmUAQWRkUGljdHVyZQBSZW1vdmVQ
aWN0dXJlAEFkZEJ1c2luZXNzQ2FyZExvZ29QaWN0dXJlAGdldF9IYXNQaWN0dXJlAHNldF9IYXNQ
aWN0dXJlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBWU1RBUlRTY3Jp
cHRPYmplY3RNb2RlbEJhc2UAQXBwbGljYXRpb25TZXR0aW5nc0Jhc2UAT2xNZWV0aW5nUmVzcG9u
c2UAZ2V0X1ZvdGluZ1Jlc3BvbnNlAHNldF9Wb3RpbmdSZXNwb25zZQBPbFRhc2tSZXNwb25zZQBP
bEluc3BlY3RvckNsb3NlAERpc3Bvc2UAUGFyc2UAZ2V0X1Nwb3VzZQBzZXRfU3BvdXNlAGdldF9U
YXNrQ29tcGxldGVkRGF0ZQBzZXRfVGFza0NvbXBsZXRlZERhdGUAZ2V0X0R1ZURhdGUAc2V0X0R1
ZURhdGUAZ2V0X1Rhc2tEdWVEYXRlAHNldF9UYXNrRHVlRGF0ZQBnZXRfUmV0ZW50aW9uRXhwaXJh
dGlvbkRhdGUAc2V0X1JldGVudGlvbkV4cGlyYXRpb25EYXRlAG9sTWFya05vRGF0ZQBnZXRfU3Rh
cnREYXRlAHNldF9TdGFydERhdGUAZ2V0X1Rhc2tTdGFydERhdGUAc2V0X1Rhc2tTdGFydERhdGUA
Z2V0X1VzZXJDZXJ0aWZpY2F0ZQBzZXRfVXNlckNlcnRpZmljYXRlAG9sVGFza1JlcXVlc3RVcGRh
dGUATXVsdGljYXN0RGVsZWdhdGUAb2xQZXJtaXNzaW9uVGVtcGxhdGUAZ2V0X0Rvd25sb2FkU3Rh
dGUAc2V0X0Rvd25sb2FkU3RhdGUAT2xEb3dubG9hZFN0YXRlAGdldF9SZWN1cnJlbmNlU3RhdGUA
c2V0X1JlY3VycmVuY2VTdGF0ZQBPbFJlY3VycmVuY2VTdGF0ZQBFZGl0b3JCcm93c2FibGVTdGF0
ZQBnZXRfUmVzcG9uc2VTdGF0ZQBzZXRfUmVzcG9uc2VTdGF0ZQBDYW5jZWxSZXNwb25zZVN0YXRl
AGdldF9EZWxlZ2F0aW9uU3RhdGUAc2V0X0RlbGVnYXRpb25TdGF0ZQBPbFRhc2tEZWxlZ2F0aW9u
U3RhdGUAZ2V0X0hvbWVBZGRyZXNzU3RhdGUAc2V0X0hvbWVBZGRyZXNzU3RhdGUAZ2V0X01haWxp
bmdBZGRyZXNzU3RhdGUAc2V0X01haWxpbmdBZGRyZXNzU3RhdGUAZ2V0X090aGVyQWRkcmVzc1N0
YXRlAHNldF9PdGhlckFkZHJlc3NTdGF0ZQBnZXRfQnVzaW5lc3NBZGRyZXNzU3RhdGUAc2V0X0J1
c2luZXNzQWRkcmVzc1N0YXRlAG9sUHJpdmF0ZQBhZGRfQmVmb3JlRGVsZXRlAHJlbW92ZV9CZWZv
cmVEZWxldGUASXRlbV9CZWZvcmVEZWxldGUAb2xNYXJrZWRGb3JEZWxldGUAZ2V0X0NvbXBsZXRl
AHNldF9Db21wbGV0ZQBvbEZsYWdDb21wbGV0ZQBvbE1hcmtDb21wbGV0ZQBvbFRhc2tDb21wbGV0
ZQBnZXRfUGVyY2VudENvbXBsZXRlAHNldF9QZXJjZW50Q29tcGxldGUAZ2V0X0ZUUFNpdGUAc2V0
X0ZUUFNpdGUAb2xQcm9wZXJ0eVBhZ2VTaXRlAGFkZF9Xcml0ZQByZW1vdmVfV3JpdGUASXRlbV9X
cml0ZQBhZGRfQWZ0ZXJXcml0ZQByZW1vdmVfQWZ0ZXJXcml0ZQBJdGVtX0FmdGVyV3JpdGUAb2xO
b3RlAG9sUmVtb3RlAER5bmFtaWNBdHRyaWJ1dGUARGlzcElkQXR0cmlidXRlAENvbXBpbGVyR2Vu
ZXJhdGVkQXR0cmlidXRlAEd1aWRBdHRyaWJ1dGUAQ29tRXZlbnRJbnRlcmZhY2VBdHRyaWJ1dGUA
RGVidWdnZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJy
b3dzYWJsZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEludGVyZmFjZVR5cGVBdHRy
aWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRl
AEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmli
dXRlAERlZmF1bHRNZW1iZXJBdHRyaWJ1dGUAVHlwZUlkZW50aWZpZXJBdHRyaWJ1dGUAQ29tcGls
YXRpb25SZWxheGF0aW9uc0F0dHJpYnV0ZQBDb0NsYXNzQXR0cmlidXRlAEFzc2VtYmx5UHJvZHVj
dEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBTU0lTU2NyaXB0VGFza0VudHJ5
UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmlidXRlAFJ1bnRpbWVDb21wYXRpYmls
aXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBvbFNhdmUAYWRkX0JlZm9yZUF1dG9TYXZlAHJl
bW92ZV9CZWZvcmVBdXRvU2F2ZQBJdGVtX0JlZm9yZUF1dG9TYXZlAG9sUHJvbXB0Rm9yU2F2ZQBh
ZGRfQmVmb3JlQXR0YWNobWVudFNhdmUAcmVtb3ZlX0JlZm9yZUF0dGFjaG1lbnRTYXZlAEl0ZW1f
QmVmb3JlQXR0YWNobWVudFNhdmUAb2xNZWV0aW5nUmVzcG9uc2VOZWdhdGl2ZQBvbE1lZXRpbmdS
ZXNwb25zZVRlbnRhdGl2ZQBvbFJlc3BvbnNlVGVudGF0aXZlAG9sTWVldGluZ1RlbnRhdGl2ZQBv
bFRlbnRhdGl2ZQBvbE1lZXRpbmdSZXNwb25zZVBvc2l0aXZlAE1vdmUAYWRkX0F0dGFjaG1lbnRS
ZW1vdmUAcmVtb3ZlX0F0dGFjaG1lbnRSZW1vdmUASXRlbV9BdHRhY2htZW50UmVtb3ZlAGdldF9T
aXplAFN1cHByZXNzRmluYWxpemUAdG90YWxmaWxlc2l6ZQBDbGVhclRhc2tGbGFnAG9sTm9GbGFn
AG9sRXhjaGFuZ2VDb25mZXJlbmNpbmcAU3lzdGVtLlRocmVhZGluZwBnZXRfTm9BZ2luZwBzZXRf
Tm9BZ2luZwBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAG9sU2hhcmluZwBvbENhbGVuZGFyU2hh
cmluZwBnZXRfSXNSZWN1cnJpbmcAc2V0X0lzUmVjdXJyaW5nAG9sQXBwdE5vdFJlY3VycmluZwBU
b1N0cmluZwBkaXNwb3NpbmcATWlzc2luZwBnZXRfSXNPbmxpbmVNZWV0aW5nAHNldF9Jc09ubGlu
ZU1lZXRpbmcAb2xNZWV0aW5nAG9sTm9uTWVldGluZwBvbE5ldE1lZXRpbmcAb2xUYXNrV2FpdGlu
ZwBTaG93Q2hlY2tQaG9uZURpYWxvZwBTaG93Q2F0ZWdvcmllc0RpYWxvZwBvbFNlbGVjdE5hbWVz
RGlhbG9nAGZBZGRpdGlvbmFsVGV4dERpYWxvZwBvbFNlYXJjaABvbEltcG9ydGFuY2VIaWdoAGJh
c2VQYXRoAGdldF9Gb2xkZXJQYXRoAGZvbGRlclBhdGgAU3RhcnRzV2l0aABvbENvbnRhY3RQaG9u
ZUNhbGxiYWNrAG9sTWFya1RoaXNXZWVrAG9sTWFya05leHRXZWVrAG9sTGluawBNaWNyb3NvZnQu
T2ZmaWNlLkludGVyb3AuT3V0bG9vawBvbEJ1c2luZXNzQ2FyZFR5cGVPdXRsb29rAGdldF9Ub3Rh
bFdvcmsAc2V0X1RvdGFsV29yawBnZXRfQWN0dWFsV29yawBzZXRfQWN0dWFsV29yawBvbERlbGVn
YXRlZFRhc2sAb2xUYXNrAGdldF9UZWFtVGFzawBzZXRfVGVhbVRhc2sAb2xPd25UYXNrAGdldF9J
c01hcmtlZEFzVGFzawBzZXRfSXNNYXJrZWRBc1Rhc2sATWFya0FzVGFzawBNaWNyb3NvZnQuU3Fs
U2VydmVyLlNjcmlwdFRhc2sATWljcm9zb2Z0LlNxbFNlcnZlci5EdHMuVGFza3MuU2NyaXB0VGFz
awBvbE5ld1Rhc2sARm9yd2FyZEFzVmNhbABNb2RhbABNYXJzaGFsAG9sQ29uZmlkZW50aWFsAG9s
SW1wb3J0YW5jZU5vcm1hbABvbE5vcm1hbABnZXRfT3JkaW5hbABzZXRfT3JkaW5hbABnZXRfVG9E
b1Rhc2tPcmRpbmFsAHNldF9Ub0RvVGFza09yZGluYWwAb2xQZXJzb25hbABnZXRfQ29uZmVyZW5j
ZVNlcnZlckFsbG93RXh0ZXJuYWwAc2V0X0NvbmZlcmVuY2VTZXJ2ZXJBbGxvd0V4dGVybmFsAGdl
dF9Kb3VybmFsAHNldF9Kb3VybmFsAG9sSm91cm5hbABPbE1hcmtJbnRlcnZhbABDYW5jZWwAU2Ny
aXB0T2JqZWN0TW9kZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAG9sTWFpbABTVF83YTkyNzJjNjFk
MDg0YzJkODg4ZDk1ZmU4NDMxYWEyMC5kbGwAZ2V0X0J1c2luZXNzQ2FyZExheW91dFhtbABzZXRf
QnVzaW5lc3NDYXJkTGF5b3V0WG1sAGdldF9JdGVtAHNldF9JdGVtAGFkZF9TZW5kSXRlbQByZW1v
dmVfU2VuZEl0ZW0AYWRkX0ZvcndhcmRJdGVtAHJlbW92ZV9Gb3J3YXJkSXRlbQBvbFN0b3JhZ2VJ
dGVtAGFkZF9DbG9zZUl0ZW0AcmVtb3ZlX0Nsb3NlSXRlbQBfTWVldGluZ0l0ZW0AX1Rhc2tJdGVt
AF9NYWlsSXRlbQBPdXRsb29rTWFpbEl0ZW0AYWRkX1JlcGx5QWxsSXRlbQByZW1vdmVfUmVwbHlB
bGxJdGVtAG9sRnVsbEl0ZW0AX0NvbnRhY3RJdGVtAF9BcHBvaW50bWVudEl0ZW0AYWRkX1JlcGx5
SXRlbQByZW1vdmVfUmVwbHlJdGVtAFN5c3RlbQBUcmltAEVudW0AZ2V0X1NlbnRPbgBzZXRfU2Vu
dE9uAHJlc291cmNlTWFuAGFkZF9PcGVuAHJlbW92ZV9PcGVuAEl0ZW1fT3BlbgBnZXRfQ2hpbGRy
ZW4Ac2V0X0NoaWxkcmVuAG9sVGFza0Fzc2lnbgBTY3JpcHRNYWluAG9sRm9ybWF0UGxhaW4Ab2xD
b2x1bW4AZ2V0X0ZsYWdJY29uAHNldF9GbGFnSWNvbgBvbFJlZEZsYWdJY29uAG9sT3JhbmdlRmxh
Z0ljb24Ab2xQdXJwbGVGbGFnSWNvbgBvbEJsdWVGbGFnSWNvbgBPbEZsYWdJY29uAG9sR3JlZW5G
bGFnSWNvbgBvbE5vRmxhZ0ljb24Ab2xZZWxsb3dGbGFnSWNvbgBvbEZvcm1SZWdpb24AZ2V0X091
dGxvb2tWZXJzaW9uAGdldF9PdXRsb29rSW50ZXJuYWxWZXJzaW9uAHNldF9PdXRsb29rSW50ZXJu
YWxWZXJzaW9uAGdldF9TZXNzaW9uAHNldF9TZXNzaW9uAGdldF9Qcm9mZXNzaW9uAHNldF9Qcm9m
ZXNzaW9uAGdldF9QZXJtaXNzaW9uAHNldF9QZXJtaXNzaW9uAE9sUGVybWlzc2lvbgBvbE1lZXRp
bmdGb3J3YXJkTm90aWZpY2F0aW9uAGdldF9BcHBsaWNhdGlvbgBvbEFwcGxpY2F0aW9uAGdldF9M
b2NhdGlvbgBzZXRfTG9jYXRpb24AZ2V0X09mZmljZUxvY2F0aW9uAHNldF9PZmZpY2VMb2NhdGlv
bgBvbE1lZXRpbmdDYW5jZWxsYXRpb24AZ2V0X0JpbGxpbmdJbmZvcm1hdGlvbgBzZXRfQmlsbGlu
Z0luZm9ybWF0aW9uAGdldF9EdXJhdGlvbgBzZXRfRHVyYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRp
b24AX0NvbnZlcnNhdGlvbgBvbENvbnZlcnNhdGlvbgBHZXRDb252ZXJzYXRpb24AU3lzdGVtLkds
b2JhbGl6YXRpb24Ab2xTZW5kUnVsZUFjdGlvbgBvbFBsYXlTb3VuZFJ1bGVBY3Rpb24Ab2xNYXJr
QXNUYXNrUnVsZUFjdGlvbgBvbFJ1bGVBY3Rpb24Ab2xOZXdJdGVtQWxlcnRSdWxlQWN0aW9uAG9s
TW92ZU9yQ29weVJ1bGVBY3Rpb24Ab2xBc3NpZ25Ub0NhdGVnb3J5UnVsZUFjdGlvbgBvbEFjdGlv
bgBhZGRfQ3VzdG9tQWN0aW9uAHJlbW92ZV9DdXN0b21BY3Rpb24ASXRlbV9DdXN0b21BY3Rpb24A
b2xTZWxlY3Rpb24Ab2xBdHRhY2htZW50U2VsZWN0aW9uAFN5c3RlbS5SZWZsZWN0aW9uAG9sRnJv
bVJzc0ZlZWRSdWxlQ29uZGl0aW9uAG9sSW1wb3J0YW5jZVJ1bGVDb25kaXRpb24Ab2xGb3JtTmFt
ZVJ1bGVDb25kaXRpb24Ab2xSdWxlQ29uZGl0aW9uAG9sRnJvbVJ1bGVDb25kaXRpb24Ab2xBZGRy
ZXNzUnVsZUNvbmRpdGlvbgBvbEFjY291bnRSdWxlQ29uZGl0aW9uAG9sU2VuZGVySW5BZGRyZXNz
TGlzdFJ1bGVDb25kaXRpb24Ab2xUZXh0UnVsZUNvbmRpdGlvbgBvbENhdGVnb3J5UnVsZUNvbmRp
dGlvbgBvbEV4Y2VwdGlvbgBvbEFwcHRFeGNlcHRpb24AZ2V0X0Zvcm1EZXNjcmlwdGlvbgBzZXRf
Rm9ybURlc2NyaXB0aW9uAG9sRm9ybURlc2NyaXB0aW9uAG9sUmVjdXJyZW5jZVBhdHRlcm4AQ2xl
YXJSZWN1cnJlbmNlUGF0dGVybgBHZXRSZWN1cnJlbmNlUGF0dGVybgBvbFVua25vd24Ab2xUYXNr
RGVsZWdhdGlvblVua25vd24AZ2V0X1RvAHNldF9UbwBDb3B5VG8AQ3VsdHVyZUluZm8AQ29tQXdh
cmVFdmVudEluZm8ARGlyZWN0b3J5SW5mbwBvbENvbnRhY3RQaG9uZVJhZGlvAFNsZWVwAGdldF9P
d25lcnNoaXAAc2V0X093bmVyc2hpcABPbFRhc2tPd25lcnNoaXAAb2xOYXZpZ2F0aW9uR3JvdXAA
b2xPdXRsb29rQmFyR3JvdXAAU3lzdGVtLkxpbnEAb2xDb250YWN0UGhvbmVDYXIAQ2xlYXIARGVz
dEZsZHIAZ2V0X09yZ2FuaXphdGlvbmFsSUROdW1iZXIAc2V0X09yZ2FuaXphdGlvbmFsSUROdW1i
ZXIAZ2V0X0dvdmVybm1lbnRJRE51bWJlcgBzZXRfR292ZXJubWVudElETnVtYmVyAGdldF9JU0RO
TnVtYmVyAHNldF9JU0ROTnVtYmVyAE9sQ29udGFjdFBob25lTnVtYmVyAGdldF9Ib21lMlRlbGVw
aG9uZU51bWJlcgBzZXRfSG9tZTJUZWxlcGhvbmVOdW1iZXIAZ2V0X0J1c2luZXNzMlRlbGVwaG9u
ZU51bWJlcgBzZXRfQnVzaW5lc3MyVGVsZXBob25lTnVtYmVyAGdldF9UVFlURERUZWxlcGhvbmVO
dW1iZXIAc2V0X1RUWVRERFRlbGVwaG9uZU51bWJlcgBnZXRfTW9iaWxlVGVsZXBob25lTnVtYmVy
AHNldF9Nb2JpbGVUZWxlcGhvbmVOdW1iZXIAZ2V0X0hvbWVUZWxlcGhvbmVOdW1iZXIAc2V0X0hv
bWVUZWxlcGhvbmVOdW1iZXIAZ2V0X0NhbGxiYWNrVGVsZXBob25lTnVtYmVyAHNldF9DYWxsYmFj
a1RlbGVwaG9uZU51bWJlcgBnZXRfQ29tcGFueU1haW5UZWxlcGhvbmVOdW1iZXIAc2V0X0NvbXBh
bnlNYWluVGVsZXBob25lTnVtYmVyAGdldF9SYWRpb1RlbGVwaG9uZU51bWJlcgBzZXRfUmFkaW9U
ZWxlcGhvbmVOdW1iZXIAZ2V0X0NhclRlbGVwaG9uZU51bWJlcgBzZXRfQ2FyVGVsZXBob25lTnVt
YmVyAGdldF9PdGhlclRlbGVwaG9uZU51bWJlcgBzZXRfT3RoZXJUZWxlcGhvbmVOdW1iZXIAZ2V0
X0J1c2luZXNzVGVsZXBob25lTnVtYmVyAHNldF9CdXNpbmVzc1RlbGVwaG9uZU51bWJlcgBnZXRf
QXNzaXN0YW50VGVsZXBob25lTnVtYmVyAHNldF9Bc3Npc3RhbnRUZWxlcGhvbmVOdW1iZXIAZ2V0
X1ByaW1hcnlUZWxlcGhvbmVOdW1iZXIAc2V0X1ByaW1hcnlUZWxlcGhvbmVOdW1iZXIAZ2V0X1Bh
Z2VyTnVtYmVyAHNldF9QYWdlck51bWJlcgBnZXRfSG9tZUZheE51bWJlcgBzZXRfSG9tZUZheE51
bWJlcgBnZXRfT3RoZXJGYXhOdW1iZXIAc2V0X090aGVyRmF4TnVtYmVyAGdldF9CdXNpbmVzc0Zh
eE51bWJlcgBzZXRfQnVzaW5lc3NGYXhOdW1iZXIAZ2V0X1RlbGV4TnVtYmVyAHNldF9UZWxleE51
bWJlcgBvbENvbnZlcnNhdGlvbkhlYWRlcgBNQVBJRm9sZGVyAGdldF9TYXZlU2VudE1lc3NhZ2VG
b2xkZXIAc2V0X1NhdmVTZW50TWVzc2FnZUZvbGRlcgBvbEZvbGRlcgBvbE5hdmlnYXRpb25Gb2xk
ZXIARGVzdGluYXRpb25Gb2xkZXIAR2V0Rm9sZGVyAEdldFJvb3RGb2xkZXIAZm9sZGVyAGdldF9H
ZW5kZXIAc2V0X0dlbmRlcgBPbEdlbmRlcgBnZXRfU2VuZGVyAHNldF9TZW5kZXIAb2xSZW1pbmRl
cgBvbENvbnRhY3RQaG9uZVBhZ2VyAGdldF9SZXNvdXJjZU1hbmFnZXIAb2xDb250YWN0UGhvbmVP
dGhlcgBvbE90aGVyAEl0ZW1FdmVudHNfMTBfUmVhZEV2ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEw
X0JlZm9yZVJlYWRFdmVudEhhbmRsZXIASXRlbUV2ZW50c18xMF9BdHRhY2htZW50UmVhZEV2ZW50
SGFuZGxlcgBJdGVtRXZlbnRzXzEwX0JlZm9yZUF0dGFjaG1lbnRSZWFkRXZlbnRIYW5kbGVyAEl0
ZW1FdmVudHNfMTBfVW5sb2FkRXZlbnRIYW5kbGVyAEl0ZW1FdmVudHNfMTBfQXR0YWNobWVudEFk
ZEV2ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEwX0JlZm9yZUF0dGFjaG1lbnRBZGRFdmVudEhhbmRs
ZXIASXRlbUV2ZW50c18xMF9TZW5kRXZlbnRIYW5kbGVyAEl0ZW1FdmVudHNfMTBfRm9yd2FyZEV2
ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEwX1Byb3BlcnR5Q2hhbmdlRXZlbnRIYW5kbGVyAEl0ZW1F
dmVudHNfMTBfQ3VzdG9tUHJvcGVydHlDaGFuZ2VFdmVudEhhbmRsZXIASXRlbUV2ZW50c18xMF9C
ZWZvcmVBdHRhY2htZW50V3JpdGVUb1RlbXBGaWxlRXZlbnRIYW5kbGVyAEl0ZW1FdmVudHNfMTBf
Q2xvc2VFdmVudEhhbmRsZXIASXRlbUV2ZW50c18xMF9CZWZvcmVEZWxldGVFdmVudEhhbmRsZXIA
SXRlbUV2ZW50c18xMF9Xcml0ZUV2ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEwX0FmdGVyV3JpdGVF
dmVudEhhbmRsZXIASXRlbUV2ZW50c18xMF9CZWZvcmVBdXRvU2F2ZUV2ZW50SGFuZGxlcgBJdGVt
RXZlbnRzXzEwX0JlZm9yZUF0dGFjaG1lbnRTYXZlRXZlbnRIYW5kbGVyAEl0ZW1FdmVudHNfMTBf
QXR0YWNobWVudFJlbW92ZUV2ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEwX1JlcGx5QWxsRXZlbnRI
YW5kbGVyAEl0ZW1FdmVudHNfMTBfT3BlbkV2ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEwX0N1c3Rv
bUFjdGlvbkV2ZW50SGFuZGxlcgBJdGVtRXZlbnRzXzEwX0JlZm9yZUNoZWNrTmFtZXNFdmVudEhh
bmRsZXIASXRlbUV2ZW50c18xMF9CZWZvcmVBdHRhY2htZW50UHJldmlld0V2ZW50SGFuZGxlcgBJ
dGVtRXZlbnRzXzEwX1JlcGx5RXZlbnRIYW5kbGVyAGdldF9BdXRvUmVzb2x2ZWRXaW5uZXIAc2V0
X0F1dG9SZXNvbHZlZFdpbm5lcgBnZXRfT3duZXIAc2V0X093bmVyAFRvVXBwZXIAT3V0bG9va01l
c3NhZ2VXcmFwcGVyAG9sRXhwbG9yZXIAX0V4Y2hhbmdlVXNlcgBvbEV4Y2hhbmdlVXNlcgBHZXRF
eGNoYW5nZVVzZXIAZ2V0X0N1cnJlbnRVc2VyAG9sUHJvbXB0VXNlcgBvbEFwcHRNYXN0ZXIAZ2V0
X05ldE1lZXRpbmdTZXJ2ZXIAc2V0X05ldE1lZXRpbmdTZXJ2ZXIAVG9Mb3dlcgBnZXRfT3JnYW5p
emVyAHNldF9Pcmdhbml6ZXIAR2V0T3JnYW5pemVyAGdldF9Qcm9wZXJ0eUFjY2Vzc29yAHNldF9Q
cm9wZXJ0eUFjY2Vzc29yAG9sUHJvcGVydHlBY2Nlc3NvcgBnZXRfRGVsZWdhdG9yAHNldF9EZWxl
Z2F0b3IASUVudW1lcmF0b3IAR2V0RW51bWVyYXRvcgBBY3RpdmF0b3IALmN0b3IALmNjdG9yAF9J
bnNwZWN0b3IAb2xJbnNwZWN0b3IAZ2V0X0dldEluc3BlY3RvcgBzZXRfR2V0SW5zcGVjdG9yAFNo
b3dCdXNpbmVzc0NhcmRFZGl0b3IAZ2V0X0ZpbGVBcwBzZXRfRmlsZUFzAFNhdmVBcwBTZXRBQ0xz
AGdldF9OZXRNZWV0aW5nQWxpYXMAc2V0X05ldE1lZXRpbmdBbGlhcwBnZXRfTmV0TWVldGluZ09y
Z2FuaXplckFsaWFzAHNldF9OZXRNZWV0aW5nT3JnYW5pemVyQWxpYXMAU3lzdGVtLkRpYWdub3N0
aWNzAG9sT3JkZXJGaWVsZHMAb2xWaWV3RmllbGRzAFN5c3RlbS5SdW50aW1lLkludGVyb3BTZXJ2
aWNlcwBTeXN0ZW0uUnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAZ2V0
X1Jlc291cmNlcwBzZXRfUmVzb3VyY2VzAFNUXzRjMGFjYTZkMWEwMjQ0ZTA4ZjUyZTQ0YWM2NjU4
M2JjLlByb3BlcnRpZXMuUmVzb3VyY2VzLnJlc291cmNlcwBEZWJ1Z2dpbmdNb2RlcwBnZXRfUmVx
dWlyZWRBdHRlbmRlZXMAc2V0X1JlcXVpcmVkQXR0ZW5kZWVzAGdldF9PcHRpb25hbEF0dGVuZGVl
cwBzZXRfT3B0aW9uYWxBdHRlbmRlZXMAZ2V0X0ZvcmNlVXBkYXRlVG9BbGxBdHRlbmRlZXMAc2V0
X0ZvcmNlVXBkYXRlVG9BbGxBdHRlbmRlZXMAb2xQYWdlcwBvbFByb3BlcnR5UGFnZXMASXRlcmF0
ZU1lc3NhZ2VzAGdldF9Db21wYW5pZXMAc2V0X0NvbXBhbmllcwBnZXRfQ2F0ZWdvcmllcwBzZXRf
Q2F0ZWdvcmllcwBvbENhdGVnb3JpZXMAb2xBZGRyZXNzRW50cmllcwBTVF80YzBhY2E2ZDFhMDI0
NGUwOGY1MmU0NGFjNjY1ODNiYy5Qcm9wZXJ0aWVzAG9sVXNlckRlZmluZWRQcm9wZXJ0aWVzAGdl
dF9JdGVtUHJvcGVydGllcwBzZXRfSXRlbVByb3BlcnRpZXMAb2xJdGVtUHJvcGVydGllcwBnZXRf
VXNlclByb3BlcnRpZXMAc2V0X1VzZXJQcm9wZXJ0aWVzAG9sVXNlclByb3BlcnRpZXMAZ2V0X1Zh
cmlhYmxlcwBvbFJ1bGVzAG9sQXV0b0Zvcm1hdFJ1bGVzAG9sTmF2aWdhdGlvbk1vZHVsZXMAYWRk
X0JlZm9yZUNoZWNrTmFtZXMAcmVtb3ZlX0JlZm9yZUNoZWNrTmFtZXMASXRlbV9CZWZvcmVDaGVj
a05hbWVzAGdldF9Db250YWN0TmFtZXMAc2V0X0NvbnRhY3ROYW1lcwBnZXRfUmVwbHlSZWNpcGll
bnROYW1lcwBzZXRfUmVwbHlSZWNpcGllbnROYW1lcwBvbFBhbmVzAG9sQ2xhc3NUaW1lWm9uZXMA
b2xTdG9yZXMAU2V0dGluZ3MAZ2V0X0xpbmtzAHNldF9MaW5rcwBvbExpbmtzAGdldF9Jbml0aWFs
cwBzZXRfSW5pdGlhbHMAZ2V0X0l0ZW1zAG9sU2ltcGxlSXRlbXMAb2xJdGVtcwBDb250YWlucwBv
bENvbHVtbnMAZ2V0X0FjdGlvbnMAc2V0X0FjdGlvbnMAb2xSdWxlQWN0aW9ucwBvbEFjdGlvbnMA
U3lzdGVtLkNvbGxlY3Rpb25zAG9sUnVsZUNvbmRpdGlvbnMAZ2V0X1ZvdGluZ09wdGlvbnMAc2V0
X1ZvdGluZ09wdGlvbnMAT2xBcHBvaW50bWVudENvcHlPcHRpb25zAG9sRXhjZXB0aW9ucwBvbE5h
dmlnYXRpb25Hcm91cHMAb2xPdXRsb29rQmFyR3JvdXBzAGdldF9Gb2xkZXJzAEVudW1lcmF0ZUZv
bGRlcnMAb2xGb2xkZXJzAG9sTmF2aWdhdGlvbkZvbGRlcnMAb2xSZW1pbmRlcnMAb2xFeHBsb3Jl
cnMAb2xJbnNwZWN0b3JzAGdldF9DbGFzcwBzZXRfQ2xhc3MAZ2V0X01lc3NhZ2VDbGFzcwBzZXRf
TWVzc2FnZUNsYXNzAE9sT2JqZWN0Q2xhc3MAU3VjY2VzcwBvbENvbnRhY3RQaG9uZUJ1c2luZXNz
AG9sQnVzaW5lc3MAZ2V0X0VtYWlsMUFkZHJlc3MAc2V0X0VtYWlsMUFkZHJlc3MAZ2V0X0VtYWls
MkFkZHJlc3MAc2V0X0VtYWlsMkFkZHJlc3MAZ2V0X0VtYWlsM0FkZHJlc3MAc2V0X0VtYWlsM0Fk
ZHJlc3MAZ2V0X0lNQWRkcmVzcwBzZXRfSU1BZGRyZXNzAGdldF9BZGRyZXNzAHNldF9BZGRyZXNz
AGdldF9Ib21lQWRkcmVzcwBzZXRfSG9tZUFkZHJlc3MAZ2V0X01haWxpbmdBZGRyZXNzAHNldF9N
YWlsaW5nQWRkcmVzcwBnZXRfU2VsZWN0ZWRNYWlsaW5nQWRkcmVzcwBzZXRfU2VsZWN0ZWRNYWls
aW5nQWRkcmVzcwBPbE1haWxpbmdBZGRyZXNzAGdldF9TZW5kZXJFbWFpbEFkZHJlc3MAc2V0X1Nl
bmRlckVtYWlsQWRkcmVzcwBFbnVtZXJhdGVBY2NvdW50RW1haWxBZGRyZXNzAGdldF9TbXRwQWRk
cmVzcwBnZXRfUHJpbWFyeVNtdHBBZGRyZXNzAGdldF9PdGhlckFkZHJlc3MAc2V0X090aGVyQWRk
cmVzcwBnZXRfQnVzaW5lc3NBZGRyZXNzAHNldF9CdXNpbmVzc0FkZHJlc3MAZ2V0X0ludGVybmV0
RnJlZUJ1c3lBZGRyZXNzAHNldF9JbnRlcm5ldEZyZWVCdXN5QWRkcmVzcwBvbFRhc2tJblByb2dy
ZXNzAGdldF9EdHMAZ2V0X0NvbnRhY3RzAHNldF9Db250YWN0cwBvbFN5bmNPYmplY3RzAGdldF9D
b25mbGljdHMAc2V0X0NvbmZsaWN0cwBvbENvbmZsaWN0cwBvbFJlc3VsdHMAU2NyaXB0UmVzdWx0
cwBnZXRfUmVjaXBpZW50cwBzZXRfUmVjaXBpZW50cwBnZXRfU3RhdHVzVXBkYXRlUmVjaXBpZW50
cwBzZXRfU3RhdHVzVXBkYXRlUmVjaXBpZW50cwBvbFJlY2lwaWVudHMAZ2V0X1N0YXR1c09uQ29t
cGxldGlvblJlY2lwaWVudHMAc2V0X1N0YXR1c09uQ29tcGxldGlvblJlY2lwaWVudHMAZ2V0X1Jl
cGx5UmVjaXBpZW50cwBzZXRfUmVwbHlSZWNpcGllbnRzAGdldF9BdHRhY2htZW50cwBzZXRfQXR0
YWNobWVudHMAZ2V0X0VuYWJsZVNoYXJlZEF0dGFjaG1lbnRzAHNldF9FbmFibGVTaGFyZWRBdHRh
Y2htZW50cwBvbEF0dGFjaG1lbnRzAE5hbWVTcGFjZUV2ZW50cwBVblJlZ2lzdGVyRXZlbnRzAEl0
ZW1zRXZlbnRzAEZvbGRlcnNFdmVudHMAQWNjb3VudHNFdmVudHMAZ2V0X0FjY291bnRzAEVudW1l
cmF0ZUFjY291bnRzAG9sQWNjb3VudHMAb2xBZGRyZXNzTGlzdHMARXhpc3RzAG9sT3V0bG9va0Jh
clNob3J0Y3V0cwBnZXRfU3RhdHVzAHNldF9TdGF0dXMAZ2V0X1Jlc3BvbnNlU3RhdHVzAHNldF9S
ZXNwb25zZVN0YXR1cwBPbFJlc3BvbnNlU3RhdHVzAGdldF9SZW1vdGVTdGF0dXMAc2V0X1JlbW90
ZVN0YXR1cwBPbFJlbW90ZVN0YXR1cwBnZXRfRmxhZ1N0YXR1cwBzZXRfRmxhZ1N0YXR1cwBPbEZs
YWdTdGF0dXMAZ2V0X01lZXRpbmdTdGF0dXMAc2V0X01lZXRpbmdTdGF0dXMAT2xNZWV0aW5nU3Rh
dHVzAE9sVGFza1N0YXR1cwBnZXRfQnVzeVN0YXR1cwBzZXRfQnVzeVN0YXR1cwBPbEJ1c3lTdGF0
dXMAb2xWaWV3cwBvbFdpbmRvd3MAQ29uY2F0AG9sQ29sdW1uRm9ybWF0AGdldF9Cb2R5Rm9ybWF0
AHNldF9Cb2R5Rm9ybWF0AE9sQm9keUZvcm1hdABvbENvbnRhY3QAY29udGFjdABvbFN5bmNPYmpl
Y3QAUmVsZWFzZUNvbU9iamVjdABnZXRfU3ViamVjdABzZXRfU3ViamVjdABnZXRfVGFza1N1Ympl
Y3QAc2V0X1Rhc2tTdWJqZWN0AG9sQnVzaW5lc3NDYXJkVHlwZUludGVyQ29ubmVjdABvbENvbmZs
aWN0AGdldF9Jc0NvbmZsaWN0AHNldF9Jc0NvbmZsaWN0AGdldF9SZW1pbmRlclNldABzZXRfUmVt
aW5kZXJTZXQAZ2V0X0hhc0NvdmVyU2hlZXQAc2V0X0hhc0NvdmVyU2hlZXQAZ2V0X0hvbWVBZGRy
ZXNzU3RyZWV0AHNldF9Ib21lQWRkcmVzc1N0cmVldABnZXRfTWFpbGluZ0FkZHJlc3NTdHJlZXQA
c2V0X01haWxpbmdBZGRyZXNzU3RyZWV0AGdldF9PdGhlckFkZHJlc3NTdHJlZXQAc2V0X090aGVy
QWRkcmVzc1N0cmVldABnZXRfQnVzaW5lc3NBZGRyZXNzU3RyZWV0AHNldF9CdXNpbmVzc0FkZHJl
c3NTdHJlZXQAU3BsaXQAZ2V0X0RlbGV0ZUFmdGVyU3VibWl0AHNldF9EZWxldGVBZnRlclN1Ym1p
dABnZXRfRGVmYXVsdABnZXRfUmVtaW5kZXJPdmVycmlkZURlZmF1bHQAc2V0X1JlbWluZGVyT3Zl
cnJpZGVEZWZhdWx0AHNldF9UYXNrUmVzdWx0AG9sQ29udGFjdFBob25lQXNzaXN0YW50AGdldF9T
ZW50AHNldF9TZW50AG9sUmVjaXBpZW50AG9sQXR0YWNobWVudABvbENyZWF0ZUFwcG9pbnRtZW50
AG9sQXBwb2ludG1lbnQAZ2V0X0RlcGFydG1lbnQAc2V0X0RlcGFydG1lbnQAb2xEb2N1bWVudABn
ZXRfUGFyZW50AHNldF9QYXJlbnQAZ2V0X0N1cnJlbnQASXRlbUV2ZW50c18xMF9FdmVudABJbnNw
ZWN0b3JFdmVudHNfMTBfRXZlbnQAQXBwbGljYXRpb25FdmVudHNfMTFfRXZlbnQATUFQSUZvbGRl
ckV2ZW50c18xMl9FdmVudABOYW1lU3BhY2VFdmVudHNfRXZlbnQASXRlbXNFdmVudHNfRXZlbnQA
Rm9sZGVyc0V2ZW50c19FdmVudABBY2NvdW50c0V2ZW50c19FdmVudABnZXRfQWxsRGF5RXZlbnQA
c2V0X0FsbERheUV2ZW50AG9sVmlld0ZvbnQAZ2V0X0NvdW50AGZpbGVDb3VudABnZXRfQWNjb3Vu
dABzZXRfQWNjb3VudABnZXRfU2VuZFVzaW5nQWNjb3VudABzZXRfU2VuZFVzaW5nQWNjb3VudABv
bEFjY291bnQAYWNjb3VudABvbFRhc2tBY2NlcHQAb2xDb3B5QXNBY2NlcHQAb2xUYXNrUmVxdWVz
dEFjY2VwdABnZXRfU3RhcnQAc2V0X1N0YXJ0AGdldF9SZW1pbmRlck1pbnV0ZXNCZWZvcmVTdGFy
dABzZXRfUmVtaW5kZXJNaW51dGVzQmVmb3JlU3RhcnQAZ2V0X05ldE1lZXRpbmdBdXRvU3RhcnQA
c2V0X05ldE1lZXRpbmdBdXRvU3RhcnQAb2xSZXBvcnQAU3RhdHVzUmVwb3J0AG9sUGFzc3BvcnQA
Z2V0X0ZsYWdSZXF1ZXN0AHNldF9GbGFnUmVxdWVzdABvbE1lZXRpbmdSZXF1ZXN0AG9sVGFza1Jl
cXVlc3QAb2xFeGNoYW5nZURpc3RyaWJ1dGlvbkxpc3QAb2xEaXN0cmlidXRpb25MaXN0AG9sQWRk
cmVzc0xpc3QAb2xQb3N0AFByaW50T3V0AG9sT3V0bG9va0JhclNob3J0Y3V0AE1vdmVOZXh0AG9s
Rm9ybWF0UmljaFRleHQAb2xDbGFzc0NhcmRWaWV3AG9sQ2xhc3NCdXNpbmVzc0NhcmRWaWV3AG9s
Q2xhc3NUYWJsZVZpZXcAb2xDbGFzc1Blb3BsZVZpZXcAb2xDbGFzc1RpbWVMaW5lVmlldwBvbFZp
ZXcAb2xDbGFzc0ljb25WaWV3AG9sQ2xhc3NDYWxlbmRhclZpZXcAYWRkX0JlZm9yZUF0dGFjaG1l
bnRQcmV2aWV3AHJlbW92ZV9CZWZvcmVBdHRhY2htZW50UHJldmlldwBJdGVtX0JlZm9yZUF0dGFj
aG1lbnRQcmV2aWV3AG9sSW1wb3J0YW5jZUxvdwBvbFJvdwBvbE5ldFNob3cAb2xNYXJrVG9tb3Jy
b3cAZ2V0X0lzSVBGYXgAc2V0X0lzSVBGYXgAb2xDb250YWN0UGhvbmVIb21lRmF4AG9sQ29udGFj
dFBob25lT3RoZXJGYXgAb2xDb250YWN0UGhvbmVCdXNpbmVzc0ZheABnZXRfQ29udmVyc2F0aW9u
SW5kZXgAc2V0X0NvbnZlcnNhdGlvbkluZGV4AENsZWFyQ29udmVyc2F0aW9uSW5kZXgAb2xDb250
YWN0UGhvbmVUZWxleABnZXRfU3VmZml4AHNldF9TdWZmaXgAZ2V0X0xhc3RGaXJzdE5vU3BhY2VB
bmRTdWZmaXgAc2V0X0xhc3RGaXJzdE5vU3BhY2VBbmRTdWZmaXgAZ2V0X0xhc3RGaXJzdEFuZFN1
ZmZpeABzZXRfTGFzdEZpcnN0QW5kU3VmZml4AGdldF9Ib21lQWRkcmVzc1Bvc3RPZmZpY2VCb3gA
c2V0X0hvbWVBZGRyZXNzUG9zdE9mZmljZUJveABnZXRfTWFpbGluZ0FkZHJlc3NQb3N0T2ZmaWNl
Qm94AHNldF9NYWlsaW5nQWRkcmVzc1Bvc3RPZmZpY2VCb3gAZ2V0X090aGVyQWRkcmVzc1Bvc3RP
ZmZpY2VCb3gAc2V0X090aGVyQWRkcmVzc1Bvc3RPZmZpY2VCb3gAZ2V0X0J1c2luZXNzQWRkcmVz
c1Bvc3RPZmZpY2VCb3gAc2V0X0J1c2luZXNzQWRkcmVzc1Bvc3RPZmZpY2VCb3gAZ2V0X1JlZmVy
cmVkQnkAc2V0X1JlZmVycmVkQnkAZ2V0X0ZsYWdEdWVCeQBzZXRfRmxhZ0R1ZUJ5AGdldF9CaXJ0
aGRheQBzZXRfQmlydGhkYXkAb2xNYXJrVG9kYXkARGlzcGxheQBUb0NoYXJBcnJheQBnZXRfSG9i
YnkAc2V0X0hvYmJ5AGdldF9SVEZCb2R5AHNldF9SVEZCb2R5AGdldF9IVE1MQm9keQBzZXRfSFRN
TEJvZHkAZ2V0X0JvZHkAc2V0X0JvZHkAZ2V0X0Fzc2VtYmx5AGdldF9MYXN0Rmlyc3RTcGFjZU9u
bHkAc2V0X0xhc3RGaXJzdFNwYWNlT25seQBnZXRfQ29tcGFueUxhc3RGaXJzdFNwYWNlT25seQBz
ZXRfQ29tcGFueUxhc3RGaXJzdFNwYWNlT25seQBvbEhlYWRlck9ubHkAQW55AGdldF9GdWxsTmFt
ZUFuZENvbXBhbnkAc2V0X0Z1bGxOYW1lQW5kQ29tcGFueQBnZXRfTGFzdEZpcnN0Tm9TcGFjZUNv
bXBhbnkAc2V0X0xhc3RGaXJzdE5vU3BhY2VDb21wYW55AG9sQ29udGFjdFBob25lQ29tcGFueQBn
ZXRfTGFzdEZpcnN0U3BhY2VPbmx5Q29tcGFueQBzZXRfTGFzdEZpcnN0U3BhY2VPbmx5Q29tcGFu
eQBvbE1hcmtlZEZvckNvcHkAb2xDb250YWN0UGhvbmVQcmltYXJ5AGdldF9Bbm5pdmVyc2FyeQBz
ZXRfQW5uaXZlcnNhcnkAb2xDYXRlZ29yeQBDcmVhdGVEaXJlY3RvcnkAZ2V0X0FkZHJlc3NFbnRy
eQBzZXRfQWRkcmVzc0VudHJ5AG9sQWRkcmVzc0VudHJ5AGdldF9Ib21lQWRkcmVzc0NvdW50cnkA
c2V0X0hvbWVBZGRyZXNzQ291bnRyeQBnZXRfTWFpbGluZ0FkZHJlc3NDb3VudHJ5AHNldF9NYWls
aW5nQWRkcmVzc0NvdW50cnkAZ2V0X090aGVyQWRkcmVzc0NvdW50cnkAc2V0X090aGVyQWRkcmVz
c0NvdW50cnkAZ2V0X0J1c2luZXNzQWRkcmVzc0NvdW50cnkAc2V0X0J1c2luZXNzQWRkcmVzc0Nv
dW50cnkAb2xCdXN5AGdldF9Ib21lQWRkcmVzc0NpdHkAc2V0X0hvbWVBZGRyZXNzQ2l0eQBnZXRf
TWFpbGluZ0FkZHJlc3NDaXR5AHNldF9NYWlsaW5nQWRkcmVzc0NpdHkAZ2V0X090aGVyQWRkcmVz
c0NpdHkAc2V0X090aGVyQWRkcmVzc0NpdHkAZ2V0X0J1c2luZXNzQWRkcmVzc0NpdHkAc2V0X0J1
c2luZXNzQWRkcmVzc0NpdHkAb3BfRXF1YWxpdHkAb3BfSW5lcXVhbGl0eQBnZXRfU2NoZWR1bGVQ
bHVzUHJpb3JpdHkAc2V0X1NjaGVkdWxlUGx1c1ByaW9yaXR5AGdldF9TZW5zaXRpdml0eQBzZXRf
U2Vuc2l0aXZpdHkAT2xTZW5zaXRpdml0eQBJc051bGxPckVtcHR5AG9sVXNlckRlZmluZWRQcm9w
ZXJ0eQBvbEl0ZW1Qcm9wZXJ0eQBvbFVzZXJQcm9wZXJ0eQAAAAAAFUEAZgB0AGUAcgBXAHIAaQB0
AGUAABtBAHQAdABhAGMAaABtAGUAbgB0AEEAZABkAAAdQQB0AHQAYQBjAGgAbQBlAG4AdABSAGUA
YQBkAAAhQQB0AHQAYQBjAGgAbQBlAG4AdABSAGUAbQBvAHYAZQAAJ0IAZQBmAG8AcgBlAEEAdAB0
AGEAYwBoAG0AZQBuAHQAQQBkAGQAAC9CAGUAZgBvAHIAZQBBAHQAdABhAGMAaABtAGUAbgB0AFAA
cgBlAHYAaQBlAHcAAClCAGUAZgBvAHIAZQBBAHQAdABhAGMAaABtAGUAbgB0AFIAZQBhAGQAAClC
AGUAZgBvAHIAZQBBAHQAdABhAGMAaABtAGUAbgB0AFMAYQB2AGUAAD9CAGUAZgBvAHIAZQBBAHQA
dABhAGMAaABtAGUAbgB0AFcAcgBpAHQAZQBUAG8AVABlAG0AcABGAGkAbABlAAAdQgBlAGYAbwBy
AGUAQQB1AHQAbwBTAGEAdgBlAAAhQgBlAGYAbwByAGUAQwBoAGUAYwBrAE4AYQBtAGUAcwAAGUIA
ZQBmAG8AcgBlAEQAZQBsAGUAdABlAAAVQgBlAGYAbwByAGUAUgBlAGEAZAAAGUMAdQBzAHQAbwBt
AEEAYwB0AGkAbwBuAAApQwB1AHMAdABvAG0AUAByAG8AcABlAHIAdAB5AEMAaABhAG4AZwBlAAAJ
TwBwAGUAbgAAHVAAcgBvAHAAZQByAHQAeQBDAGgAYQBuAGcAZQAACVIAZQBhAGQAAA1VAG4AbABv
AGEAZAAAC1cAcgBpAHQAZQAACVAAYQB0AGgAAEkwADAAMAA2AEYAMAAzAEEALQAwADAAMAAwAC0A
MAAwADAAMAAtAEMAMAAwADAALQAwADAAMAAwADAAMAAwADAAMAAwADQANgABHUQAYQB0AGEAIABE
AGUAdgBcAEkAbgBiAG8AeAAAGUMAaABlAGMAawBpAG4AZwAgAGkAbgAgAAAJLgBwAGQAZgAACS4A
ZABvAGMAAAkuAHgAbABzAAAJLgBwAHAAdAAACS4AdgBzAGQAAAkuAHoAaQBwAAAJLgByAGEAcgAA
CS4AdAB4AHQAAAkuAGMAcwB2AAALLgBwAHIAbwBqAAADXAAAD1MAYQB2AGkAbgBnACAAAB1BAGwA
cgBlAGEAZAB5ACAAcwBhAHYAZQBkACAAAAVFAFgAAAEAQ08AdQB0AGwAbwBvAGsAIABBAHQAdABh
AGMAaABtAGUAbgB0ACAARQB4AHQAcgBhAGMAdABvAHIAIAB2ADAALgAxAABDLQAtAC0ALQAtAC0A
LQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0AAQM6
AAAnUQA6ACAAUQB1AGkAdAAgAEEAcABwAGwAaQBjAGEAdABpAG8AbgAAA1EAABFRAHUAaQB0AHQA
aQBuAGcAABlQAHIAbwBjAGUAcwBzAGkAbgBnADoAIAAABVwAXAAAKUYAaQBuAGkAcwBoAGUAZAAg
AFAAcgBvAGMAZQBzAHMAaQBuAGcAIAAAMUkAbgB2AGEAbABpAGQAIABBAGMAYwBvAHUAbgB0ACAA
UwBlAGwAZQBjAHQAZQBkAAAbTABvAG8AawBpAG4AZwAgAGYAbwByADoAIAAAcVMAVABfADQAYwAw
AGEAYwBhADYAZAAxAGEAMAAyADQANABlADAAOABmADUAMgBlADQANABhAGMANgA2ADUAOAAzAGIA
YwAuAFAAcgBvAHAAZQByAHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAANUhkwnpM+pHsknq
SjN6IIIABCABAQgDIAABBSABARERBCABAQ4FIAEBEWkFIAEBEnUEIAEBBgcgAgESdRJ1BSACAQ4O
CwcDEoCAEoCAEoCACwACEoCdEoCdEoCdDBABAx4AEB4AHgAeAAUKARKAgAsHAxKAhBKAhBKAhAUK
ARKAhAsHAxKAiBKAiBKAiAUKARKAiAsHAxKAjBKAjBKAjAUKARKAjAsHAxKAkBKAkBKAkAUKARKA
kAsHAxKAlBKAlBKAlAUKARKAlAsHAxKAmBKAmBKAmAUKARKAmAsHAxKAnBKAnBKAnAUKARKAnAsH
AxKAoBKAoBKAoAUKARKAoAsHAxKApBKApBKApAUKARKApAsHAxKAqBKAqBKAqAUKARKAqAsHAxKA
rBKArBKArAUKARKArAsHAxKAsBKAsBKAsAUKARKAsAsHAxKAuBKAuBKAuAUKARKAuAsHAxKAvBKA
vBKAvAUKARKAvAsHAxKAyBKAyBKAyAUKARKAyAsHAxKAzBKAzBKAzAUKARKAzAsHAxKA4BKA4BKA
4AUKARKA4AsHAxKA5BKA5BKA5AUKARKA5AsHAxKA0BKA0BKA0AUKARKA0AIGHAcAARJ1EYClBiAC
ARJ1DgcgAgEcEoCdBAABCBwLBwMSgLQSgLQSgLQFCgESgLQLBwMSgMQSgMQSgMQFCgESgMQLBwMS
gNgSgNgSgNgFCgESgNgLBwMSgNQSgNQSgNQFCgESgNQLBwMSgNwSgNwSgNwFCgESgNwEAAEBHAUg
ABKAuQUgABKAvQYgARKAwRwDIAAcAyAADgQAAQEIBgcCElUSRQcAARJ1EYDJBQABHBJ1BCAAElUD
IAACCgcEEmASVRJcEkUEIAECDgQAAQEOBQACDg4OEAcHHQ4SgOwSVRKBCAgOEkUEAAECDgYAARKA
3Q4HFRKA5QIOAgUgAgEcGBMQAQICFRKA7QEeABUSgOUCHgACAwoBDgYAAw4ODg4FBwISMA4FAAIC
Dg4OBwcIEjQSIA4SVRIcEkUDAAABBgADDhwcHAMAAA4EAAEIDgoHBRJcDh0OCBJcBSACDggIBCAA
HQMGIAEdDh0DBCABCAgFIAASgPkHIAIBDhKA+Qi3elxWGTTgiQiJhF3NgIDMkQQAAAAABAEAAAAE
AgAAAAQDAAAABAQAAAAEBQAAAAQGAAAABAcAAAAECAAAAAQJAAAABAoAAAAECwAAAAQMAAAABA0A
AAAEDgAAAAQPAAAABBAAAAAEEQAAAAQSAAAABBQAAAAEFQAAAAQaAAAABDUAAAAENgAAAAQ3AAAA
BDgAAAAEOQAAAAQcAAAABB0AAAAEHgAAAAQgAAAABCEAAAAEIgAAAAQjAAAABCQAAAAEJQAAAAQm
AAAABCcAAAAEKAAAAAQpAAAABCoAAAAEKwAAAAQsAAAABC0AAAAELgAAAAQvAAAABDAAAAAEMQAA
AAQyAAAABDMAAAAENAAAAAQ8AAAABD0AAAAEPgAAAAQ/AAAABEAAAAAEQQAAAARCAAAABEMAAAAE
RAAAAARFAAAABEYAAAAERwAAAARIAAAABEkAAAAESgAAAARLAAAABEwAAAAETQAAAAROAAAABE8A
AAAEUAAAAARiAAAABGMAAAAEZAAAAARlAAAABGYAAAAEZwAAAARoAAAABGkAAAAEagAAAARrAAAA
BGwAAAAEbQAAAARuAAAABG8AAAAEcAAAAARxAAAABHIAAAAEcwAAAAR0AAAABHUAAAAEdgAAAAR3
AAAABHgAAAAEeQAAAAR6AAAABHsAAAAEfAAAAAR9AAAABH4AAAAEfwAAAASAAAAABIEAAAAEggAA
AASDAAAABIQAAAAEhQAAAASGAAAABIcAAAAEiAAAAASJAAAABIoAAAAEiwAAAASMAAAABI0AAAAE
jgAAAASQAAAABJEAAAAEkgAAAASTAAAABJQAAAAElQAAAASWAAAABJcAAAAEmAAAAASZAAAABJoA
AAAEmwAAAAScAAAABJ0AAAAEngAAAASfAAAABKAAAAAEoQAAAASiAAAABKMAAAAEpAAAAASlAAAA
BKYAAAAEpwAAAASoAAAABKkAAAAEqgAAAASrAAAABKwAAAAErQAAAASuAAAABK8AAAAEsAAAAASx
AAAABLIAAAAEswAAAAS0AAAABLUAAAAEtgAAAAS3AAAAARMBHAEbARoBGQQGEoEIBAYSgIAEBhKA
hAQGEoCIBAYSgIwEBhKAkAQGEoCUBAYSgJgEBhKAnAQGEoCgBAYSgKQEBhKAqAQGEoCsBAYSgLAE
BhKAuAQGEoC8BAYSgMgEBhKAzAQGEoDgBAYSgOQEBhKA0AIGAgQGEoC0BAYSgMQEBhKA2AQGEoDU
BAYSgNwDBhIsAwYSSAIGDgQGEYEgBAYRgVwDBhJMAwYRPQQGEYEwBAYRgTQEBhGBOAMGEmwDBhJw
BAYRgUACBggEBhKA6AQGEoD4BAYRgWwEBhGBYAQGEYFkBAYSgYgEBhKBkAQGEoD8AwYSMAMGEhwE
BhGBdAQGEoEQBAYSgaQEBhGBKAQGEoGgBAYRgVQEBhGBWAQGEYFoBAYRgXAEBhGBeAQGEYF8BAYR
gYAEBhGBhAQGEYEkBAYRgTwEBhGBSAMGEmEDBhJlAwYSGAQGEYEcBAYRgSwEBhGBRAQGEYFMBAYR
gVAEBhKB7AQGEYHwBSAAEoEIBiABARKBCAYgAQESgIAGIAEBEoCEBiABARKAiAYgAQESgIwGIAEB
EoCQBiABARKAlAYgAQESgJgGIAEBEoCcBiABARKAoAYgAQESgKQGIAEBEoCoBiABARKArAYgAQES
gLAGIAEBEoC4BiABARKAvAYgAQESgMgGIAEBEoDMBiABARKA4AYgAQESgOQGIAEBEoDQBSABARAC
ByADARwcEAIGIAIBHBACByACARJEEAIFIAEBEkQDIAAIBCAAET0EIAASNAQgABIsBCABAQIEIAAS
SAUgABGBIAYgAQERgSAFIAARgVwEIAASTAUgAQERPQUgABGBMAUgABGBNAYgAQERgTQFIAARgTgG
IAEBEYE4BCAAEmwEIAAScAUgABGBQAYgAQERgUAFIAASgOgFIAASgPgFIAARgWwGIAEBEYFsBSAA
EYFgBiABARGBYAUgABGBZAYgAQERgWQFIAASgYgFIAASgZAEIAEBHAUgABKA/AYgAQESgPwEIAAS
MAUgAQESMAQgABIcBSABARIcBSAAEYF0BiABARGBdAUgABKBEAUgABKBpAUgAQESUAYgAQERgUQE
IAASVAYgAQERgUwGIAEcEoD8BSACAQ4cBiABARKAtAYgAQESgMQGIAEBEoDYBiABARKA1AYgAQES
gNwFIAEBEiwFIAEBEkgGIAEBEYFcBSABARJMBiABARGBMAUgAQESbAUgAQEScAYgAQESgOgGIAEB
EoD4BiABARKBiAYgAQESgZAGIAEBEoEQBiABARKBpAUgABGBKAYgAQERgSgFIAASgaAGIAEBEoGg
BSAAEYFUBiABARGBVAUgABGBWAYgAQERgVgFIAARgWgGIAEBEYFoBSAAEYFwBiABARGBcAogAhJA
EoD8EYEcBSAAEoGUCiADEoEMEYFQHBwFIAARgXgGIAEBEYF4BSAAEYF8BiABARGBfAUgABGBgAYg
AQERgYAFIAARgYQGIAEBEYGEBSAAEoGcCiADEoGcEYGAHBwFIAARgSQGIAEBEYEkBSAAEYE8BiAB
ARGBPAUgABGBSAYgAQERgUgGIAEBEYEsBQABARJcBQABDhIcBQABElwOBAAAEmEEAAASZQUAAQES
ZQQAABIYBCAAElgFIAESRBwFIAIBHBkEIAASYAUgABKA7AUgABKBjAUgARIcHAYgARKA/BwEIAAS
IAUgABKBmAUoABKBCAMoAA4DKAAIBCgAET0EKAASNAQoABIsAygAAgQoABJIBSgAEYEgBSgAEYFc
BCgAEkwFKAARgTAFKAARgTQFKAARgTgEKAASbAQoABJwBSgAEYFABSgAEoDoBSgAEoD4AygAHAUo
ABGBbAUoABGBYAUoABGBZAUoABKBiAUoABKBkAUoABKA/AQoABIwBCgAEhwFKAARgXQFKAASgRAF
KAASgaQFKAARgSgFKAASgaAFKAARgVQFKAARgVgFKAARgWgFKAARgXAFKAARgXgFKAARgXwFKAAR
gYAFKAARgYQFKAARgSQFKAARgTwFKAARgUgECAASYQQIABJlBAgAEhgDCAAOAwgACAUIARJEHAQI
ABJgBQgAEoDsBAgAEjAFCAASgYwFCAESHBwFCAASgRAGCAESgPwcBAgAEjQFCAARgVwDCAAcBAgA
EiwECAASSAQIABE9BAgAEmwECAAScAUIABGBQAMIAAIFCAARgXQFCAASgaQFCAARgTgFCAASgZAF
CAARgWwFCAASgPwFCAASgPgFCAASgOgFCAARgSAFCAARgTAFCAARgTQECAASTAUIABGBYAUIABGB
ZAUIABKBiAQIABIcBAgAEiAFCAASgZgIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25U
aHJvd3MBCAEAAgAAAAAAKAEAI1NUXzRjMGFjYTZkMWEwMjQ0ZTA4ZjUyZTQ0YWM2NjU4M2JjAAAF
AQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTYAAEcBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQu
MAEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUQLk5FVCBGcmFtZXdvcmsgNAgBAAMwAAAAAAgBAAIw
AAAAAAgBAPH6AAAAAAgBAAQ3AAAAAAgBAGkAAAAAAAgBAGgAAAAAAAgBAOn7AAAAAAgBAFAAAAAA
AAgBAAAAAAAAAAgBAAPwAAAAAAgBAAbwAAAAAAgBAAjwAAAAAAgBAAnwAAAAAAgBAAHwAAAAAAgB
AALwAAAAAAgBAArwAAAAAAgBAAvwAAAAAAgBAAzwAAAAAAgBAA3wAAAAAAgBAHX6AAAAAAgBAK77
AAAAAAgBALD7AAAAAAgBAK/7AAAAAAgBAKv7AAAAAAgBALL7AAAAAAgBAK37AAAAAAgBAAL8AAAA
AAgBAIz8AAAAAAgBAI38AAAAAAgBAAMhAAAAAAgBAAAxAAAAAAgBAHj6AAAAAAgBAHkAAAAAAAgB
AAEwAAAAAAgBANP6AAAAAAgBANT6AAAAAAgBAG78AAAAAAgBAPX6AAAAAAgBAADwAAAAAAgBABf4
AAAAAAgBABX4AAAAAAgBADWFAAAAAAgBAACRAAAAAAgBAAGQAAAAAAgBADuFAAAAAAgBAMD6AAAA
AAgBAHAAAAAAAAgBAAcwAAAAAAgBAB7wAAAAAAgBAJXwAAAAAAgBAD7wAAAAAAgBABcAAAAAAAgB
AAgwAAAAAAgBAADxAAAAAAgBABoAAAAAAAgBADSFAAAAAAgBAA6FAAAAAAgBAFKFAAAAAAgBAFSF
AAAAAAgBAKPwAAAAAAgBADYAAAAAAAgBAAgOAAAAAAgBADcAAAAAAAgBABzwAAAAAAgBABb4AAAA
AAgBACPwAAAAAAgBADLwAAAAAAgBAErwAAAAAAgBAKbwAAAAAAgBADTwAAAAAAgBADPwAAAAAAgB
AEjwAAAAAAgBAFHwAAAAAAgBAAUAAAAAAAgBAAIOAAAAAAgBAAMOAAAAAAgBAA8AAAAAAAgBAAEO
AAAAAAgBABUAAAAAAAgBADAAAAAAAAgBADCFAAAAAAgBAJAQAAAAAAgBAAT0AAAAAAgBACMAAAAA
AAgBACkAAAAAAAgBAD8AAAAAAAgBAEAAAAAAAAgBAEMAAAAAAAgBAEQAAAAAAAgBAAYOAAAAAAgB
ACsAAAAAAAgBABT4AAAAAAgBAByFAAAAAAgBAB6FAAAAAAgBAAOFAAAAAAgBAB+FAAAAAAgBAAKF
AAAAAAgBABGFAAAAAAgBABPwAAAAAAgBAAH0AAAAAAgBABoMAAAAAAgBAAL0AAAAAAgBADkAAAAA
AAgBAEIAAAAAAAgBAAP0AAAAAAgBAAQOAAAAAAgBABvwAAAAAAgBACSFAAAAAAgBACL4AAAAAAgB
AHXwAAAAAAgBAAX0AAAAAAgBAAn6AAAAAAgBAEn6AAAAAAgBAE36AAAAAAgBAAv6AAAAAAgBAN4/
AAAAAAgBAHGFAAAAAAgBAKT6AAAAAAgBAJuFAAAAAAgBAMz6AAAAAAgBALD6AAAAAAgBALr6AAAA
AAgBALv6AAAAAAgBAB8MAAAAAAgBAB4MAAAAAAgBAMT6AAAAAAgBAMb6AAAAAAgBAMv6AAAAAAgB
AP36AAAAAAgBAJb7AAAAAAgBANH6AAAAAAgBAB/8AAAAAAgBAAWBAAAAAAgBAASBAAAAAAgBAA+B
AAAAAAgBAKCFAAAAAAgBAP77AAAAAAgBAAn8AAAAAAgBAAr8AAAAAAgBAFT8AAAAAAgBAHX8AAAA
AAgBAHv8AAAAAAgBAH38AAAAAAgBAIT8AAAAAAgBAIv8AAAAAAgBAIr8AAAAAAgBAND6AAAAAAgB
AOz6AAAAAAgBANv6AAAAAF8BAFpTeXN0ZW0uT2JqZWN0LCBtc2NvcmxpYiwgVmVyc2lvbj00LjAu
MC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkAACkB
ACQwMDA2MzBDNS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzBDNC0wMDAw
LTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAAYBAAIAAAApAQAkMDAwNjMxMDUtMDAwMC0wMDAwLUMw
MDAtMDAwMDAwMDAwMDQ2AABkAQAvTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suQWNj
b3VudHNFdmVudHMvTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suQWNjb3VudHNFdmVu
dHMAAF8BACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDY1TWljcm9zb2Z0Lk9m
ZmljZS5JbnRlcm9wLk91dGxvb2suQWNjb3VudHNFdmVudHNfRXZlbnQAAAkBAARJdGVtAAApAQAk
MDAwNjMwM0UtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwNjMwNEItMDAwMC0w
MDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwNjMwMDEtMDAwMC0wMDAwLUMwMDAtMDAwMDAw
MDAwMDQ2AAApAQAkMDAwNjMwMkMtMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AABwAQA1TWlj
cm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suQXBwbGljYXRpb25FdmVudHNfMTE1TWljcm9z
b2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suQXBwbGljYXRpb25FdmVudHNfMTEAAGUBACQwMDA2
MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDY7TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9w
Lk91dGxvb2suQXBwbGljYXRpb25FdmVudHNfMTFfRXZlbnQAACkBACQwMDA2MzAzMy0wMDAwLTAw
MDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzAwNy0wMDAwLTAwMDAtQzAwMC0wMDAwMDAw
MDAwNDYAACkBACQwMDA2MzAzQy0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2
MzBDMi0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzAyMS0wMDAwLTAwMDAt
QzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzEwMS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAw
NDYAACkBACQwMDA2MzBDOS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzAw
Ni0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzA0MC0wMDAwLTAwMDAtQzAw
MC0wMDAwMDAwMDAwNDYAACkBACQwMDA2MzA3Ni0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYA
AGIBAC5NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5Gb2xkZXJzRXZlbnRzLk1pY3Jv
c29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLkZvbGRlcnNFdmVudHMAAF4BACQwMDA2MmZmZi0w
MDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDY0TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxv
b2suRm9sZGVyc0V2ZW50c19FdmVudAAAKQEAJDAwMDYzMDQ2LTAwMDAtMDAwMC1DMDAwLTAwMDAw
MDAwMDA0NgAAKQEAJDAwMDYzMDA1LTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAw
MDYzMDJBLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAbAEAM01pY3Jvc29mdC5PZmZpY2Uu
SW50ZXJvcC5PdXRsb29rLkluc3BlY3RvckV2ZW50c18xMDNNaWNyb3NvZnQuT2ZmaWNlLkludGVy
b3AuT3V0bG9vay5JbnNwZWN0b3JFdmVudHNfMTAAAGMBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAw
MC0wMDAwMDAwMDAwNDY5TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSW5zcGVjdG9y
RXZlbnRzXzEwX0V2ZW50AAApAQAkMDAwNjMwMkItMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2
AABvAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2RU1pY3Jvc29mdC5PZmZp
Y2UuSW50ZXJvcC5PdXRsb29rLkl0ZW1FdmVudHNfMTBfQWZ0ZXJXcml0ZUV2ZW50SGFuZGxlcgAA
cgEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NkhNaWNyb3NvZnQuT2ZmaWNl
LkludGVyb3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX0F0dGFjaG1lbnRBZGRFdmVudEhhbmRsZXIA
AHMBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZJTWljcm9zb2Z0Lk9mZmlj
ZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9BdHRhY2htZW50UmVhZEV2ZW50SGFuZGxl
cgAAdQEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NktNaWNyb3NvZnQuT2Zm
aWNlLkludGVyb3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX0F0dGFjaG1lbnRSZW1vdmVFdmVudEhh
bmRsZXIAAHgBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZOTWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9CZWZvcmVBdHRhY2htZW50QWRk
RXZlbnRIYW5kbGVyAAB8AQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Uk1p
Y3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLkl0ZW1FdmVudHNfMTBfQmVmb3JlQXR0YWNo
bWVudFByZXZpZXdFdmVudEhhbmRsZXIAAHkBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAw
MDAwMDAwNDZPTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9C
ZWZvcmVBdHRhY2htZW50UmVhZEV2ZW50SGFuZGxlcgAAeQEAJDAwMDYyZmZmLTAwMDAtMDAwMC1j
MDAwLTAwMDAwMDAwMDA0Nk9NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5JdGVtRXZl
bnRzXzEwX0JlZm9yZUF0dGFjaG1lbnRTYXZlRXZlbnRIYW5kbGVyAACAhAEAJDAwMDYyZmZmLTAw
MDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NlpNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9v
ay5JdGVtRXZlbnRzXzEwX0JlZm9yZUF0dGFjaG1lbnRXcml0ZVRvVGVtcEZpbGVFdmVudEhhbmRs
ZXIAAHMBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZJTWljcm9zb2Z0Lk9m
ZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9CZWZvcmVBdXRvU2F2ZUV2ZW50SGFu
ZGxlcgAAdQEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NktNaWNyb3NvZnQu
T2ZmaWNlLkludGVyb3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX0JlZm9yZUNoZWNrTmFtZXNFdmVu
dEhhbmRsZXIAAHEBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZHTWljcm9z
b2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9CZWZvcmVEZWxldGVFdmVu
dEhhbmRsZXIAAG8BACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZFTWljcm9z
b2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9CZWZvcmVSZWFkRXZlbnRI
YW5kbGVyAABqAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2QE1pY3Jvc29m
dC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLkl0ZW1FdmVudHNfMTBfQ2xvc2VFdmVudEhhbmRsZXIA
AHEBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZHTWljcm9zb2Z0Lk9mZmlj
ZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9DdXN0b21BY3Rpb25FdmVudEhhbmRsZXIA
AHkBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZPTWljcm9zb2Z0Lk9mZmlj
ZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9DdXN0b21Qcm9wZXJ0eUNoYW5nZUV2ZW50
SGFuZGxlcgAAYgEALk1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLkl0ZW1FdmVudHNf
MTAuTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMAAAXgEAJDAw
MDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjRNaWNyb3NvZnQuT2ZmaWNlLkludGVy
b3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX0V2ZW50AABsAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMw
MDAtMDAwMDAwMDAwMDQ2Qk1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLkl0ZW1FdmVu
dHNfMTBfRm9yd2FyZEV2ZW50SGFuZGxlcgAAaQEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAw
MDAwMDAwMDA0Nj9NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5JdGVtRXZlbnRzXzEw
X09wZW5FdmVudEhhbmRsZXIAAHMBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAw
NDZJTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9Qcm9wZXJ0
eUNoYW5nZUV2ZW50SGFuZGxlcgAAaQEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAw
MDA0Nj9NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX1JlYWRF
dmVudEhhbmRsZXIAAG0BACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDZDTWlj
cm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbUV2ZW50c18xMF9SZXBseUFsbEV2ZW50
SGFuZGxlcgAAagEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NkBNaWNyb3Nv
ZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX1JlcGx5RXZlbnRIYW5kbGVy
AABpAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2P01pY3Jvc29mdC5PZmZp
Y2UuSW50ZXJvcC5PdXRsb29rLkl0ZW1FdmVudHNfMTBfU2VuZEV2ZW50SGFuZGxlcgAAawEAJDAw
MDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NkFNaWNyb3NvZnQuT2ZmaWNlLkludGVy
b3AuT3V0bG9vay5JdGVtRXZlbnRzXzEwX1VubG9hZEV2ZW50SGFuZGxlcgAAagEAJDAwMDYyZmZm
LTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NkBNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0
bG9vay5JdGVtRXZlbnRzXzEwX1dyaXRlRXZlbnRIYW5kbGVyAAApAQAkMDAwNjMwQTgtMDAwMC0w
MDAwLUMwMDAtMDAwMDAwMDAwMDQ2AAApAQAkMDAwNjMwNDEtMDAwMC0wMDAwLUMwMDAtMDAwMDAw
MDAwMDQ2AAApAQAkMDAwNjMwNzctMDAwMC0wMDAwLUMwMDAtMDAwMDAwMDAwMDQ2AABeAQAsTWlj
cm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbXNFdmVudHMsTWljcm9zb2Z0Lk9mZmlj
ZS5JbnRlcm9wLk91dGxvb2suSXRlbXNFdmVudHMAAFwBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAw
MC0wMDAwMDAwMDAwNDYyTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suSXRlbXNFdmVu
dHNfRXZlbnQAACkBACQwMDA2MzA4QS0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAACkBACQw
MDA2MzBGNy0wMDAwLTAwMDAtQzAwMC0wMDAwMDAwMDAwNDYAAG4BADRNaWNyb3NvZnQuT2ZmaWNl
LkludGVyb3AuT3V0bG9vay5NQVBJRm9sZGVyRXZlbnRzXzEyNE1pY3Jvc29mdC5PZmZpY2UuSW50
ZXJvcC5PdXRsb29rLk1BUElGb2xkZXJFdmVudHNfMTIAAGQBACQwMDA2MmZmZi0wMDAwLTAwMDAt
YzAwMC0wMDAwMDAwMDAwNDY6TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suTUFQSUZv
bGRlckV2ZW50c18xMl9FdmVudAAAKQEAJDAwMDYzMDM0LTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAw
MDA0NgAAKQEAJDAwMDYzMDYyLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYz
MDAyLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYzMDhDLTAwMDAtMDAwMC1D
MDAwLTAwMDAwMDAwMDA0NgAAZgEAME1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLk5h
bWVTcGFjZUV2ZW50czBNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5OYW1lU3BhY2VF
dmVudHMAAGABACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDY2TWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suTmFtZVNwYWNlRXZlbnRzX0V2ZW50AABjAQAkMDAwNjJm
ZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2OU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5P
dXRsb29rLk9sQXBwb2ludG1lbnRDb3B5T3B0aW9ucwAAVwEAJDAwMDYyZmZmLTAwMDAtMDAwMC1j
MDAwLTAwMDAwMDAwMDA0Ni1NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbEJvZHlG
b3JtYXQAAF0BACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYzTWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suT2xCdXNpbmVzc0NhcmRUeXBlAABXAQAkMDAwNjJmZmYt
MDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2LU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRs
b29rLk9sQnVzeVN0YXR1cwAAXwEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0
NjVNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbENvbnRhY3RQaG9uZU51bWJlcgAA
WgEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjBNaWNyb3NvZnQuT2ZmaWNl
LkludGVyb3AuT3V0bG9vay5PbERvd25sb2FkU3RhdGUAAFUBACQwMDA2MmZmZi0wMDAwLTAwMDAt
YzAwMC0wMDAwMDAwMDAwNDYrTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suT2xGbGFn
SWNvbgAAVwEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0Ni1NaWNyb3NvZnQu
T2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbEZsYWdTdGF0dXMAAFMBACQwMDA2MmZmZi0wMDAwLTAw
MDAtYzAwMC0wMDAwMDAwMDAwNDYpTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suT2xH
ZW5kZXIAAFcBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYtTWljcm9zb2Z0
Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suT2xJbXBvcnRhbmNlAABbAQAkMDAwNjJmZmYtMDAwMC0w
MDAwLWMwMDAtMDAwMDAwMDAwMDQ2MU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLk9s
SW5zcGVjdG9yQ2xvc2UAAFsBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYx
TWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suT2xNYWlsaW5nQWRkcmVzcwAAWQEAJDAw
MDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0Ni9NaWNyb3NvZnQuT2ZmaWNlLkludGVy
b3AuT3V0bG9vay5PbE1hcmtJbnRlcnZhbAAAXAEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAw
MDAwMDAwMDA0NjJNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbE1lZXRpbmdSZXNw
b25zZQAAWgEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0NjBNaWNyb3NvZnQu
T2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbE1lZXRpbmdTdGF0dXMAAFsBACQwMDA2MmZmZi0wMDAw
LTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYxTWljcm9zb2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2su
T2xOZXRNZWV0aW5nVHlwZQAAWAEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAwMDAwMDA0
Ni5NaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbE9iamVjdENsYXNzAABXAQAkMDAw
NjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2LU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJv
cC5PdXRsb29rLk9sUGVybWlzc2lvbgAAXgEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAwMDAw
MDAwMDA0NjRNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbFBlcm1pc3Npb25TZXJ2
aWNlAABcAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2Mk1pY3Jvc29mdC5P
ZmZpY2UuSW50ZXJvcC5PdXRsb29rLk9sUmVjdXJyZW5jZVN0YXRlAABZAQAkMDAwNjJmZmYtMDAw
MC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2L01pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29r
Lk9sUmVtb3RlU3RhdHVzAABbAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2
MU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLk9sUmVzcG9uc2VTdGF0dXMAAFgBACQw
MDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYuTWljcm9zb2Z0Lk9mZmljZS5JbnRl
cm9wLk91dGxvb2suT2xTZW5zaXRpdml0eQAAYAEAJDAwMDYyZmZmLTAwMDAtMDAwMC1jMDAwLTAw
MDAwMDAwMDA0NjZNaWNyb3NvZnQuT2ZmaWNlLkludGVyb3AuT3V0bG9vay5PbFRhc2tEZWxlZ2F0
aW9uU3RhdGUAAFoBACQwMDA2MmZmZi0wMDAwLTAwMDAtYzAwMC0wMDAwMDAwMDAwNDYwTWljcm9z
b2Z0Lk9mZmljZS5JbnRlcm9wLk91dGxvb2suT2xUYXNrT3duZXJzaGlwAABZAQAkMDAwNjJmZmYt
MDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAwMDQ2L01pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRs
b29rLk9sVGFza1Jlc3BvbnNlAABXAQAkMDAwNjJmZmYtMDAwMC0wMDAwLWMwMDAtMDAwMDAwMDAw
MDQ2LU1pY3Jvc29mdC5PZmZpY2UuSW50ZXJvcC5PdXRsb29rLk9sVGFza1N0YXR1cwAAKQEAJDAw
MDYzMDJELTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYzMDQ1LTAwMDAtMDAw
MC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYzMDNCLTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAw
MDA0NgAAKQEAJDAwMDYzMDQ0LTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYz
MEM3LTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYzMDM1LTAwMDAtMDAwMC1D
MDAwLTAwMDAwMDAwMDA0NgAAKQEAJDAwMDYzMEZELTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0
NgAAKQEAJDAwMDYzMDNELTAwMDAtMDAwMC1DMDAwLTAwMDAwMDAwMDA0NgAAAAAAtAAAAM7K774B
AAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lv
bj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUw
ODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQ
tAAAAETdAQAAAAAAAAAAAF7dAQAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAABQ3QEAAAAAAAAAAAAA
AF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAQAQAAAAGAAAgAAAAAAAAAAAAAAAAAAAAQABAAAAMAAAgAAAAAAA
AAAAAAAAAAAAAQAAAAAASAAAAFjgAQAaBAAAAAAAAAAAAAAaBDQAAABWAFMAXwBWAEUAUgBTAEkA
TwBOAF8ASQBOAEYATwAAAAAAvQTv/gAAAQAAAAEA4mjNFwAAAQDiaM0XPwAAAAAAAAAEAAAAAgAA
AAAAAAAAAAAAAAAAAEQAAAABAFYAYQByAEYAaQBsAGUASQBuAGYAbwAAAAAAJAAEAAAAVAByAGEA
bgBzAGwAYQB0AGkAbwBuAAAAAAAAALAEegMAAAEAUwB0AHIAaQBuAGcARgBpAGwAZQBJAG4AZgBv
AAAAVgMAAAEAMAAwADAAMAAwADQAYgAwAAAAGgABAAEAQwBvAG0AbQBlAG4AdABzAAAAAAAAACIA
AQABAEMAbwBtAHAAYQBuAHkATgBhAG0AZQAAAAAAAAAAAHAAJAABAEYAaQBsAGUARABlAHMAYwBy
AGkAcAB0AGkAbwBuAAAAAABTAFQAXwA0AGMAMABhAGMAYQA2AGQAMQBhADAAMgA0ADQAZQAwADgA
ZgA1ADIAZQA0ADQAYQBjADYANgA1ADgAMwBiAGMAAAA+AA8AAQBGAGkAbABlAFYAZQByAHMAaQBv
AG4AAAAAADEALgAwAC4ANgAwADkAMwAuADIANgA4ADUAMAAAAAAAcAAoAAEASQBuAHQAZQByAG4A
YQBsAE4AYQBtAGUAAABTAFQAXwA3AGEAOQAyADcAMgBjADYAMQBkADAAOAA0AGMAMgBkADgAOAA4
AGQAOQA1AGYAZQA4ADQAMwAxAGEAYQAyADAALgBkAGwAbAAAAEgAEgABAEwAZQBnAGEAbABDAG8A
cAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0ACAAQAAgACAAMgAwADEANgAAACoAAQAB
AEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAAAAAAAAAAeAAoAAEATwByAGkAZwBpAG4A
YQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAVABfADcAYQA5ADIANwAyAGMANgAxAGQAMAA4ADQAYwAy
AGQAOAA4ADgAZAA5ADUAZgBlADgANAAzADEAYQBhADIAMAAuAGQAbABsAAAAaAAkAAEAUAByAG8A
ZAB1AGMAdABOAGEAbQBlAAAAAABTAFQAXwA0AGMAMABhAGMAYQA2AGQAMQBhADAAMgA0ADQAZQAw
ADgAZgA1ADIAZQA0ADQAYQBjADYANgA1ADgAMwBiAGMAAABCAA8AAQBQAHIAbwBkAHUAYwB0AFYA
ZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAMAA5ADMALgAyADYAOAA1ADAAAAAAAEYADwABAEEAcwBz
AGUAbQBiAGwAeQAgAFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADYAMAA5ADMALgAyADYAOAA1ADAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AADQAQAMAAAAcD0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</BinaryItem>
            </ScriptProject>
          </DTS:ObjectData>
        </DTS:Executable>
      </DTS:Executables>
      <DTS:PrecedenceConstraints>
        <DTS:PrecedenceConstraint
          DTS:refId="Package\For Loop Container.PrecedenceConstraints[Constraint]"
          DTS:CreationName=""
          DTS:DTSID="{D81A8B18-AD82-4A6D-9AA7-B140C411BF16}"
          DTS:From="Package\For Loop Container\read Emails"
          DTS:LogicalAnd="True"
          DTS:ObjectName="Constraint"
          DTS:To="Package\For Loop Container\Iterate Through all the Files" />
      </DTS:PrecedenceConstraints>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="sql11">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml">
        <NodeLayout
          Size="151,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task"
          TopLeft="345,321" />
        <NodeLayout
          Size="297,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Drop BOBReportTable Create BOBReportTable"
          TopLeft="273,225" />
        <NodeLayout
          Size="263,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Move Data File To Processing Directory"
          TopLeft="84,145" />
        <NodeLayout
          Size="273,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Move Processed File To Archive Directory"
          TopLeft="99,439" />
        <NodeLayout
          Size="167,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Watch for new File"
          TopLeft="114,34" />
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint]"
          TopLeft="421,267">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,54"
              Start="0,0"
              End="0,46.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,46.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint 1]"
          TopLeft="197.5,76">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="18,69"
              Start="0,0"
              End="18,61.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,30.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,30.5"
                    Point2="0,34.5"
                    Point3="4,34.5" />
                  <mssgle:LineSegment
                    End="14,34.5" />
                  <mssgle:CubicBezierSegment
                    Point1="14,34.5"
                    Point2="18,34.5"
                    Point3="18,38.5" />
                  <mssgle:LineSegment
                    End="18,61.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint 2]"
          TopLeft="215.5,187">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="206,38"
              Start="0,0"
              End="206,30.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,15" />
                  <mssgle:CubicBezierSegment
                    Point1="0,15"
                    Point2="0,19"
                    Point3="4,19" />
                  <mssgle:LineSegment
                    End="202,19" />
                  <mssgle:CubicBezierSegment
                    Point1="202,19"
                    Point2="206,19"
                    Point3="206,23" />
                  <mssgle:LineSegment
                    End="206,30.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files.PrecedenceConstraints[Constraint 3]"
          TopLeft="420.5,363">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-185,76"
              Start="0,0"
              End="-185,68.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,34" />
                  <mssgle:CubicBezierSegment
                    Point1="0,34"
                    Point2="0,38"
                    Point3="-4,38" />
                  <mssgle:LineSegment
                    End="-181,38" />
                  <mssgle:CubicBezierSegment
                    Point1="-181,38"
                    Point2="-185,38"
                    Point3="-185,42" />
                  <mssgle:LineSegment
                    End="-185,68.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="789,569"
          Size="789,612"
          Id="Package\For Loop Container\Iterate Through all the Files"
          TopLeft="127,230" />
        <NodeLayout
          Size="133,42"
          Id="Package\For Loop Container\read Emails"
          TopLeft="234,37" />
        <EdgeLayout
          Id="Package\For Loop Container.PrecedenceConstraints[Constraint]"
          TopLeft="300.5,79">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="221,151"
              Start="0,0"
              End="221,143.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,71.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,71.5"
                    Point2="0,75.5"
                    Point3="4,75.5" />
                  <mssgle:LineSegment
                    End="217,75.5" />
                  <mssgle:CubicBezierSegment
                    Point1="217,75.5"
                    Point2="221,75.5"
                    Point3="221,79.5" />
                  <mssgle:LineSegment
                    End="221,143.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <ContainerLayout
          HeaderHeight="43"
          IsExpanded="True"
          PanelSize="953,897"
          Size="953,940"
          Id="Package\For Loop Container"
          TopLeft="60,60" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\For Loop Container\Iterate Through all the Files\Data Flow Task">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="156,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Data Conversion"
          TopLeft="940,217" />
        <NodeLayout
          Size="154,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Derived Column"
          TopLeft="766,398" />
        <NodeLayout
          Size="139,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Excel Source"
          TopLeft="273,106" />
        <NodeLayout
          Size="171,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination"
          TopLeft="390,456" />
        <NodeLayout
          Size="155,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\Conditional Split"
          TopLeft="575,126" />
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Data Conversion Output]"
          TopLeft="1018,259">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-175,139"
              Start="0,0"
              End="-175,131.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,65.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,65.5"
                    Point2="0,69.5"
                    Point3="-4,69.5" />
                  <mssgle:LineSegment
                    End="-171,69.5" />
                  <mssgle:CubicBezierSegment
                    Point1="-171,69.5"
                    Point2="-175,69.5"
                    Point3="-175,73.5" />
                  <mssgle:LineSegment
                    End="-175,131.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Conditional Split Default Output]"
          TopLeft="652.5,168">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="365.5,49"
              Start="0,0"
              End="365.5,41.5">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,20.5" />
                  <mssgle:CubicBezierSegment
                    Point1="0,20.5"
                    Point2="0,24.5"
                    Point3="4,24.5" />
                  <mssgle:LineSegment
                    End="361.5,24.5" />
                  <mssgle:CubicBezierSegment
                    Point1="361.5,24.5"
                    Point2="365.5,24.5"
                    Point3="365.5,28.5" />
                  <mssgle:LineSegment
                    End="365.5,41.5" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="112.13609375,29.5,141.2278125,11.658203125"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Excel Source Output]"
          TopLeft="412,127">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="163,20"
              Start="0,0"
              End="155.5,20">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="77.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="77.5,0"
                    Point2="81.5,0"
                    Point3="81.5,4" />
                  <mssgle:LineSegment
                    End="81.5,16" />
                  <mssgle:CubicBezierSegment
                    Point1="81.5,16"
                    Point2="81.5,20"
                    Point3="85.5,20" />
                  <mssgle:LineSegment
                    End="155.5,20" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.Paths[Derived Column Output]"
          TopLeft="766,419">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-205,58"
              Start="0,0"
              End="-197.5,58">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="-98.5,0" />
                  <mssgle:CubicBezierSegment
                    Point1="-98.5,0"
                    Point2="-102.5,0"
                    Point3="-102.5,4" />
                  <mssgle:LineSegment
                    End="-102.5,54" />
                  <mssgle:CubicBezierSegment
                    Point1="-102.5,54"
                    Point2="-102.5,58"
                    Point3="-106.5,58" />
                  <mssgle:LineSegment
                    End="-197.5,58" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <DtsEventHandler
    design-time-name="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.EventHandlers[OnError]">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="291,42"
          Id="Package\For Loop Container\Iterate Through all the Files\Data Flow Task.EventHandlers[OnError]\Move file from processing to archive on error"
          TopLeft="481,156" />
      </GraphLayout>
    </LayoutInfo>
  </DtsEventHandler>
  <PipelineComponentMetadata
    design-time-name="Package\For Loop Container\Iterate Through all the Files\Data Flow Task\OLE DB Destination">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>